/* myonvif.h
   Generated by wsdl2h 2.8.1 from deviceio.wsdl devicemgmt.wsdl event.wsdl imaging.wsdl media.wsdl ptz.wsdl http://www.w3.org/2006/03/addressing/ws-addr.xsd and typemap.dat
   2011-07-07 02:49:22 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on myonvif.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt cw

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://www.onvif.org/ver10/deviceIO/wsdl"
ns2 = "http://www.onvif.org/ver10/media/wsdl"
ns3 = "http://www.onvif.org/ver10/schema"
ns4 = "http://docs.oasis-open.org/wsn/b-2"
ns5 = "http://www.w3.org/2004/08/xop/include"
ns6 = "http://docs.oasis-open.org/wsrf/bf-2"
ns7 = "http://docs.oasis-open.org/wsn/t-1"
ns8 = "http://www.onvif.org/ver10/device/wsdl"
ns9 = "http://www.onvif.org/ver10/events/wsdl"
ns10 = "http://docs.oasis-open.org/wsrf/rw-2"
ns11 = "http://docs.oasis-open.org/wsrf/r-2"
ns12 = "http://www.onvif.org/ver20/imaging/wsdl"
ns13 = "http://www.onvif.org/ver20/ptz/wsdl"
ns14 = "http://www.w3.org/2005/08/addressing"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://www.onvif.org/ver10/deviceIO/wsdl"
//gsoap ns1   schema namespace:	http://www.onvif.org/ver10/deviceIO/wsdl
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns2	"http://www.onvif.org/ver10/media/wsdl"
//gsoap ns2   schema namespace:	http://www.onvif.org/ver10/media/wsdl
//gsoap ns2   schema elementForm:	qualified
//gsoap ns2   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns3	"http://www.onvif.org/ver10/schema"
//gsoap ns3   schema namespace:	http://www.onvif.org/ver10/schema
//gsoap ns3   schema elementForm:	qualified
//gsoap ns3   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns4	"http://docs.oasis-open.org/wsn/b-2"
//gsoap ns4   schema namespace:	http://docs.oasis-open.org/wsn/b-2
//gsoap ns4   schema elementForm:	qualified
//gsoap ns4   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns5	"http://www.w3.org/2004/08/xop/include"
//gsoap ns5   schema namespace:	http://www.w3.org/2004/08/xop/include
//gsoap ns5   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns6	"http://docs.oasis-open.org/wsrf/bf-2"
//gsoap ns6   schema namespace:	http://docs.oasis-open.org/wsrf/bf-2
//gsoap ns6   schema elementForm:	qualified
//gsoap ns6   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns7	"http://docs.oasis-open.org/wsn/t-1"
//gsoap ns7   schema namespace:	http://docs.oasis-open.org/wsn/t-1
//gsoap ns7   schema elementForm:	qualified
//gsoap ns7   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns8	"http://www.onvif.org/ver10/device/wsdl"
//gsoap ns8   schema namespace:	http://www.onvif.org/ver10/device/wsdl
//gsoap ns8   schema elementForm:	qualified
//gsoap ns8   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns9	"http://www.onvif.org/ver10/events/wsdl"
//gsoap ns9   schema namespace:	http://www.onvif.org/ver10/events/wsdl
//gsoap ns9   schema elementForm:	qualified
//gsoap ns9   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns15	""
//gsoap ns15  schema namespace:	
//gsoap ns15  schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns10	"http://docs.oasis-open.org/wsrf/rw-2"
//gsoap ns10  schema namespace:	http://docs.oasis-open.org/wsrf/rw-2
//gsoap ns10  schema elementForm:	qualified
//gsoap ns10  schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns11	"http://docs.oasis-open.org/wsrf/r-2"
//gsoap ns11  schema namespace:	http://docs.oasis-open.org/wsrf/r-2
//gsoap ns11  schema elementForm:	qualified
//gsoap ns11  schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns12	"http://www.onvif.org/ver20/imaging/wsdl"
//gsoap ns12  schema namespace:	http://www.onvif.org/ver20/imaging/wsdl
//gsoap ns12  schema elementForm:	qualified
//gsoap ns12  schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns13	"http://www.onvif.org/ver20/ptz/wsdl"
//gsoap ns13  schema namespace:	http://www.onvif.org/ver20/ptz/wsdl
//gsoap ns13  schema elementForm:	qualified
//gsoap ns13  schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns14	"http://www.w3.org/2005/08/addressing"
//gsoap ns14  schema namespace:	http://www.w3.org/2005/08/addressing
//gsoap ns14  schema elementForm:	qualified
//gsoap ns14  schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/// Primitive built-in type "xs:NCName"
typedef char* xsd__NCName;

/// Primitive built-in type "xs:anySimpleType"
typedef char* xsd__anySimpleType;

/// Primitive built-in type "xs:anyURI"
typedef char* xsd__anyURI;

/// Built-in type "xs:base64Binary".
struct xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: for DIME and MTOM XOP attachments only
};

/// Built-in type "xs:boolean".
enum xsd__boolean { xsd__boolean__false_, xsd__boolean__true_ };

/// Primitive built-in type "xs:duration"
typedef char* xsd__duration;

/// Built-in type "xs:hexBinary".
struct xsd__hexBinary { unsigned char *__ptr; int __size; };

/// Primitive built-in type "xs:integer"
typedef char* xsd__integer;

/// Primitive built-in type "xs:nonNegativeInteger"
typedef char* xsd__nonNegativeInteger;

/// Primitive built-in type "xs:token"
typedef char* xsd__token;

/// Built-in attribute "xmime:contentType".
typedef char* _xmime__contentType;

/// Built-in attribute "xml:lang".
typedef char* _xml__lang;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver10/deviceIO/wsdl                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver10/media/wsdl                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver10/schema                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsn/b-2                                       *
 *                                                                            *
\******************************************************************************/


/// union of values "xsd:dateTime xsd:duration"
typedef char* ns4__AbsoluteOrRelativeTimeType;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.w3.org/2004/08/xop/include                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsrf/bf-2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsn/t-1                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver10/device/wsdl                                   *
 *                                                                            *
\******************************************************************************/


/// "http://www.onvif.org/ver10/device/wsdl":EAPMethodTypes is a simpleType containing a whitespace separated list of xs:int.
typedef char* ns8__EAPMethodTypes;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver10/events/wsdl                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsrf/rw-2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsrf/r-2                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver20/imaging/wsdl                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver20/ptz/wsdl                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.w3.org/2005/08/addressing                                     *
 *                                                                            *
\******************************************************************************/


/// union of values "tns:RelationshipType xs:anyURI"
typedef char* ns14__RelationshipTypeOpenEnum;

/// union of values "tns:FaultCodesType xs:QName"
typedef char* ns14__FaultCodesOpenEnumType;

/// "http://www.onvif.org/ver10/schema":ReferenceToken is a simpleType restriction of xs:string.
/// @brief Unique identifier for a physical or logical resource. Tokens should be assigned such that they are unique within a device. Tokens must be at least unique within its class. Length up to 64 characters.
/// Length of this string is within 0..64 characters
typedef char* ns3__ReferenceToken:64;

/// "http://www.onvif.org/ver10/schema":Name is a simpleType restriction of xs:string.
/// @brief User readable name. Length up to 64 characters.
/// Length of this string is within 0..64 characters
typedef char* ns3__Name:64;

/// "http://www.onvif.org/ver10/schema":VideoEncoding is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__VideoEncoding' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__VideoEncoding
{
	ns3__VideoEncoding__JPEG,	///< xs:string value="JPEG"
	ns3__VideoEncoding__MPEG4,	///< xs:string value="MPEG4"
	ns3__VideoEncoding__H264,	///< xs:string value="H264"
};

/// "http://www.onvif.org/ver10/schema":Mpeg4Profile is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__Mpeg4Profile' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__Mpeg4Profile
{
	ns3__Mpeg4Profile__SP,	///< xs:string value="SP"
	ns3__Mpeg4Profile__ASP,	///< xs:string value="ASP"
};

/// "http://www.onvif.org/ver10/schema":H264Profile is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__H264Profile' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__H264Profile
{
	ns3__H264Profile__Baseline,	///< xs:string value="Baseline"
	ns3__H264Profile__Main,	///< xs:string value="Main"
	ns3__H264Profile__Extended,	///< xs:string value="Extended"
	ns3__H264Profile__High,	///< xs:string value="High"
};

/// "http://www.onvif.org/ver10/schema":AudioEncoding is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__AudioEncoding' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__AudioEncoding
{
	ns3__AudioEncoding__G711,	///< xs:string value="G711"
	ns3__AudioEncoding__G726,	///< xs:string value="G726"
	ns3__AudioEncoding__AAC,	///< xs:string value="AAC"
};

/// "http://www.onvif.org/ver10/schema":StreamType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__StreamType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__StreamType
{
	ns3__StreamType__RTP_Unicast,	///< xs:string value="RTP-Unicast"
	ns3__StreamType__RTP_Multicast,	///< xs:string value="RTP-Multicast"
};

/// "http://www.onvif.org/ver10/schema":TransportProtocol is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__TransportProtocol' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__TransportProtocol
{
	ns3__TransportProtocol__UDP,	///< xs:string value="UDP"
	ns3__TransportProtocol__TCP,	///< xs:string value="TCP"
	ns3__TransportProtocol__RTSP,	///< xs:string value="RTSP"
	ns3__TransportProtocol__HTTP,	///< xs:string value="HTTP"
};

/// "http://www.onvif.org/ver10/schema":ScopeDefinition is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__ScopeDefinition' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__ScopeDefinition
{
	ns3__ScopeDefinition__Fixed,	///< xs:string value="Fixed"
	ns3__ScopeDefinition__Configurable,	///< xs:string value="Configurable"
};

/// "http://www.onvif.org/ver10/schema":DiscoveryMode is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__DiscoveryMode' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__DiscoveryMode
{
	ns3__DiscoveryMode__Discoverable,	///< xs:string value="Discoverable"
	ns3__DiscoveryMode__NonDiscoverable,	///< xs:string value="NonDiscoverable"
};

/// "http://www.onvif.org/ver10/schema":NetworkInterfaceConfigPriority is a simpleType restriction of xs:integer.
/// Value range is [0..31]
typedef xsd__integer ns3__NetworkInterfaceConfigPriority;

/// "http://www.onvif.org/ver10/schema":Duplex is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__Duplex' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__Duplex
{
	ns3__Duplex__Full,	///< xs:string value="Full"
	ns3__Duplex__Half,	///< xs:string value="Half"
};

/// "http://www.onvif.org/ver10/schema":IANA-IfTypes is a simpleType restriction of xs:int.
/// @brief For valid numbers, please refer to http://www.iana.org/assignments/ianaiftype-mib.
typedef int ns3__IANA_IfTypes;

/// "http://www.onvif.org/ver10/schema":IPv6DHCPConfiguration is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__IPv6DHCPConfiguration' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__IPv6DHCPConfiguration
{
	ns3__IPv6DHCPConfiguration__Auto,	///< xs:string value="Auto"
	ns3__IPv6DHCPConfiguration__Stateful,	///< xs:string value="Stateful"
	ns3__IPv6DHCPConfiguration__Stateless,	///< xs:string value="Stateless"
	ns3__IPv6DHCPConfiguration__Off,	///< xs:string value="Off"
};

/// "http://www.onvif.org/ver10/schema":NetworkProtocolType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__NetworkProtocolType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__NetworkProtocolType
{
	ns3__NetworkProtocolType__HTTP,	///< xs:string value="HTTP"
	ns3__NetworkProtocolType__HTTPS,	///< xs:string value="HTTPS"
	ns3__NetworkProtocolType__RTSP,	///< xs:string value="RTSP"
};

/// "http://www.onvif.org/ver10/schema":NetworkHostType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__NetworkHostType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__NetworkHostType
{
	ns3__NetworkHostType__IPv4,	///< xs:string value="IPv4"
	ns3__NetworkHostType__IPv6,	///< xs:string value="IPv6"
	ns3__NetworkHostType__DNS,	///< xs:string value="DNS"
};

/// "http://www.onvif.org/ver10/schema":IPv4Address is a simpleType restriction of xs:token.
typedef xsd__token ns3__IPv4Address;

/// "http://www.onvif.org/ver10/schema":IPv6Address is a simpleType restriction of xs:token.
typedef xsd__token ns3__IPv6Address;

/// "http://www.onvif.org/ver10/schema":HwAddress is a simpleType restriction of xs:token.
typedef xsd__token ns3__HwAddress;

/// "http://www.onvif.org/ver10/schema":IPType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__IPType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__IPType
{
	ns3__IPType__IPv4,	///< xs:string value="IPv4"
	ns3__IPType__IPv6,	///< xs:string value="IPv6"
};

/// "http://www.onvif.org/ver10/schema":DNSName is a simpleType restriction of xs:token.
typedef xsd__token ns3__DNSName;

/// "http://www.onvif.org/ver10/schema":Domain is a simpleType restriction of xs:token.
typedef xsd__token ns3__Domain;

/// "http://www.onvif.org/ver10/schema":IPAddressFilterType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__IPAddressFilterType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__IPAddressFilterType
{
	ns3__IPAddressFilterType__Allow,	///< xs:string value="Allow"
	ns3__IPAddressFilterType__Deny,	///< xs:string value="Deny"
};

/// "http://www.onvif.org/ver10/schema":DynamicDNSType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__DynamicDNSType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__DynamicDNSType
{
	ns3__DynamicDNSType__NoUpdate,	///< xs:string value="NoUpdate"
	ns3__DynamicDNSType__ClientUpdates,	///< xs:string value="ClientUpdates"
	ns3__DynamicDNSType__ServerUpdates,	///< xs:string value="ServerUpdates"
};

/// "http://www.onvif.org/ver10/schema":Dot11SSIDType is a simpleType restriction of xs:hexBinary.
/// Length of this string is within 1..32 characters
typedef struct xsd__hexBinary ns3__Dot11SSIDType 1:32;

/// "http://www.onvif.org/ver10/schema":Dot11StationMode is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__Dot11StationMode' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__Dot11StationMode
{
	ns3__Dot11StationMode__Ad_hoc,	///< xs:string value="Ad-hoc"
	ns3__Dot11StationMode__Infrastructure,	///< xs:string value="Infrastructure"
	ns3__Dot11StationMode__Extended,	///< xs:string value="Extended"
};

/// "http://www.onvif.org/ver10/schema":Dot11SecurityMode is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__Dot11SecurityMode' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__Dot11SecurityMode
{
	ns3__Dot11SecurityMode__None,	///< xs:string value="None"
	ns3__Dot11SecurityMode__WEP,	///< xs:string value="WEP"
	ns3__Dot11SecurityMode__PSK,	///< xs:string value="PSK"
	ns3__Dot11SecurityMode__Dot1X,	///< xs:string value="Dot1X"
	ns3__Dot11SecurityMode__Extended,	///< xs:string value="Extended"
};

/// "http://www.onvif.org/ver10/schema":Dot11Cipher is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__Dot11Cipher' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__Dot11Cipher
{
	ns3__Dot11Cipher__CCMP,	///< xs:string value="CCMP"
	ns3__Dot11Cipher__TKIP,	///< xs:string value="TKIP"
	ns3__Dot11Cipher__Any,	///< xs:string value="Any"
	ns3__Dot11Cipher__Extended,	///< xs:string value="Extended"
};

/// "http://www.onvif.org/ver10/schema":Dot11PSK is a simpleType restriction of xs:hexBinary.
/// Length of this string is exactly 32 characters
typedef struct xsd__hexBinary ns3__Dot11PSK;

/// "http://www.onvif.org/ver10/schema":Dot11PSKPassphrase is a simpleType restriction of xs:string.
/// Content pattern is "[ -~]{8,63}" (note: not automatically enforced)
typedef char* ns3__Dot11PSKPassphrase "[ -~]{8,63}";

/// "http://www.onvif.org/ver10/schema":Dot11SignalStrength is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__Dot11SignalStrength' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__Dot11SignalStrength
{
	ns3__Dot11SignalStrength__None,	///< xs:string value="None"
	ns3__Dot11SignalStrength__Very_x0020Bad,	///< xs:string value="Very Bad"
	ns3__Dot11SignalStrength__Bad,	///< xs:string value="Bad"
	ns3__Dot11SignalStrength__Good,	///< xs:string value="Good"
	ns3__Dot11SignalStrength__Very_x0020Good,	///< xs:string value="Very Good"
	ns3__Dot11SignalStrength__Extended,	///< xs:string value="Extended"
};

/// "http://www.onvif.org/ver10/schema":Dot11AuthAndMangementSuite is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__Dot11AuthAndMangementSuite' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__Dot11AuthAndMangementSuite
{
	ns3__Dot11AuthAndMangementSuite__None,	///< xs:string value="None"
	ns3__Dot11AuthAndMangementSuite__Dot1X,	///< xs:string value="Dot1X"
	ns3__Dot11AuthAndMangementSuite__PSK,	///< xs:string value="PSK"
	ns3__Dot11AuthAndMangementSuite__Extended,	///< xs:string value="Extended"
};

/// "http://www.onvif.org/ver10/schema":CapabilityCategory is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__CapabilityCategory' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__CapabilityCategory
{
	ns3__CapabilityCategory__All,	///< xs:string value="All"
	ns3__CapabilityCategory__Analytics,	///< xs:string value="Analytics"
	ns3__CapabilityCategory__Device,	///< xs:string value="Device"
	ns3__CapabilityCategory__Events,	///< xs:string value="Events"
	ns3__CapabilityCategory__Imaging,	///< xs:string value="Imaging"
	ns3__CapabilityCategory__Media,	///< xs:string value="Media"
	ns3__CapabilityCategory__PTZ,	///< xs:string value="PTZ"
};

/// "http://www.onvif.org/ver10/schema":SystemLogType is a simpleType restriction of xs:string.
/// @brief Enumeration describing the available system log modes.
/// Note: enum values are prefixed with 'ns3__SystemLogType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__SystemLogType
{
/// @brief Indicates that a system log is requested.
	ns3__SystemLogType__System,	///< xs:string value="System"
/// @brief Indicates that a access log is requested.
	ns3__SystemLogType__Access,	///< xs:string value="Access"
};

/// "http://www.onvif.org/ver10/schema":FactoryDefaultType is a simpleType restriction of xs:string.
/// @brief Enumeration describing the available factory default modes.
/// Note: enum values are prefixed with 'ns3__FactoryDefaultType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__FactoryDefaultType
{
/// @brief Indicates that a hard factory default is requested.
	ns3__FactoryDefaultType__Hard,	///< xs:string value="Hard"
/// @brief Indicates that a soft factory default is requested.
	ns3__FactoryDefaultType__Soft,	///< xs:string value="Soft"
};

/// "http://www.onvif.org/ver10/schema":SetDateTimeType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__SetDateTimeType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__SetDateTimeType
{
/// @brief Indicates that the date and time are set manually.
	ns3__SetDateTimeType__Manual,	///< xs:string value="Manual"
/// @brief Indicates that the date and time are set through NTP
	ns3__SetDateTimeType__NTP,	///< xs:string value="NTP"
};

/// "http://www.onvif.org/ver10/schema":UserLevel is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__UserLevel' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__UserLevel
{
	ns3__UserLevel__Administrator,	///< xs:string value="Administrator"
	ns3__UserLevel__Operator,	///< xs:string value="Operator"
	ns3__UserLevel__User,	///< xs:string value="User"
	ns3__UserLevel__Anonymous,	///< xs:string value="Anonymous"
	ns3__UserLevel__Extended,	///< xs:string value="Extended"
};

/// "http://www.onvif.org/ver10/schema":RelayLogicalState is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__RelayLogicalState' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__RelayLogicalState
{
	ns3__RelayLogicalState__active,	///< xs:string value="active"
	ns3__RelayLogicalState__inactive,	///< xs:string value="inactive"
};

/// "http://www.onvif.org/ver10/schema":RelayIdleState is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__RelayIdleState' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__RelayIdleState
{
	ns3__RelayIdleState__closed,	///< xs:string value="closed"
	ns3__RelayIdleState__open,	///< xs:string value="open"
};

/// "http://www.onvif.org/ver10/schema":RelayMode is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__RelayMode' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__RelayMode
{
	ns3__RelayMode__Monostable,	///< xs:string value="Monostable"
	ns3__RelayMode__Bistable,	///< xs:string value="Bistable"
};

/// "http://www.onvif.org/ver10/schema":AuxiliaryData is a simpleType restriction of xs:string.
/// Length of this string is within 0..128 characters
typedef char* ns3__AuxiliaryData:128;

/// "http://www.onvif.org/ver10/schema":MoveStatus is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__MoveStatus' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__MoveStatus
{
	ns3__MoveStatus__IDLE,	///< xs:string value="IDLE"
	ns3__MoveStatus__MOVING,	///< xs:string value="MOVING"
	ns3__MoveStatus__UNKNOWN,	///< xs:string value="UNKNOWN"
};

/// "http://www.onvif.org/ver10/schema":AutoFocusMode is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__AutoFocusMode' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__AutoFocusMode
{
	ns3__AutoFocusMode__AUTO,	///< xs:string value="AUTO"
	ns3__AutoFocusMode__MANUAL,	///< xs:string value="MANUAL"
};

/// "http://www.onvif.org/ver10/schema":WideDynamicMode is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__WideDynamicMode' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__WideDynamicMode
{
	ns3__WideDynamicMode__OFF,	///< xs:string value="OFF"
	ns3__WideDynamicMode__ON,	///< xs:string value="ON"
};

/// "http://www.onvif.org/ver10/schema":BacklightCompensationMode is a simpleType restriction of xs:string.
/// @brief Enumeration describing the available backlight compenstation modes.
/// Note: enum values are prefixed with 'ns3__BacklightCompensationMode' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__BacklightCompensationMode
{
/// @brief Backlight compensation is disabled.
	ns3__BacklightCompensationMode__OFF,	///< xs:string value="OFF"
/// @brief Backlight compensation is enabled.
	ns3__BacklightCompensationMode__ON,	///< xs:string value="ON"
};

/// "http://www.onvif.org/ver10/schema":ExposurePriority is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__ExposurePriority' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__ExposurePriority
{
	ns3__ExposurePriority__LowNoise,	///< xs:string value="LowNoise"
	ns3__ExposurePriority__FrameRate,	///< xs:string value="FrameRate"
};

/// "http://www.onvif.org/ver10/schema":ExposureMode is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__ExposureMode' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__ExposureMode
{
	ns3__ExposureMode__AUTO,	///< xs:string value="AUTO"
	ns3__ExposureMode__MANUAL,	///< xs:string value="MANUAL"
};

/// "http://www.onvif.org/ver10/schema":Enabled is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__Enabled' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__Enabled
{
	ns3__Enabled__ENABLED,	///< xs:string value="ENABLED"
	ns3__Enabled__DISABLED,	///< xs:string value="DISABLED"
};

/// "http://www.onvif.org/ver10/schema":WhiteBalanceMode is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__WhiteBalanceMode' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__WhiteBalanceMode
{
	ns3__WhiteBalanceMode__AUTO,	///< xs:string value="AUTO"
	ns3__WhiteBalanceMode__MANUAL,	///< xs:string value="MANUAL"
};

/// "http://www.onvif.org/ver10/schema":IrCutFilterMode is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__IrCutFilterMode' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__IrCutFilterMode
{
	ns3__IrCutFilterMode__ON,	///< xs:string value="ON"
	ns3__IrCutFilterMode__OFF,	///< xs:string value="OFF"
	ns3__IrCutFilterMode__AUTO,	///< xs:string value="AUTO"
};

/// "http://www.onvif.org/ver10/schema":TopicNamespaceLocation is a simpleType restriction of xs:anyURI.
typedef xsd__anyURI ns3__TopicNamespaceLocation;

/// "http://www.onvif.org/ver10/schema":PropertyOperation is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__PropertyOperation' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__PropertyOperation
{
	ns3__PropertyOperation__Initialized,	///< xs:string value="Initialized"
	ns3__PropertyOperation__Deleted,	///< xs:string value="Deleted"
	ns3__PropertyOperation__Changed,	///< xs:string value="Changed"
};

/// "http://www.onvif.org/ver10/schema":Direction is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__Direction' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__Direction
{
	ns3__Direction__Left,	///< xs:string value="Left"
	ns3__Direction__Right,	///< xs:string value="Right"
	ns3__Direction__Any,	///< xs:string value="Any"
};

/// "http://www.onvif.org/ver10/schema":ClassType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__ClassType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__ClassType
{
	ns3__ClassType__Animal,	///< xs:string value="Animal"
	ns3__ClassType__Face,	///< xs:string value="Face"
	ns3__ClassType__Human,	///< xs:string value="Human"
	ns3__ClassType__Vehical,	///< xs:string value="Vehical"
	ns3__ClassType__Other,	///< xs:string value="Other"
};

/// "http://www.onvif.org/ver10/schema":ReceiverMode is a simpleType restriction of xs:string.
/// @brief Specifies a receiver connection mode.
/// Note: enum values are prefixed with 'ns3__ReceiverMode' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__ReceiverMode
{
/// @brief The receiver connects on demand, as required by consumers of the media streams.
	ns3__ReceiverMode__AutoConnect,	///< xs:string value="AutoConnect"
/// @brief The receiver attempts to maintain a persistent connection to the configured endpoint.
	ns3__ReceiverMode__AlwaysConnect,	///< xs:string value="AlwaysConnect"
/// @brief The receiver does not attempt to connect.
	ns3__ReceiverMode__NeverConnect,	///< xs:string value="NeverConnect"
/// @brief This case should never happen.
	ns3__ReceiverMode__Unknown,	///< xs:string value="Unknown"
};

/// "http://www.onvif.org/ver10/schema":ReceiverState is a simpleType restriction of xs:string.
/// @brief Specifies the current connection state of the receiver.
/// Note: enum values are prefixed with 'ns3__ReceiverState' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__ReceiverState
{
/// @brief The receiver is not connected.
	ns3__ReceiverState__NotConnected,	///< xs:string value="NotConnected"
/// @brief The receiver is attempting to connect.
	ns3__ReceiverState__Connecting,	///< xs:string value="Connecting"
/// @brief The receiver is connected.
	ns3__ReceiverState__Connected,	///< xs:string value="Connected"
/// @brief This case should never happen.
	ns3__ReceiverState__Unknown,	///< xs:string value="Unknown"
};

/// "http://www.onvif.org/ver10/schema":Description is a simpleType restriction of xs:string.
typedef char* ns3__Description;

/// "http://www.onvif.org/ver10/schema":XPathExpression is a simpleType restriction of xs:string.
typedef char* ns3__XPathExpression;

/// "http://www.onvif.org/ver10/schema":SearchState is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__SearchState' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__SearchState
{
/// @brief The search is queued and not yet started.
	ns3__SearchState__Queued,	///< xs:string value="Queued"
/// @brief The search is underway and not yet completed.
	ns3__SearchState__Searching,	///< xs:string value="Searching"
/// @brief The search has been completed and no new results will be found.
	ns3__SearchState__Completed,	///< xs:string value="Completed"
/// @brief The state of the search is unknown. (This is not a valid response from GetSearchState.)
	ns3__SearchState__Unknown,	///< xs:string value="Unknown"
};

/// "http://www.onvif.org/ver10/schema":RecordingStatus is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__RecordingStatus' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__RecordingStatus
{
	ns3__RecordingStatus__Initiated,	///< xs:string value="Initiated"
	ns3__RecordingStatus__Recording,	///< xs:string value="Recording"
	ns3__RecordingStatus__Stopped,	///< xs:string value="Stopped"
	ns3__RecordingStatus__Removing,	///< xs:string value="Removing"
	ns3__RecordingStatus__Removed,	///< xs:string value="Removed"
/// @brief This case should never happen.
	ns3__RecordingStatus__Unknown,	///< xs:string value="Unknown"
};

/// "http://www.onvif.org/ver10/schema":TrackType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__TrackType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__TrackType
{
	ns3__TrackType__Video,	///< xs:string value="Video"
	ns3__TrackType__Audio,	///< xs:string value="Audio"
	ns3__TrackType__Metadata,	///< xs:string value="Metadata"
/// @brief Placeholder for future extension.
	ns3__TrackType__Extended,	///< xs:string value="Extended"
};

/// "http://www.onvif.org/ver10/schema":RecordingJobMode is a simpleType restriction of xs:string.
typedef char* ns3__RecordingJobMode;

/// "http://www.onvif.org/ver10/schema":RecordingJobState is a simpleType restriction of xs:string.
typedef char* ns3__RecordingJobState;

/// "http://www.onvif.org/ver10/schema":ModeOfOperation is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__ModeOfOperation' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__ModeOfOperation
{
	ns3__ModeOfOperation__Idle,	///< xs:string value="Idle"
	ns3__ModeOfOperation__Active,	///< xs:string value="Active"
/// @brief This case should never happen.
	ns3__ModeOfOperation__Unknown,	///< xs:string value="Unknown"
};

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsn/b-2                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.w3.org/2004/08/xop/include                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsrf/bf-2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsn/t-1                                       *
 *                                                                            *
\******************************************************************************/


/// "http://docs.oasis-open.org/wsn/t-1":FullTopicExpression is a simpleType restriction of xs:token.
/// @brief TopicPathExpression ::= TopicPath ( '|' TopicPath )* TopicPath ::= RootTopic ChildTopicExpression* RootTopic ::= NamespacePrefix? ('//')? (NCName | '*') NamespacePrefix ::= NCName ':' ChildTopicExpression ::= '/' '/'? (QName | NCName | '*'| '.')
/// Content pattern is "([\\i-[:]][\\c-[:]]*:)?(//)?([\\i-[:]][\\c-[:]]*|\\*)((/|//)(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*|\\*|[.]))*(\\|([\\i-[:]][\\c-[:]]*:)?(//)?([\\i-[:]][\\c-[:]]*|\\*)((/|//)(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*|\\*|[.]))*)*" (note: not automatically enforced)
typedef xsd__token ns7__FullTopicExpression "([\\i-[:]][\\c-[:]]*:)?(//)?([\\i-[:]][\\c-[:]]*|\\*)((/|//)(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*|\\*|[.]))*(\\|([\\i-[:]][\\c-[:]]*:)?(//)?([\\i-[:]][\\c-[:]]*|\\*)((/|//)(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*|\\*|[.]))*)*";

/// "http://docs.oasis-open.org/wsn/t-1":ConcreteTopicExpression is a simpleType restriction of xs:token.
/// @brief The pattern allows strings matching the following EBNF: ConcreteTopicPath ::= RootTopic ChildTopic* RootTopic ::= QName ChildTopic ::= '/' (QName | NCName)
/// Content pattern is "(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*)(/([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*)*" (note: not automatically enforced)
typedef xsd__token ns7__ConcreteTopicExpression "(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*)(/([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*)*";

/// "http://docs.oasis-open.org/wsn/t-1":SimpleTopicExpression is a simpleType restriction of xs:QName.
/// @brief The pattern allows strings matching the following EBNF: RootTopic ::= QName
typedef _QName ns7__SimpleTopicExpression;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver10/device/wsdl                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver10/events/wsdl                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsrf/rw-2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsrf/r-2                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver20/imaging/wsdl                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver20/ptz/wsdl                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.w3.org/2005/08/addressing                                     *
 *                                                                            *
\******************************************************************************/


/// "http://www.w3.org/2005/08/addressing":RelationshipType is a simpleType restriction of xs:anyURI.
/// Note: enum values are prefixed with 'ns14__RelationshipType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns14__RelationshipType
{
	ns14__RelationshipType__http_x003a_x002f_x002fwww_x002ew3_x002eorg_x002f2005_x002f08_x002faddressing_x002freply,	///< xs:anyURI value="http://www.w3.org/2005/08/addressing/reply"
};

/// "http://www.w3.org/2005/08/addressing":FaultCodesType is a simpleType restriction of xs:QName.
/// Note: enum values are prefixed with 'ns14__FaultCodesType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns14__FaultCodesType
{
	ns14__FaultCodesType__ns14__InvalidAddressingHeader,	///< xs:QName value=""http://www.w3.org/2005/08/addressing":InvalidAddressingHeader"
	ns14__FaultCodesType__ns14__InvalidAddress,	///< xs:QName value=""http://www.w3.org/2005/08/addressing":InvalidAddress"
	ns14__FaultCodesType__ns14__InvalidEPR,	///< xs:QName value=""http://www.w3.org/2005/08/addressing":InvalidEPR"
	ns14__FaultCodesType__ns14__InvalidCardinality,	///< xs:QName value=""http://www.w3.org/2005/08/addressing":InvalidCardinality"
	ns14__FaultCodesType__ns14__MissingAddressInEPR,	///< xs:QName value=""http://www.w3.org/2005/08/addressing":MissingAddressInEPR"
	ns14__FaultCodesType__ns14__DuplicateMessageID,	///< xs:QName value=""http://www.w3.org/2005/08/addressing":DuplicateMessageID"
	ns14__FaultCodesType__ns14__ActionMismatch,	///< xs:QName value=""http://www.w3.org/2005/08/addressing":ActionMismatch"
	ns14__FaultCodesType__ns14__MessageAddressingHeaderRequired,	///< xs:QName value=""http://www.w3.org/2005/08/addressing":MessageAddressingHeaderRequired"
	ns14__FaultCodesType__ns14__DestinationUnreachable,	///< xs:QName value=""http://www.w3.org/2005/08/addressing":DestinationUnreachable"
	ns14__FaultCodesType__ns14__ActionNotSupported,	///< xs:QName value=""http://www.w3.org/2005/08/addressing":ActionNotSupported"
	ns14__FaultCodesType__ns14__EndpointUnavailable,	///< xs:QName value=""http://www.w3.org/2005/08/addressing":EndpointUnavailable"
};

/// "http://www.onvif.org/ver10/schema":ReceiverReference is a simpleType restriction of "http://www.onvif.org/ver10/schema":ReferenceToken.
typedef ns3__ReferenceToken ns3__ReceiverReference;

/// "http://www.onvif.org/ver10/schema":RecordingReference is a simpleType restriction of "http://www.onvif.org/ver10/schema":ReferenceToken.
typedef ns3__ReferenceToken ns3__RecordingReference;

/// "http://www.onvif.org/ver10/schema":TrackReference is a simpleType restriction of "http://www.onvif.org/ver10/schema":ReferenceToken.
typedef ns3__ReferenceToken ns3__TrackReference;

/// "http://www.onvif.org/ver10/schema":JobToken is a simpleType restriction of "http://www.onvif.org/ver10/schema":ReferenceToken.
typedef ns3__ReferenceToken ns3__JobToken;

/// "http://www.onvif.org/ver10/schema":RecordingJobReference is a simpleType restriction of "http://www.onvif.org/ver10/schema":ReferenceToken.
typedef ns3__ReferenceToken ns3__RecordingJobReference;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsn/b-2                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.w3.org/2004/08/xop/include                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsrf/bf-2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsn/t-1                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver10/device/wsdl                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver10/events/wsdl                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsrf/rw-2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsrf/r-2                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver20/imaging/wsdl                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver20/ptz/wsdl                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.w3.org/2005/08/addressing                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.onvif.org/ver10/deviceIO/wsdl                                 *
 *                                                                            *
\******************************************************************************/


/// "http://www.onvif.org/ver10/deviceIO/wsdl":Capabilities is a complexType.
struct ns1__Capabilities
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// @brief Number of video sources (defaults to none).
/// Attribute VideoSources of type xs:int.
   @int                                  VideoSources                   0 = 0;	///< Default value="0".
/// @brief Number of video outputs (defaults to none).
/// Attribute VideoOutputs of type xs:int.
   @int                                  VideoOutputs                   0 = 0;	///< Default value="0".
/// @brief Number of audio sources (defaults to none).
/// Attribute AudioSources of type xs:int.
   @int                                  AudioSources                   0 = 0;	///< Default value="0".
/// @brief Number of audio outputs (defaults to none).
/// Attribute AudioOutputs of type xs:int.
   @int                                  AudioOutputs                   0 = 0;	///< Default value="0".
/// @brief Number of relay outputs (defaults to none).
/// Attribute RelayOutputs of type xs:int.
   @int                                  RelayOutputs                   0 = 0;	///< Default value="0".
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":GetServiceCapabilities

/// "http://www.onvif.org/ver10/deviceIO/wsdl":GetServiceCapabilities is a complexType.
struct _ns1__GetServiceCapabilities
{
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":GetServiceCapabilitiesResponse

/// "http://www.onvif.org/ver10/deviceIO/wsdl":GetServiceCapabilitiesResponse is a complexType.
struct _ns1__GetServiceCapabilitiesResponse
{
/// @brief The capabilities for the device IO service is returned in the Capabilities element.
/// Element Capabilities of type "http://www.onvif.org/ver10/deviceIO/wsdl":Capabilities.
    struct ns1__Capabilities*            Capabilities                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":GetVideoOutputs

/// "http://www.onvif.org/ver10/deviceIO/wsdl":GetVideoOutputs is a complexType.
struct _ns1__GetVideoOutputs
{
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":GetVideoOutputsResponse

/// "http://www.onvif.org/ver10/deviceIO/wsdl":GetVideoOutputsResponse is a complexType.
struct _ns1__GetVideoOutputsResponse
{
/// @brief List containing all physical Video output connections of a device.
/// Size of array of struct ns3__VideoOutput* is 0..unbounded
   $int                                  __sizeVideoOutputs             0;
/// Array struct ns3__VideoOutput* of length 0..unbounded
    struct ns3__VideoOutput*             VideoOutputs                   0;
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":GetAudioSourceConfiguration

/// "http://www.onvif.org/ver10/deviceIO/wsdl":GetAudioSourceConfiguration is a complexType.
struct _ns1__GetAudioSourceConfiguration
{
/// @brief Token of the requested AudioSource.
/// Element AudioSourceToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  AudioSourceToken               1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":GetAudioSourceConfigurationResponse

/// "http://www.onvif.org/ver10/deviceIO/wsdl":GetAudioSourceConfigurationResponse is a complexType.
struct _ns1__GetAudioSourceConfigurationResponse
{
/// @brief Current configuration of the Audio input.
/// Element AudioSourceConfiguration of type "http://www.onvif.org/ver10/schema":AudioSourceConfiguration.
    struct ns3__AudioSourceConfiguration*  AudioSourceConfiguration       1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":GetAudioOutputConfiguration

/// "http://www.onvif.org/ver10/deviceIO/wsdl":GetAudioOutputConfiguration is a complexType.
struct _ns1__GetAudioOutputConfiguration
{
/// @brief Token of the physical Audio output.
/// Element AudioOutputToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  AudioOutputToken               1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":GetAudioOutputConfigurationResponse

/// "http://www.onvif.org/ver10/deviceIO/wsdl":GetAudioOutputConfigurationResponse is a complexType.
struct _ns1__GetAudioOutputConfigurationResponse
{
/// @brief Current configuration of the Audio output.
/// Element AudioOutputConfiguration of type "http://www.onvif.org/ver10/schema":AudioOutputConfiguration.
    struct ns3__AudioOutputConfiguration*  AudioOutputConfiguration       1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":GetVideoSourceConfiguration

/// "http://www.onvif.org/ver10/deviceIO/wsdl":GetVideoSourceConfiguration is a complexType.
struct _ns1__GetVideoSourceConfiguration
{
/// @brief Token of the requested VideoSource.
/// Element VideoSourceToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  VideoSourceToken               1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":GetVideoSourceConfigurationResponse

/// "http://www.onvif.org/ver10/deviceIO/wsdl":GetVideoSourceConfigurationResponse is a complexType.
struct _ns1__GetVideoSourceConfigurationResponse
{
/// @brief Current configuration of the Video input.
/// Element VideoSourceConfiguration of type "http://www.onvif.org/ver10/schema":VideoSourceConfiguration.
    struct ns3__VideoSourceConfiguration*  VideoSourceConfiguration       1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":GetVideoOutputConfiguration

/// "http://www.onvif.org/ver10/deviceIO/wsdl":GetVideoOutputConfiguration is a complexType.
struct _ns1__GetVideoOutputConfiguration
{
/// @brief Token of the requested VideoOutput.
/// Element VideoOutputToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  VideoOutputToken               1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":GetVideoOutputConfigurationResponse

/// "http://www.onvif.org/ver10/deviceIO/wsdl":GetVideoOutputConfigurationResponse is a complexType.
struct _ns1__GetVideoOutputConfigurationResponse
{
/// @brief Current configuration of the Video output.
/// Element VideoOutputConfiguration of type "http://www.onvif.org/ver10/schema":VideoOutputConfiguration.
    struct ns3__VideoOutputConfiguration*  VideoOutputConfiguration       1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":SetAudioSourceConfiguration

/// "http://www.onvif.org/ver10/deviceIO/wsdl":SetAudioSourceConfiguration is a complexType.
struct _ns1__SetAudioSourceConfiguration
{
/// Element Configuration of type "http://www.onvif.org/ver10/schema":AudioSourceConfiguration.
    struct ns3__AudioSourceConfiguration*  Configuration                  1;	///< Required element.
/// @brief The ForcePersistence element determines how configuration changes shall be stored. If true, changes shall be persistent. If false, changes MAY revert to previous values after reboot.
/// Element ForcePersistence of type xs:boolean.
    enum xsd__boolean                    ForcePersistence               1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":SetAudioSourceConfigurationResponse

/// "http://www.onvif.org/ver10/deviceIO/wsdl":SetAudioSourceConfigurationResponse is a complexType.
struct _ns1__SetAudioSourceConfigurationResponse
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":SetAudioOutputConfiguration

/// "http://www.onvif.org/ver10/deviceIO/wsdl":SetAudioOutputConfiguration is a complexType.
struct _ns1__SetAudioOutputConfiguration
{
/// Element Configuration of type "http://www.onvif.org/ver10/schema":AudioOutputConfiguration.
    struct ns3__AudioOutputConfiguration*  Configuration                  1;	///< Required element.
/// @brief The ForcePersistence element determines how configuration changes shall be stored. If true, changes shall be persistent. If false, changes MAY revert to previous values after reboot.
/// Element ForcePersistence of type xs:boolean.
    enum xsd__boolean                    ForcePersistence               1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":SetAudioOutputConfigurationResponse

/// "http://www.onvif.org/ver10/deviceIO/wsdl":SetAudioOutputConfigurationResponse is a complexType.
struct _ns1__SetAudioOutputConfigurationResponse
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":SetVideoSourceConfiguration

/// "http://www.onvif.org/ver10/deviceIO/wsdl":SetVideoSourceConfiguration is a complexType.
struct _ns1__SetVideoSourceConfiguration
{
/// Element Configuration of type "http://www.onvif.org/ver10/schema":VideoSourceConfiguration.
    struct ns3__VideoSourceConfiguration*  Configuration                  1;	///< Required element.
/// @brief The ForcePersistence element determines how configuration changes shall be stored. If true, changes shall be persistent. If false, changes MAY revert to previous values after reboot.
/// Element ForcePersistence of type xs:boolean.
    enum xsd__boolean                    ForcePersistence               1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":SetVideoSourceConfigurationResponse

/// "http://www.onvif.org/ver10/deviceIO/wsdl":SetVideoSourceConfigurationResponse is a complexType.
struct _ns1__SetVideoSourceConfigurationResponse
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":SetVideoOutputConfiguration

/// "http://www.onvif.org/ver10/deviceIO/wsdl":SetVideoOutputConfiguration is a complexType.
struct _ns1__SetVideoOutputConfiguration
{
/// Element Configuration of type "http://www.onvif.org/ver10/schema":VideoOutputConfiguration.
    struct ns3__VideoOutputConfiguration*  Configuration                  1;	///< Required element.
/// @brief The ForcePersistence element determines how configuration changes shall be stored. If true, changes shall be persistent. If false, changes MAY revert to previous values after reboot.
/// Element ForcePersistence of type xs:boolean.
    enum xsd__boolean                    ForcePersistence               1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":SetVideoOutputConfigurationResponse

/// "http://www.onvif.org/ver10/deviceIO/wsdl":SetVideoOutputConfigurationResponse is a complexType.
struct _ns1__SetVideoOutputConfigurationResponse
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":GetVideoSourceConfigurationOptions

/// "http://www.onvif.org/ver10/deviceIO/wsdl":GetVideoSourceConfigurationOptions is a complexType.
struct _ns1__GetVideoSourceConfigurationOptions
{
/// @brief Token of the Video input whose options are requested..
/// Element VideoSourceToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  VideoSourceToken               1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":GetVideoSourceConfigurationOptionsResponse

/// "http://www.onvif.org/ver10/deviceIO/wsdl":GetVideoSourceConfigurationOptionsResponse is a complexType.
struct _ns1__GetVideoSourceConfigurationOptionsResponse
{
/// Element VideoSourceConfigurationOptions of type "http://www.onvif.org/ver10/schema":VideoSourceConfigurationOptions.
    struct ns3__VideoSourceConfigurationOptions*  VideoSourceConfigurationOptions 1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":GetVideoOutputConfigurationOptions

/// "http://www.onvif.org/ver10/deviceIO/wsdl":GetVideoOutputConfigurationOptions is a complexType.
struct _ns1__GetVideoOutputConfigurationOptions
{
/// @brief Token of the Video Output whose options are requested..
/// Element VideoOutputToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  VideoOutputToken               1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":GetVideoOutputConfigurationOptionsResponse

/// "http://www.onvif.org/ver10/deviceIO/wsdl":GetVideoOutputConfigurationOptionsResponse is a complexType.
struct _ns1__GetVideoOutputConfigurationOptionsResponse
{
/// Element VideoOutputConfigurationOptions of type "http://www.onvif.org/ver10/schema":VideoOutputConfigurationOptions.
    struct ns3__VideoOutputConfigurationOptions*  VideoOutputConfigurationOptions 1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":GetAudioSourceConfigurationOptions

/// "http://www.onvif.org/ver10/deviceIO/wsdl":GetAudioSourceConfigurationOptions is a complexType.
struct _ns1__GetAudioSourceConfigurationOptions
{
/// @brief Token of the physical Audio input whose options are requested..
/// Element AudioSourceToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  AudioSourceToken               1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":GetAudioSourceConfigurationOptionsResponse

/// "http://www.onvif.org/ver10/deviceIO/wsdl":GetAudioSourceConfigurationOptionsResponse is a complexType.
struct _ns1__GetAudioSourceConfigurationOptionsResponse
{
/// @brief Returns the AudioSourceToken available.
/// Element AudioSourceOptions of type "http://www.onvif.org/ver10/schema":AudioSourceConfigurationOptions.
    struct ns3__AudioSourceConfigurationOptions*  AudioSourceOptions             1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":GetAudioOutputConfigurationOptions

/// "http://www.onvif.org/ver10/deviceIO/wsdl":GetAudioOutputConfigurationOptions is a complexType.
struct _ns1__GetAudioOutputConfigurationOptions
{
/// @brief Token of the physical Audio Output whose options are requested..
/// Element AudioOutputToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  AudioOutputToken               1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":GetAudioOutputConfigurationOptionsResponse

/// "http://www.onvif.org/ver10/deviceIO/wsdl":GetAudioOutputConfigurationOptionsResponse is a complexType.
struct _ns1__GetAudioOutputConfigurationOptionsResponse
{
/// @brief Available settings and ranges for the requested Audio output.
/// Element AudioOutputOptions of type "http://www.onvif.org/ver10/schema":AudioOutputConfigurationOptions.
    struct ns3__AudioOutputConfigurationOptions*  AudioOutputOptions             1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":SetRelayOutputSettings

/// "http://www.onvif.org/ver10/deviceIO/wsdl":SetRelayOutputSettings is a complexType.
struct _ns1__SetRelayOutputSettings
{
/// Element RelayOutput of type "http://www.onvif.org/ver10/schema":RelayOutput.
    struct ns3__RelayOutput*             RelayOutput                    1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":SetRelayOutputSettingsResponse

/// "http://www.onvif.org/ver10/deviceIO/wsdl":SetRelayOutputSettingsResponse is a complexType.
struct _ns1__SetRelayOutputSettingsResponse
{
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.onvif.org/ver10/media/wsdl                                    *
 *                                                                            *
\******************************************************************************/


/// "http://www.onvif.org/ver10/media/wsdl":Capabilities is a complexType.
struct ns2__Capabilities
{
/// @brief Media profile capabilities.
/// Element ProfileCapabilities of type "http://www.onvif.org/ver10/media/wsdl":ProfileCapabilities.
    struct ns2__ProfileCapabilities*     ProfileCapabilities            1;	///< Required element.
/// @brief Streaming capabilities.
/// Element StreamingCapabilities of type "http://www.onvif.org/ver10/media/wsdl":StreamingCapabilities.
    struct ns2__StreamingCapabilities*   StreamingCapabilities          1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/media/wsdl":ProfileCapabilities is a complexType.
struct ns2__ProfileCapabilities
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// @brief Maximum number of profiles supported.
/// Attribute MaximumNumberOfProfiles of type xs:int.
   @int*                                 MaximumNumberOfProfiles        0;	///< Optional attribute.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/media/wsdl":StreamingCapabilities is a complexType.
struct ns2__StreamingCapabilities
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// @brief Indicates support for RTP multicast.
/// Attribute RTPMulticast of type xs:boolean.
   @enum xsd__boolean*                   RTPMulticast                   0;	///< Optional attribute.
/// @brief Indicates support for RTP over TCP.
/// Attribute RTP_TCP of type xs:boolean.
   @enum xsd__boolean*                   RTP_USCORETCP                  0;	///< Optional attribute.
/// @brief Indicates support for RTP/RTSP/TCP.
/// Attribute RTP_RTSP_TCP of type xs:boolean.
   @enum xsd__boolean*                   RTP_USCORERTSP_USCORETCP       0;	///< Optional attribute.
/// @brief Indicates support for non aggregate RTSP control.
/// Attribute NonAggregateControl of type xs:boolean.
   @enum xsd__boolean*                   NonAggregateControl            0;	///< Optional attribute.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetServiceCapabilities

/// "http://www.onvif.org/ver10/media/wsdl":GetServiceCapabilities is a complexType.
struct _ns2__GetServiceCapabilities
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetServiceCapabilitiesResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetServiceCapabilitiesResponse is a complexType.
struct _ns2__GetServiceCapabilitiesResponse
{
/// @brief The capabilities for the media service is returned in the Capabilities element.
/// Element Capabilities of type "http://www.onvif.org/ver10/media/wsdl":Capabilities.
    struct ns2__Capabilities*            Capabilities                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetVideoSources

/// "http://www.onvif.org/ver10/media/wsdl":GetVideoSources is a complexType.
struct _ns2__GetVideoSources
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetVideoSourcesResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetVideoSourcesResponse is a complexType.
struct _ns2__GetVideoSourcesResponse
{
/// @brief List of existing Video Sources
/// Size of array of struct ns3__VideoSource* is 0..unbounded
   $int                                  __sizeVideoSources             0;
/// Array struct ns3__VideoSource* of length 0..unbounded
    struct ns3__VideoSource*             VideoSources                   0;
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioSources

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioSources is a complexType.
struct _ns2__GetAudioSources
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioSourcesResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioSourcesResponse is a complexType.
struct _ns2__GetAudioSourcesResponse
{
/// @brief List of existing Audio Sources
/// Size of array of struct ns3__AudioSource* is 0..unbounded
   $int                                  __sizeAudioSources             0;
/// Array struct ns3__AudioSource* of length 0..unbounded
    struct ns3__AudioSource*             AudioSources                   0;
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioOutputs

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioOutputs is a complexType.
struct _ns2__GetAudioOutputs
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioOutputsResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioOutputsResponse is a complexType.
struct _ns2__GetAudioOutputsResponse
{
/// @brief List of existing Audio Outputs
/// Size of array of struct ns3__AudioOutput* is 0..unbounded
   $int                                  __sizeAudioOutputs             0;
/// Array struct ns3__AudioOutput* of length 0..unbounded
    struct ns3__AudioOutput*             AudioOutputs                   0;
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":CreateProfile

/// "http://www.onvif.org/ver10/media/wsdl":CreateProfile is a complexType.
struct _ns2__CreateProfile
{
/// @brief friendly name of the profile to be created
/// Element Name of type "http://www.onvif.org/ver10/schema":Name.
    ns3__Name                            Name                           1;	///< Required element.
/// @brief Optional token, specifying the unique identifier of the new profile
/// Element Token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  Token                          0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":CreateProfileResponse

/// "http://www.onvif.org/ver10/media/wsdl":CreateProfileResponse is a complexType.
struct _ns2__CreateProfileResponse
{
/// @brief returns the new created profile
/// Element Profile of type "http://www.onvif.org/ver10/schema":Profile.
    struct ns3__Profile*                 Profile                        1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetProfile

/// "http://www.onvif.org/ver10/media/wsdl":GetProfile is a complexType.
struct _ns2__GetProfile
{
/// @brief this command requests a specific profile
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetProfileResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetProfileResponse is a complexType.
struct _ns2__GetProfileResponse
{
/// @brief returns the requested media profile
/// Element Profile of type "http://www.onvif.org/ver10/schema":Profile.
    struct ns3__Profile*                 Profile                        1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetProfiles

/// "http://www.onvif.org/ver10/media/wsdl":GetProfiles is a complexType.
struct _ns2__GetProfiles
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetProfilesResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetProfilesResponse is a complexType.
struct _ns2__GetProfilesResponse
{
/// @brief lists all profiles that exist in the media service
/// Size of array of struct ns3__Profile* is 0..unbounded
   $int                                  __sizeProfiles                 0;
/// Array struct ns3__Profile* of length 0..unbounded
    struct ns3__Profile*                 Profiles                       0;
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":AddVideoEncoderConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":AddVideoEncoderConfiguration is a complexType.
struct _ns2__AddVideoEncoderConfiguration
{
/// @brief Reference to the profile where the configuration should be added
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
/// @brief Contains a reference to the VideoEncoderConfiguration to add
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":AddVideoEncoderConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":AddVideoEncoderConfigurationResponse is a complexType.
struct _ns2__AddVideoEncoderConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":RemoveVideoEncoderConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":RemoveVideoEncoderConfiguration is a complexType.
struct _ns2__RemoveVideoEncoderConfiguration
{
/// @brief Contains a reference to the media profile from which the VideoEncoderConfiguration shall be removed.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":RemoveVideoEncoderConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":RemoveVideoEncoderConfigurationResponse is a complexType.
struct _ns2__RemoveVideoEncoderConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":AddVideoSourceConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":AddVideoSourceConfiguration is a complexType.
struct _ns2__AddVideoSourceConfiguration
{
/// @brief Reference to the profile where the configuration should be added
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
/// @brief Contains a reference to the VideoSourceConfiguration to add
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":AddVideoSourceConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":AddVideoSourceConfigurationResponse is a complexType.
struct _ns2__AddVideoSourceConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":RemoveVideoSourceConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":RemoveVideoSourceConfiguration is a complexType.
struct _ns2__RemoveVideoSourceConfiguration
{
/// @brief Contains a reference to the media profile from which the VideoSourceConfiguration shall be removed.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":RemoveVideoSourceConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":RemoveVideoSourceConfigurationResponse is a complexType.
struct _ns2__RemoveVideoSourceConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":AddAudioEncoderConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":AddAudioEncoderConfiguration is a complexType.
struct _ns2__AddAudioEncoderConfiguration
{
/// @brief Reference to the profile where the configuration should be added
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
/// @brief Contains a reference to the AudioEncoderConfiguration to add
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":AddAudioEncoderConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":AddAudioEncoderConfigurationResponse is a complexType.
struct _ns2__AddAudioEncoderConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":RemoveAudioEncoderConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":RemoveAudioEncoderConfiguration is a complexType.
struct _ns2__RemoveAudioEncoderConfiguration
{
/// @brief Contains a reference to the media profile from which the AudioEncoderConfiguration shall be removed.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":RemoveAudioEncoderConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":RemoveAudioEncoderConfigurationResponse is a complexType.
struct _ns2__RemoveAudioEncoderConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":AddAudioSourceConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":AddAudioSourceConfiguration is a complexType.
struct _ns2__AddAudioSourceConfiguration
{
/// @brief Reference to the profile where the configuration should be added
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
/// @brief Contains a reference to the AudioSourceConfiguration to add
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":AddAudioSourceConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":AddAudioSourceConfigurationResponse is a complexType.
struct _ns2__AddAudioSourceConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":RemoveAudioSourceConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":RemoveAudioSourceConfiguration is a complexType.
struct _ns2__RemoveAudioSourceConfiguration
{
/// @brief Contains a reference to the media profile from which the AudioSourceConfiguration shall be removed.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":RemoveAudioSourceConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":RemoveAudioSourceConfigurationResponse is a complexType.
struct _ns2__RemoveAudioSourceConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":AddPTZConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":AddPTZConfiguration is a complexType.
struct _ns2__AddPTZConfiguration
{
/// @brief Reference to the profile where the configuration should be added
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
/// @brief Contains a reference to the PTZConfiguration to add
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":AddPTZConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":AddPTZConfigurationResponse is a complexType.
struct _ns2__AddPTZConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":RemovePTZConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":RemovePTZConfiguration is a complexType.
struct _ns2__RemovePTZConfiguration
{
/// @brief Contains a reference to the media profile from which the PTZConfiguration shall be removed.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":RemovePTZConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":RemovePTZConfigurationResponse is a complexType.
struct _ns2__RemovePTZConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":AddVideoAnalyticsConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":AddVideoAnalyticsConfiguration is a complexType.
struct _ns2__AddVideoAnalyticsConfiguration
{
/// @brief Reference to the profile where the configuration should be added
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
/// @brief Contains a reference to the VideoAnalyticsConfiguration to add
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":AddVideoAnalyticsConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":AddVideoAnalyticsConfigurationResponse is a complexType.
struct _ns2__AddVideoAnalyticsConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":RemoveVideoAnalyticsConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":RemoveVideoAnalyticsConfiguration is a complexType.
struct _ns2__RemoveVideoAnalyticsConfiguration
{
/// @brief Contains a reference to the media profile from which the VideoAnalyticsConfiguration shall be removed.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":RemoveVideoAnalyticsConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":RemoveVideoAnalyticsConfigurationResponse is a complexType.
struct _ns2__RemoveVideoAnalyticsConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":AddMetadataConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":AddMetadataConfiguration is a complexType.
struct _ns2__AddMetadataConfiguration
{
/// @brief Reference to the profile where the configuration should be added
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
/// @brief Contains a reference to the MetadataConfiguration to add
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":AddMetadataConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":AddMetadataConfigurationResponse is a complexType.
struct _ns2__AddMetadataConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":RemoveMetadataConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":RemoveMetadataConfiguration is a complexType.
struct _ns2__RemoveMetadataConfiguration
{
/// @brief Contains a reference to the media profile from which the MetadataConfiguration shall be removed.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":RemoveMetadataConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":RemoveMetadataConfigurationResponse is a complexType.
struct _ns2__RemoveMetadataConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":AddAudioOutputConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":AddAudioOutputConfiguration is a complexType.
struct _ns2__AddAudioOutputConfiguration
{
/// @brief Reference to the profile where the configuration should be added
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
/// @brief Contains a reference to the AudioOutputConfiguration to add
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":AddAudioOutputConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":AddAudioOutputConfigurationResponse is a complexType.
struct _ns2__AddAudioOutputConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":RemoveAudioOutputConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":RemoveAudioOutputConfiguration is a complexType.
struct _ns2__RemoveAudioOutputConfiguration
{
/// @brief Contains a reference to the media profile from which the AudioOutputConfiguration shall be removed.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":RemoveAudioOutputConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":RemoveAudioOutputConfigurationResponse is a complexType.
struct _ns2__RemoveAudioOutputConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":AddAudioDecoderConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":AddAudioDecoderConfiguration is a complexType.
struct _ns2__AddAudioDecoderConfiguration
{
/// @brief This element contains a reference to the profile where the configuration should be added.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
/// @brief This element contains a reference to the AudioDecoderConfiguration to add.
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":AddAudioDecoderConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":AddAudioDecoderConfigurationResponse is a complexType.
struct _ns2__AddAudioDecoderConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":RemoveAudioDecoderConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":RemoveAudioDecoderConfiguration is a complexType.
struct _ns2__RemoveAudioDecoderConfiguration
{
/// @brief This element contains a reference to the media profile from which the AudioDecoderConfiguration shall be removed.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":RemoveAudioDecoderConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":RemoveAudioDecoderConfigurationResponse is a complexType.
struct _ns2__RemoveAudioDecoderConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":DeleteProfile

/// "http://www.onvif.org/ver10/media/wsdl":DeleteProfile is a complexType.
struct _ns2__DeleteProfile
{
/// @brief This element contains a reference to the profile that should be deleted.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":DeleteProfileResponse

/// "http://www.onvif.org/ver10/media/wsdl":DeleteProfileResponse is a complexType.
struct _ns2__DeleteProfileResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetVideoEncoderConfigurations

/// "http://www.onvif.org/ver10/media/wsdl":GetVideoEncoderConfigurations is a complexType.
struct _ns2__GetVideoEncoderConfigurations
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetVideoEncoderConfigurationsResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetVideoEncoderConfigurationsResponse is a complexType.
struct _ns2__GetVideoEncoderConfigurationsResponse
{
/// @brief This element contains a list of video encoder configurations.
/// Size of array of struct ns3__VideoEncoderConfiguration* is 0..unbounded
   $int                                  __sizeConfigurations           0;
/// Array struct ns3__VideoEncoderConfiguration* of length 0..unbounded
    struct ns3__VideoEncoderConfiguration*  Configurations                 0;
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetVideoSourceConfigurations

/// "http://www.onvif.org/ver10/media/wsdl":GetVideoSourceConfigurations is a complexType.
struct _ns2__GetVideoSourceConfigurations
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetVideoSourceConfigurationsResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetVideoSourceConfigurationsResponse is a complexType.
struct _ns2__GetVideoSourceConfigurationsResponse
{
/// @brief This element contains a list of video source configurations.
/// Size of array of struct ns3__VideoSourceConfiguration* is 0..unbounded
   $int                                  __sizeConfigurations           0;
/// Array struct ns3__VideoSourceConfiguration* of length 0..unbounded
    struct ns3__VideoSourceConfiguration*  Configurations                 0;
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioEncoderConfigurations

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioEncoderConfigurations is a complexType.
struct _ns2__GetAudioEncoderConfigurations
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioEncoderConfigurationsResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioEncoderConfigurationsResponse is a complexType.
struct _ns2__GetAudioEncoderConfigurationsResponse
{
/// @brief This element contains a list of audio encoder configurations.
/// Size of array of struct ns3__AudioEncoderConfiguration* is 0..unbounded
   $int                                  __sizeConfigurations           0;
/// Array struct ns3__AudioEncoderConfiguration* of length 0..unbounded
    struct ns3__AudioEncoderConfiguration*  Configurations                 0;
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioSourceConfigurations

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioSourceConfigurations is a complexType.
struct _ns2__GetAudioSourceConfigurations
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioSourceConfigurationsResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioSourceConfigurationsResponse is a complexType.
struct _ns2__GetAudioSourceConfigurationsResponse
{
/// @brief This element contains a list of audio source configurations.
/// Size of array of struct ns3__AudioSourceConfiguration* is 0..unbounded
   $int                                  __sizeConfigurations           0;
/// Array struct ns3__AudioSourceConfiguration* of length 0..unbounded
    struct ns3__AudioSourceConfiguration*  Configurations                 0;
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetVideoAnalyticsConfigurations

/// "http://www.onvif.org/ver10/media/wsdl":GetVideoAnalyticsConfigurations is a complexType.
struct _ns2__GetVideoAnalyticsConfigurations
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetVideoAnalyticsConfigurationsResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetVideoAnalyticsConfigurationsResponse is a complexType.
struct _ns2__GetVideoAnalyticsConfigurationsResponse
{
/// @brief This element contains a list of VideoAnalytics configurations.
/// Size of array of struct ns3__VideoAnalyticsConfiguration* is 0..unbounded
   $int                                  __sizeConfigurations           0;
/// Array struct ns3__VideoAnalyticsConfiguration* of length 0..unbounded
    struct ns3__VideoAnalyticsConfiguration*  Configurations                 0;
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetMetadataConfigurations

/// "http://www.onvif.org/ver10/media/wsdl":GetMetadataConfigurations is a complexType.
struct _ns2__GetMetadataConfigurations
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetMetadataConfigurationsResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetMetadataConfigurationsResponse is a complexType.
struct _ns2__GetMetadataConfigurationsResponse
{
/// @brief This element contains a list of metadata configurations
/// Size of array of struct ns3__MetadataConfiguration* is 0..unbounded
   $int                                  __sizeConfigurations           0;
/// Array struct ns3__MetadataConfiguration* of length 0..unbounded
    struct ns3__MetadataConfiguration*   Configurations                 0;
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioOutputConfigurations

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioOutputConfigurations is a complexType.
struct _ns2__GetAudioOutputConfigurations
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioOutputConfigurationsResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioOutputConfigurationsResponse is a complexType.
struct _ns2__GetAudioOutputConfigurationsResponse
{
/// @brief This element contains a list of audio output configurations
/// Size of array of struct ns3__AudioOutputConfiguration* is 0..unbounded
   $int                                  __sizeConfigurations           0;
/// Array struct ns3__AudioOutputConfiguration* of length 0..unbounded
    struct ns3__AudioOutputConfiguration*  Configurations                 0;
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioDecoderConfigurations

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioDecoderConfigurations is a complexType.
struct _ns2__GetAudioDecoderConfigurations
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioDecoderConfigurationsResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioDecoderConfigurationsResponse is a complexType.
struct _ns2__GetAudioDecoderConfigurationsResponse
{
/// @brief This element contains a list of audio decoder configurations
/// Size of array of struct ns3__AudioDecoderConfiguration* is 0..unbounded
   $int                                  __sizeConfigurations           0;
/// Array struct ns3__AudioDecoderConfiguration* of length 0..unbounded
    struct ns3__AudioDecoderConfiguration*  Configurations                 0;
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetVideoSourceConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":GetVideoSourceConfiguration is a complexType.
struct _ns2__GetVideoSourceConfiguration
{
/// @brief Token of the requested video source configuration.
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetVideoSourceConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetVideoSourceConfigurationResponse is a complexType.
struct _ns2__GetVideoSourceConfigurationResponse
{
/// @brief The requested video source configuration.
/// Element Configuration of type "http://www.onvif.org/ver10/schema":VideoSourceConfiguration.
    struct ns3__VideoSourceConfiguration*  Configuration                  1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetVideoEncoderConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":GetVideoEncoderConfiguration is a complexType.
struct _ns2__GetVideoEncoderConfiguration
{
/// @brief Token of the requested video encoder configuration.
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetVideoEncoderConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetVideoEncoderConfigurationResponse is a complexType.
struct _ns2__GetVideoEncoderConfigurationResponse
{
/// @brief The requested video encoder configuration.
/// Element Configuration of type "http://www.onvif.org/ver10/schema":VideoEncoderConfiguration.
    struct ns3__VideoEncoderConfiguration*  Configuration                  1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioSourceConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioSourceConfiguration is a complexType.
struct _ns2__GetAudioSourceConfiguration
{
/// @brief Token of the requested audio source configuration.
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioSourceConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioSourceConfigurationResponse is a complexType.
struct _ns2__GetAudioSourceConfigurationResponse
{
/// @brief The requested audio source configuration.
/// Element Configuration of type "http://www.onvif.org/ver10/schema":AudioSourceConfiguration.
    struct ns3__AudioSourceConfiguration*  Configuration                  1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioEncoderConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioEncoderConfiguration is a complexType.
struct _ns2__GetAudioEncoderConfiguration
{
/// @brief Token of the requested audio encoder configuration.
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioEncoderConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioEncoderConfigurationResponse is a complexType.
struct _ns2__GetAudioEncoderConfigurationResponse
{
/// @brief The requested audio encoder configuration
/// Element Configuration of type "http://www.onvif.org/ver10/schema":AudioEncoderConfiguration.
    struct ns3__AudioEncoderConfiguration*  Configuration                  1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetVideoAnalyticsConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":GetVideoAnalyticsConfiguration is a complexType.
struct _ns2__GetVideoAnalyticsConfiguration
{
/// @brief Token of the requested video analytics configuration.
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetVideoAnalyticsConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetVideoAnalyticsConfigurationResponse is a complexType.
struct _ns2__GetVideoAnalyticsConfigurationResponse
{
/// @brief The requested video analytics configuration.
/// Element Configuration of type "http://www.onvif.org/ver10/schema":VideoAnalyticsConfiguration.
    struct ns3__VideoAnalyticsConfiguration*  Configuration                  1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetMetadataConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":GetMetadataConfiguration is a complexType.
struct _ns2__GetMetadataConfiguration
{
/// @brief Token of the requested metadata configuration.
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetMetadataConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetMetadataConfigurationResponse is a complexType.
struct _ns2__GetMetadataConfigurationResponse
{
/// @brief The requested metadata configuration.
/// Element Configuration of type "http://www.onvif.org/ver10/schema":MetadataConfiguration.
    struct ns3__MetadataConfiguration*   Configuration                  1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioOutputConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioOutputConfiguration is a complexType.
struct _ns2__GetAudioOutputConfiguration
{
/// @brief Token of the requested audio output configuration.
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioOutputConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioOutputConfigurationResponse is a complexType.
struct _ns2__GetAudioOutputConfigurationResponse
{
/// @brief The requested audio output configuration.
/// Element Configuration of type "http://www.onvif.org/ver10/schema":AudioOutputConfiguration.
    struct ns3__AudioOutputConfiguration*  Configuration                  1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioDecoderConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioDecoderConfiguration is a complexType.
struct _ns2__GetAudioDecoderConfiguration
{
/// @brief Token of the requested audio decoder configuration.
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioDecoderConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioDecoderConfigurationResponse is a complexType.
struct _ns2__GetAudioDecoderConfigurationResponse
{
/// @brief The requested audio decoder configuration
/// Element Configuration of type "http://www.onvif.org/ver10/schema":AudioDecoderConfiguration.
    struct ns3__AudioDecoderConfiguration*  Configuration                  1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetCompatibleVideoEncoderConfigurations

/// "http://www.onvif.org/ver10/media/wsdl":GetCompatibleVideoEncoderConfigurations is a complexType.
struct _ns2__GetCompatibleVideoEncoderConfigurations
{
/// @brief Contains the token of an existing media profile the configurations shall be compatible with.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetCompatibleVideoEncoderConfigurationsResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetCompatibleVideoEncoderConfigurationsResponse is a complexType.
struct _ns2__GetCompatibleVideoEncoderConfigurationsResponse
{
/// @brief Contains a list of video encoder configurations that are compatible with the specified media profile.
/// Size of array of struct ns3__VideoEncoderConfiguration* is 0..unbounded
   $int                                  __sizeConfigurations           0;
/// Array struct ns3__VideoEncoderConfiguration* of length 0..unbounded
    struct ns3__VideoEncoderConfiguration*  Configurations                 0;
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetCompatibleVideoSourceConfigurations

/// "http://www.onvif.org/ver10/media/wsdl":GetCompatibleVideoSourceConfigurations is a complexType.
struct _ns2__GetCompatibleVideoSourceConfigurations
{
/// @brief Contains the token of an existing media profile the configurations shall be compatible with.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetCompatibleVideoSourceConfigurationsResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetCompatibleVideoSourceConfigurationsResponse is a complexType.
struct _ns2__GetCompatibleVideoSourceConfigurationsResponse
{
/// @brief Contains a list of video source configurations that are compatible with the specified media profile.
/// Size of array of struct ns3__VideoSourceConfiguration* is 0..unbounded
   $int                                  __sizeConfigurations           0;
/// Array struct ns3__VideoSourceConfiguration* of length 0..unbounded
    struct ns3__VideoSourceConfiguration*  Configurations                 0;
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetCompatibleAudioEncoderConfigurations

/// "http://www.onvif.org/ver10/media/wsdl":GetCompatibleAudioEncoderConfigurations is a complexType.
struct _ns2__GetCompatibleAudioEncoderConfigurations
{
/// @brief Contains the token of an existing media profile the configurations shall be compatible with.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetCompatibleAudioEncoderConfigurationsResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetCompatibleAudioEncoderConfigurationsResponse is a complexType.
struct _ns2__GetCompatibleAudioEncoderConfigurationsResponse
{
/// @brief Contains a list of audio encoder configurations that are compatible with the specified media profile.
/// Size of array of struct ns3__AudioEncoderConfiguration* is 0..unbounded
   $int                                  __sizeConfigurations           0;
/// Array struct ns3__AudioEncoderConfiguration* of length 0..unbounded
    struct ns3__AudioEncoderConfiguration*  Configurations                 0;
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetCompatibleAudioSourceConfigurations

/// "http://www.onvif.org/ver10/media/wsdl":GetCompatibleAudioSourceConfigurations is a complexType.
struct _ns2__GetCompatibleAudioSourceConfigurations
{
/// @brief Contains the token of an existing media profile the configurations shall be compatible with.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetCompatibleAudioSourceConfigurationsResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetCompatibleAudioSourceConfigurationsResponse is a complexType.
struct _ns2__GetCompatibleAudioSourceConfigurationsResponse
{
/// @brief Contains a list of audio source configurations that are compatible with the specified media profile.
/// Size of array of struct ns3__AudioSourceConfiguration* is 0..unbounded
   $int                                  __sizeConfigurations           0;
/// Array struct ns3__AudioSourceConfiguration* of length 0..unbounded
    struct ns3__AudioSourceConfiguration*  Configurations                 0;
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetCompatibleVideoAnalyticsConfigurations

/// "http://www.onvif.org/ver10/media/wsdl":GetCompatibleVideoAnalyticsConfigurations is a complexType.
struct _ns2__GetCompatibleVideoAnalyticsConfigurations
{
/// @brief Contains the token of an existing media profile the configurations shall be compatible with.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetCompatibleVideoAnalyticsConfigurationsResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetCompatibleVideoAnalyticsConfigurationsResponse is a complexType.
struct _ns2__GetCompatibleVideoAnalyticsConfigurationsResponse
{
/// @brief Contains a list of video analytics configurations that are compatible with the specified media profile.
/// Size of array of struct ns3__VideoAnalyticsConfiguration* is 0..unbounded
   $int                                  __sizeConfigurations           0;
/// Array struct ns3__VideoAnalyticsConfiguration* of length 0..unbounded
    struct ns3__VideoAnalyticsConfiguration*  Configurations                 0;
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetCompatibleMetadataConfigurations

/// "http://www.onvif.org/ver10/media/wsdl":GetCompatibleMetadataConfigurations is a complexType.
struct _ns2__GetCompatibleMetadataConfigurations
{
/// @brief Contains the token of an existing media profile the configurations shall be compatible with.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetCompatibleMetadataConfigurationsResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetCompatibleMetadataConfigurationsResponse is a complexType.
struct _ns2__GetCompatibleMetadataConfigurationsResponse
{
/// @brief Contains a list of metadata configurations that are compatible with the specified media profile.
/// Size of array of struct ns3__MetadataConfiguration* is 0..unbounded
   $int                                  __sizeConfigurations           0;
/// Array struct ns3__MetadataConfiguration* of length 0..unbounded
    struct ns3__MetadataConfiguration*   Configurations                 0;
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetCompatibleAudioOutputConfigurations

/// "http://www.onvif.org/ver10/media/wsdl":GetCompatibleAudioOutputConfigurations is a complexType.
struct _ns2__GetCompatibleAudioOutputConfigurations
{
/// @brief Contains the token of an existing media profile the configurations shall be compatible with.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetCompatibleAudioOutputConfigurationsResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetCompatibleAudioOutputConfigurationsResponse is a complexType.
struct _ns2__GetCompatibleAudioOutputConfigurationsResponse
{
/// @brief Contains a list of audio output configurations that are compatible with the specified media profile.
/// Size of array of struct ns3__AudioOutputConfiguration* is 0..unbounded
   $int                                  __sizeConfigurations           0;
/// Array struct ns3__AudioOutputConfiguration* of length 0..unbounded
    struct ns3__AudioOutputConfiguration*  Configurations                 0;
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetCompatibleAudioDecoderConfigurations

/// "http://www.onvif.org/ver10/media/wsdl":GetCompatibleAudioDecoderConfigurations is a complexType.
struct _ns2__GetCompatibleAudioDecoderConfigurations
{
/// @brief Contains the token of an existing media profile the configurations shall be compatible with.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetCompatibleAudioDecoderConfigurationsResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetCompatibleAudioDecoderConfigurationsResponse is a complexType.
struct _ns2__GetCompatibleAudioDecoderConfigurationsResponse
{
/// @brief Contains a list of audio decoder configurations that are compatible with the specified media profile.
/// Size of array of struct ns3__AudioDecoderConfiguration* is 0..unbounded
   $int                                  __sizeConfigurations           0;
/// Array struct ns3__AudioDecoderConfiguration* of length 0..unbounded
    struct ns3__AudioDecoderConfiguration*  Configurations                 0;
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":SetVideoEncoderConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":SetVideoEncoderConfiguration is a complexType.
struct _ns2__SetVideoEncoderConfiguration
{
/// @brief Contains the modified video encoder configuration. The configuration shall exist in the NVT.
/// Element Configuration of type "http://www.onvif.org/ver10/schema":VideoEncoderConfiguration.
    struct ns3__VideoEncoderConfiguration*  Configuration                  1;	///< Required element.
/// @brief Determines if the configuration changes shall be stored and remain after reboot. If true, changes shall be persistent. If false, changes MAY revert to previous values after reboot.
/// Element ForcePersistence of type xs:boolean.
    enum xsd__boolean                    ForcePersistence               1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":SetVideoEncoderConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":SetVideoEncoderConfigurationResponse is a complexType.
struct _ns2__SetVideoEncoderConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":SetVideoSourceConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":SetVideoSourceConfiguration is a complexType.
struct _ns2__SetVideoSourceConfiguration
{
/// @brief Contains the modified video source configuration. The configuration shall exist in the NVT.
/// Element Configuration of type "http://www.onvif.org/ver10/schema":VideoSourceConfiguration.
    struct ns3__VideoSourceConfiguration*  Configuration                  1;	///< Required element.
/// @brief Determines if the configuration changes shall be stored and remain after reboot. If true, changes shall be persistent. If false, changes MAY revert to previous values after reboot.
/// Element ForcePersistence of type xs:boolean.
    enum xsd__boolean                    ForcePersistence               1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":SetVideoSourceConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":SetVideoSourceConfigurationResponse is a complexType.
struct _ns2__SetVideoSourceConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":SetAudioEncoderConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":SetAudioEncoderConfiguration is a complexType.
struct _ns2__SetAudioEncoderConfiguration
{
/// @brief Contains the modified audio encoder configuration. The configuration shall exist in the NVT.
/// Element Configuration of type "http://www.onvif.org/ver10/schema":AudioEncoderConfiguration.
    struct ns3__AudioEncoderConfiguration*  Configuration                  1;	///< Required element.
/// @brief Determines if the configuration changes shall be stored and remain after reboot. If true, changes shall be persistent. If false, changes MAY revert to previous values after reboot.
/// Element ForcePersistence of type xs:boolean.
    enum xsd__boolean                    ForcePersistence               1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":SetAudioEncoderConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":SetAudioEncoderConfigurationResponse is a complexType.
struct _ns2__SetAudioEncoderConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":SetAudioSourceConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":SetAudioSourceConfiguration is a complexType.
struct _ns2__SetAudioSourceConfiguration
{
/// @brief Contains the modified audio source configuration. The configuration shall exist in the NVT.
/// Element Configuration of type "http://www.onvif.org/ver10/schema":AudioSourceConfiguration.
    struct ns3__AudioSourceConfiguration*  Configuration                  1;	///< Required element.
/// @brief Determines if the configuration changes shall be stored and remain after reboot. If true, changes shall be persistent. If false, changes MAY revert to previous values after reboot.
/// Element ForcePersistence of type xs:boolean.
    enum xsd__boolean                    ForcePersistence               1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":SetAudioSourceConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":SetAudioSourceConfigurationResponse is a complexType.
struct _ns2__SetAudioSourceConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":SetVideoAnalyticsConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":SetVideoAnalyticsConfiguration is a complexType.
struct _ns2__SetVideoAnalyticsConfiguration
{
/// @brief Contains the modified video analytics configuration. The configuration shall exist in the NVT.
/// Element Configuration of type "http://www.onvif.org/ver10/schema":VideoAnalyticsConfiguration.
    struct ns3__VideoAnalyticsConfiguration*  Configuration                  1;	///< Required element.
/// @brief Determines if the configuration changes shall be stored and remain after reboot. If true, changes shall be persistent. If false, changes MAY revert to previous values after reboot.
/// Element ForcePersistence of type xs:boolean.
    enum xsd__boolean                    ForcePersistence               1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":SetVideoAnalyticsConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":SetVideoAnalyticsConfigurationResponse is a complexType.
struct _ns2__SetVideoAnalyticsConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":SetMetadataConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":SetMetadataConfiguration is a complexType.
struct _ns2__SetMetadataConfiguration
{
/// @brief Contains the modified metadata configuration. The configuration shall exist in the NVT.
/// Element Configuration of type "http://www.onvif.org/ver10/schema":MetadataConfiguration.
    struct ns3__MetadataConfiguration*   Configuration                  1;	///< Required element.
/// @brief Determines if the configuration changes shall be stored and remain after reboot. If true, changes shall be persistent. If false, changes MAY revert to previous values after reboot.
/// Element ForcePersistence of type xs:boolean.
    enum xsd__boolean                    ForcePersistence               1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":SetMetadataConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":SetMetadataConfigurationResponse is a complexType.
struct _ns2__SetMetadataConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":SetAudioOutputConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":SetAudioOutputConfiguration is a complexType.
struct _ns2__SetAudioOutputConfiguration
{
/// @brief Contains the modified audio output configuration. The configuration shall exist in the NVT.
/// Element Configuration of type "http://www.onvif.org/ver10/schema":AudioOutputConfiguration.
    struct ns3__AudioOutputConfiguration*  Configuration                  1;	///< Required element.
/// @brief Determines if the configuration changes shall be stored and remain after reboot. If true, changes shall be persistent. If false, changes MAY revert to previous values after reboot.
/// Element ForcePersistence of type xs:boolean.
    enum xsd__boolean                    ForcePersistence               1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":SetAudioOutputConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":SetAudioOutputConfigurationResponse is a complexType.
struct _ns2__SetAudioOutputConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":SetAudioDecoderConfiguration

/// "http://www.onvif.org/ver10/media/wsdl":SetAudioDecoderConfiguration is a complexType.
struct _ns2__SetAudioDecoderConfiguration
{
/// @brief Contains the modified audio decoder configuration. The configuration shall exist in the NVT.
/// Element Configuration of type "http://www.onvif.org/ver10/schema":AudioDecoderConfiguration.
    struct ns3__AudioDecoderConfiguration*  Configuration                  1;	///< Required element.
/// @brief Determines if the configuration changes shall be stored and remain after reboot. If true, changes shall be persistent. If false, changes MAY revert to previous values after reboot.
/// Element ForcePersistence of type xs:boolean.
    enum xsd__boolean                    ForcePersistence               1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":SetAudioDecoderConfigurationResponse

/// "http://www.onvif.org/ver10/media/wsdl":SetAudioDecoderConfigurationResponse is a complexType.
struct _ns2__SetAudioDecoderConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetVideoSourceConfigurationOptions

/// "http://www.onvif.org/ver10/media/wsdl":GetVideoSourceConfigurationOptions is a complexType.
struct _ns2__GetVideoSourceConfigurationOptions
{
/// @brief Optional video source configurationToken that specifies an existing configuration that the options are intended for.
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             0;	///< Optional element.
/// @brief Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetVideoSourceConfigurationOptionsResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetVideoSourceConfigurationOptionsResponse is a complexType.
struct _ns2__GetVideoSourceConfigurationOptionsResponse
{
/// @brief This message contains the video source configuration options. If a video source configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
/// Element Options of type "http://www.onvif.org/ver10/schema":VideoSourceConfigurationOptions.
    struct ns3__VideoSourceConfigurationOptions*  Options                        1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetVideoEncoderConfigurationOptions

/// "http://www.onvif.org/ver10/media/wsdl":GetVideoEncoderConfigurationOptions is a complexType.
struct _ns2__GetVideoEncoderConfigurationOptions
{
/// @brief Optional video encoder configuration token that specifies an existing configuration that the options are intended for.
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             0;	///< Optional element.
/// @brief Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetVideoEncoderConfigurationOptionsResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetVideoEncoderConfigurationOptionsResponse is a complexType.
struct _ns2__GetVideoEncoderConfigurationOptionsResponse
{
/// Element Options of type "http://www.onvif.org/ver10/schema":VideoEncoderConfigurationOptions.
    struct ns3__VideoEncoderConfigurationOptions*  Options                        1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioSourceConfigurationOptions

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioSourceConfigurationOptions is a complexType.
struct _ns2__GetAudioSourceConfigurationOptions
{
/// @brief Optional audio source configuration token that specifies an existing configuration that the options are intended for.
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             0;	///< Optional element.
/// @brief Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioSourceConfigurationOptionsResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioSourceConfigurationOptionsResponse is a complexType.
struct _ns2__GetAudioSourceConfigurationOptionsResponse
{
/// @brief This message contains the audio source configuration options. If a audio source configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
/// Element Options of type "http://www.onvif.org/ver10/schema":AudioSourceConfigurationOptions.
    struct ns3__AudioSourceConfigurationOptions*  Options                        1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioEncoderConfigurationOptions

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioEncoderConfigurationOptions is a complexType.
struct _ns2__GetAudioEncoderConfigurationOptions
{
/// @brief Optional audio encoder configuration token that specifies an existing configuration that the options are intended for.
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             0;	///< Optional element.
/// @brief Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioEncoderConfigurationOptionsResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioEncoderConfigurationOptionsResponse is a complexType.
struct _ns2__GetAudioEncoderConfigurationOptionsResponse
{
/// @brief This message contains the audio encoder configuration options. If a audio encoder configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
/// Element Options of type "http://www.onvif.org/ver10/schema":AudioEncoderConfigurationOptions.
    struct ns3__AudioEncoderConfigurationOptions*  Options                        1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetMetadataConfigurationOptions

/// "http://www.onvif.org/ver10/media/wsdl":GetMetadataConfigurationOptions is a complexType.
struct _ns2__GetMetadataConfigurationOptions
{
/// @brief Optional metadata configuration token that specifies an existing configuration that the options are intended for.
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             0;	///< Optional element.
/// @brief Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetMetadataConfigurationOptionsResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetMetadataConfigurationOptionsResponse is a complexType.
struct _ns2__GetMetadataConfigurationOptionsResponse
{
/// @brief This message contains the metadata configuration options. If a metadata configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
/// Element Options of type "http://www.onvif.org/ver10/schema":MetadataConfigurationOptions.
    struct ns3__MetadataConfigurationOptions*  Options                        1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioOutputConfigurationOptions

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioOutputConfigurationOptions is a complexType.
struct _ns2__GetAudioOutputConfigurationOptions
{
/// @brief Optional audio output configuration token that specifies an existing configuration that the options are intended for.
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             0;	///< Optional element.
/// @brief Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioOutputConfigurationOptionsResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioOutputConfigurationOptionsResponse is a complexType.
struct _ns2__GetAudioOutputConfigurationOptionsResponse
{
/// @brief This message contains the audio output configuration options. If a audio output configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
/// Element Options of type "http://www.onvif.org/ver10/schema":AudioOutputConfigurationOptions.
    struct ns3__AudioOutputConfigurationOptions*  Options                        1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioDecoderConfigurationOptions

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioDecoderConfigurationOptions is a complexType.
struct _ns2__GetAudioDecoderConfigurationOptions
{
/// @brief Optional audio decoder configuration token that specifies an existing configuration that the options are intended for.
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             0;	///< Optional element.
/// @brief Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetAudioDecoderConfigurationOptionsResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetAudioDecoderConfigurationOptionsResponse is a complexType.
struct _ns2__GetAudioDecoderConfigurationOptionsResponse
{
/// @brief This message contains the audio decoder configuration options. If a audio decoder configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
/// Element Options of type "http://www.onvif.org/ver10/schema":AudioDecoderConfigurationOptions.
    struct ns3__AudioDecoderConfigurationOptions*  Options                        1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetGuaranteedNumberOfVideoEncoderInstances

/// "http://www.onvif.org/ver10/media/wsdl":GetGuaranteedNumberOfVideoEncoderInstances is a complexType.
struct _ns2__GetGuaranteedNumberOfVideoEncoderInstances
{
/// @brief Token of the video source configuration
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetGuaranteedNumberOfVideoEncoderInstancesResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetGuaranteedNumberOfVideoEncoderInstancesResponse is a complexType.
struct _ns2__GetGuaranteedNumberOfVideoEncoderInstancesResponse
{
/// @brief The minimum guaranteed total number of encoder instances (applications) per VideoSourceConfiguration. The device is able to deliver the TotalNumber of streams
/// Element TotalNumber of type xs:int.
    int                                  TotalNumber                    1;	///< Required element.
/// @brief If a device limits the number of instances for respective Video Codecs the response contains the information how many Jpeg streams can be set up at the same time per VideoSource.
/// Element JPEG of type xs:int.
    int*                                 JPEG                           0;	///< Optional element.
/// @brief If a device limits the number of instances for respective Video Codecs the response contains the information how many H264 streams can be set up at the same time per VideoSource.
/// Element H264 of type xs:int.
    int*                                 H264                           0;	///< Optional element.
/// @brief If a device limits the number of instances for respective Video Codecs the response contains the information how many Mpeg4 streams can be set up at the same time per VideoSource.
/// Element MPEG4 of type xs:int.
    int*                                 MPEG4                          0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetStreamUri

/// "http://www.onvif.org/ver10/media/wsdl":GetStreamUri is a complexType.
struct _ns2__GetStreamUri
{
/// @brief Stream Setup that should be used with the uri
/// Element StreamSetup of type "http://www.onvif.org/ver10/schema":StreamSetup.
    struct ns3__StreamSetup*             StreamSetup                    1;	///< Required element.
/// @brief The ProfileToken element indicates the media profile to use and will define the configuration of the content of the stream.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetStreamUriResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetStreamUriResponse is a complexType.
struct _ns2__GetStreamUriResponse
{
/// @brief
/// Element MediaUri of type "http://www.onvif.org/ver10/schema":MediaUri.
    struct ns3__MediaUri*                MediaUri                       1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":StartMulticastStreaming

/// "http://www.onvif.org/ver10/media/wsdl":StartMulticastStreaming is a complexType.
struct _ns2__StartMulticastStreaming
{
/// @brief Contains the token of the Profile that is used to define the multicast stream.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":StartMulticastStreamingResponse

/// "http://www.onvif.org/ver10/media/wsdl":StartMulticastStreamingResponse is a complexType.
struct _ns2__StartMulticastStreamingResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":StopMulticastStreaming

/// "http://www.onvif.org/ver10/media/wsdl":StopMulticastStreaming is a complexType.
struct _ns2__StopMulticastStreaming
{
/// @brief Contains the token of the Profile that is used to define the multicast stream.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":StopMulticastStreamingResponse

/// "http://www.onvif.org/ver10/media/wsdl":StopMulticastStreamingResponse is a complexType.
struct _ns2__StopMulticastStreamingResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":SetSynchronizationPoint

/// "http://www.onvif.org/ver10/media/wsdl":SetSynchronizationPoint is a complexType.
struct _ns2__SetSynchronizationPoint
{
/// @brief Contains a Profile reference for which a Synchronization Point is requested.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":SetSynchronizationPointResponse

/// "http://www.onvif.org/ver10/media/wsdl":SetSynchronizationPointResponse is a complexType.
struct _ns2__SetSynchronizationPointResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetSnapshotUri

/// "http://www.onvif.org/ver10/media/wsdl":GetSnapshotUri is a complexType.
struct _ns2__GetSnapshotUri
{
/// @brief The ProfileToken element indicates the media profile to use and will define the source and dimensions of the snapshot.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":GetSnapshotUriResponse

/// "http://www.onvif.org/ver10/media/wsdl":GetSnapshotUriResponse is a complexType.
struct _ns2__GetSnapshotUriResponse
{
/// @brief
/// Element MediaUri of type "http://www.onvif.org/ver10/schema":MediaUri.
    struct ns3__MediaUri*                MediaUri                       1;	///< Required element.
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.onvif.org/ver10/schema                                        *
 *                                                                            *
\******************************************************************************/


/// "http://www.onvif.org/ver10/schema":DeviceEntity is a complexType.
/// @brief Base class for physical entities like inputs and outputs.
struct ns3__DeviceEntity
{
/// @brief Unique identifier referencing the physical entity.
/// Attribute token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @ns3__ReferenceToken                  token                          1;	///< Required attribute.
};

/// "http://www.onvif.org/ver10/schema":IntRectangle is a complexType.
/// @brief Rectangle defined by lower left corner position and size. Units are pixel.
struct ns3__IntRectangle
{
/// Attribute x of type xs:int.
   @int                                  x                              1;	///< Required attribute.
/// Attribute y of type xs:int.
   @int                                  y                              1;	///< Required attribute.
/// Attribute width of type xs:int.
   @int                                  width                          1;	///< Required attribute.
/// Attribute height of type xs:int.
   @int                                  height                         1;	///< Required attribute.
};

/// "http://www.onvif.org/ver10/schema":IntRectangleRange is a complexType.
/// @brief Range of a rectangle. The rectangle itself is defined by lower left corner position and size. Units are pixel.
struct ns3__IntRectangleRange
{
/// @brief Range of X-axis.
/// Element XRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                XRange                         1;	///< Required element.
/// @brief Range of Y-axis.
/// Element YRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                YRange                         1;	///< Required element.
/// @brief Range of width.
/// Element WidthRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                WidthRange                     1;	///< Required element.
/// @brief Range of height.
/// Element HeightRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                HeightRange                    1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":IntRange is a complexType.
/// @brief Range of values greater equal Min value and less equal Max value.
struct ns3__IntRange
{
/// Element Min of type xs:int.
    int                                  Min                            1;	///< Required element.
/// Element Max of type xs:int.
    int                                  Max                            1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":FloatRange is a complexType.
/// @brief Range of values greater equal Min value and less equal Max value.
struct ns3__FloatRange
{
/// Element Min of type xs:float.
    float                                Min                            1;	///< Required element.
/// Element Max of type xs:float.
    float                                Max                            1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":DurationRange is a complexType.
/// @brief Range of duration greater equal Min duration and less equal Max duration.
struct ns3__DurationRange
{
/// Element Min of type xs:duration.
    xsd__duration                        Min                            1;	///< Required element.
/// Element Max of type xs:duration.
    xsd__duration                        Max                            1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":IntList is a complexType.
/// @brief List of values.
struct ns3__IntList
{
/// Size of array of int* is 0..unbounded
   $int                                  __sizeItems                    0;
/// Array int* of length 0..unbounded
    int*                                 Items                          0;
};

/// "http://www.onvif.org/ver10/schema":VideoSourceExtension is a complexType.
struct ns3__VideoSourceExtension
{
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// @brief Optional configuration of the image sensor. To be used if imaging service 2.00 is supported.
/// Element Imaging of type "http://www.onvif.org/ver10/schema":ImagingSettings20.
    struct ns3__ImagingSettings20*       Imaging                        0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":VideoSourceExtension2.
    struct ns3__VideoSourceExtension2*   Extension                      0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":VideoSourceExtension2 is a complexType.
struct ns3__VideoSourceExtension2
{
/// TODO: <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":Profile is a complexType.
/// @brief A media profile consists of a set of media configurations. Media profiles are used by a client to configure properties of a media stream from an NVT.<br/> An NVT shall provide at least one media profile at boot. An NVT should provide ready to use profiles for the most common media configurations that the device offers.<br/> A profile consists of a set of interconnected configuration entities. Configurations are provided by the NVT and can be either static or created dynamically by the NVT. For example, the dynamic configurations can be created by the NVT depending on current available encoding resources.
struct ns3__Profile
{
/// @brief User readable name of the profile.
/// Element Name of type "http://www.onvif.org/ver10/schema":Name.
    ns3__Name                            Name                           1;	///< Required element.
/// @brief Optional configuration of the Video input.
/// Element VideoSourceConfiguration of type "http://www.onvif.org/ver10/schema":VideoSourceConfiguration.
    struct ns3__VideoSourceConfiguration*  VideoSourceConfiguration       0;	///< Optional element.
/// @brief Optional configuration of the Audio input.
/// Element AudioSourceConfiguration of type "http://www.onvif.org/ver10/schema":AudioSourceConfiguration.
    struct ns3__AudioSourceConfiguration*  AudioSourceConfiguration       0;	///< Optional element.
/// @brief Optional configuration of the Video encoder.
/// Element VideoEncoderConfiguration of type "http://www.onvif.org/ver10/schema":VideoEncoderConfiguration.
    struct ns3__VideoEncoderConfiguration*  VideoEncoderConfiguration      0;	///< Optional element.
/// @brief Optional configuration of the Audio encoder.
/// Element AudioEncoderConfiguration of type "http://www.onvif.org/ver10/schema":AudioEncoderConfiguration.
    struct ns3__AudioEncoderConfiguration*  AudioEncoderConfiguration      0;	///< Optional element.
/// @brief Optional configuration of the video analytics module and rule engine.
/// Element VideoAnalyticsConfiguration of type "http://www.onvif.org/ver10/schema":VideoAnalyticsConfiguration.
    struct ns3__VideoAnalyticsConfiguration*  VideoAnalyticsConfiguration    0;	///< Optional element.
/// @brief Optional configuration of the pan tilt zoom unit.
/// Element PTZConfiguration of type "http://www.onvif.org/ver10/schema":PTZConfiguration.
    struct ns3__PTZConfiguration*        PTZConfiguration               0;	///< Optional element.
/// @brief Optional configuration of the metadata stream.
/// Element MetadataConfiguration of type "http://www.onvif.org/ver10/schema":MetadataConfiguration.
    struct ns3__MetadataConfiguration*   MetadataConfiguration          0;	///< Optional element.
/// @brief Extensions defined in ONVIF 2.0
/// Element Extension of type "http://www.onvif.org/ver10/schema":ProfileExtension.
    struct ns3__ProfileExtension*        Extension                      0;	///< Optional element.
/// @brief Unique identifier of the profile.
/// Attribute token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @ns3__ReferenceToken                  token                          1;	///< Required attribute.
/// @brief A value of true signals that the profile cannot be deleted. Default is false.
/// Attribute fixed of type xs:boolean.
   @enum xsd__boolean*                   fixed                          0;	///< Optional attribute.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":ProfileExtension is a complexType.
struct ns3__ProfileExtension
{
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// @brief Optional configuration of the Audio output.
/// Element AudioOutputConfiguration of type "http://www.onvif.org/ver10/schema":AudioOutputConfiguration.
    struct ns3__AudioOutputConfiguration*  AudioOutputConfiguration       0;	///< Optional element.
/// @brief Optional configuration of the Audio decoder.
/// Element AudioDecoderConfiguration of type "http://www.onvif.org/ver10/schema":AudioDecoderConfiguration.
    struct ns3__AudioDecoderConfiguration*  AudioDecoderConfiguration      0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":ProfileExtension2.
    struct ns3__ProfileExtension2*       Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":ProfileExtension2 is a complexType.
struct ns3__ProfileExtension2
{
/// TODO: <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":ConfigurationEntity is a complexType.
/// @brief Base type defining the common properties of a configuration.
struct ns3__ConfigurationEntity
{
/// @brief User readable name. Length up to 64 characters.
/// Element Name of type "http://www.onvif.org/ver10/schema":Name.
    ns3__Name                            Name                           1;	///< Required element.
/// @brief Number of internal references currently using this configuration. <br/>This parameter is read-only and cannot be changed by a set request. <br/>For example the value increases if the configuration is added to a media profile or attached to a PaneConfiguration.
/// Element UseCount of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// @brief Token that uniquely refernces this configuration. Length up to 64 characters.
/// Attribute token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @ns3__ReferenceToken                  token                          1;	///< Required attribute.
};

/// "http://www.onvif.org/ver10/schema":VideoSourceConfigurationOptions is a complexType.
struct ns3__VideoSourceConfigurationOptions
{
/// @brief Supported range for the capturing area.
/// Element BoundsRange of type "http://www.onvif.org/ver10/schema":IntRectangleRange.
    struct ns3__IntRectangleRange*       BoundsRange                    1;	///< Required element.
/// @brief List of physical inputs.
/// Size of array of ns3__ReferenceToken* is 1..unbounded
   $int                                  __sizeVideoSourceTokensAvailable 1;
/// Array ns3__ReferenceToken* of length 1..unbounded
    ns3__ReferenceToken*                 VideoSourceTokensAvailable     1;
/// Element Extension of type "http://www.onvif.org/ver10/schema":VideoSourceConfigurationOptionsExtension.
    struct ns3__VideoSourceConfigurationOptionsExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":VideoSourceConfigurationOptionsExtension is a complexType.
struct ns3__VideoSourceConfigurationOptionsExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":VideoResolution is a complexType.
struct ns3__VideoResolution
{
/// @brief Number of the columns of the Video image.
/// Element Width of type xs:int.
    int                                  Width                          1;	///< Required element.
/// @brief Number of the lines of the Video image.
/// Element Height of type xs:int.
    int                                  Height                         1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":VideoRateControl is a complexType.
struct ns3__VideoRateControl
{
/// @brief Maximum output framerate in fps. If an EncodingInterval is provided the resulting encoded framerate will be reduced by the given factor.
/// Element FrameRateLimit of type xs:int.
    int                                  FrameRateLimit                 1;	///< Required element.
/// @brief Interval at which images are encoded and transmitted. (A value of 1 means that every frame is encoded, a value of 2 means that every 2nd frame is encoded ...)
/// Element EncodingInterval of type xs:int.
    int                                  EncodingInterval               1;	///< Required element.
/// @brief the maximum output bitrate in kbps
/// Element BitrateLimit of type xs:int.
    int                                  BitrateLimit                   1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":Mpeg4Configuration is a complexType.
struct ns3__Mpeg4Configuration
{
/// @brief Determines the interval in which the I-Frames will be coded. An entry of 1 indicates I-Frames are continuously generated. An entry of 2 indicates that every 2nd image is an I-Frame, and 3 only every 3rd frame, etc. The frames in between are coded as P or B Frames.
/// Element GovLength of type xs:int.
    int                                  GovLength                      1;	///< Required element.
/// @brief the Mpeg4 profile, either simple profile (SP) or advanced simple profile (ASP)
/// Element Mpeg4Profile of type "http://www.onvif.org/ver10/schema":Mpeg4Profile.
    enum ns3__Mpeg4Profile               Mpeg4Profile                   1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":H264Configuration is a complexType.
struct ns3__H264Configuration
{
/// @brief Group of Video frames length. Determines typically the interval in which the I-Frames will be coded. An entry of 1 indicates I-Frames are continuously generated. An entry of 2 indicates that every 2nd image is an I-Frame, and 3 only every 3rd frame, etc. The frames in between are coded as P or B Frames.
/// Element GovLength of type xs:int.
    int                                  GovLength                      1;	///< Required element.
/// @brief the H.264 profile, either baseline, main, extended or high
/// Element H264Profile of type "http://www.onvif.org/ver10/schema":H264Profile.
    enum ns3__H264Profile                H264Profile                    1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":VideoEncoderConfigurationOptions is a complexType.
struct ns3__VideoEncoderConfigurationOptions
{
/// @brief Range of the quality values. A high value means higher quality.
/// Element QualityRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                QualityRange                   1;	///< Required element.
/// @brief Optional JPEG encoder settings ranges (Depricated: use Extension).
/// Element JPEG of type "http://www.onvif.org/ver10/schema":JpegOptions.
    struct ns3__JpegOptions*             JPEG                           0;	///< Optional element.
/// @brief Optional MPEG-4 encoder settings ranges (Depricated: use Extension).
/// Element MPEG4 of type "http://www.onvif.org/ver10/schema":Mpeg4Options.
    struct ns3__Mpeg4Options*            MPEG4                          0;	///< Optional element.
/// @brief Optional H.264 encoder settings ranges (Depricated: use Extension).
/// Element H264 of type "http://www.onvif.org/ver10/schema":H264Options.
    struct ns3__H264Options*             H264                           0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":VideoEncoderOptionsExtension.
    struct ns3__VideoEncoderOptionsExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":VideoEncoderOptionsExtension is a complexType.
struct ns3__VideoEncoderOptionsExtension
{
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// @brief Optional JPEG encoder settings ranges.
/// Element JPEG of type "http://www.onvif.org/ver10/schema":JpegOptions2.
    struct ns3__JpegOptions2*            JPEG                           0;	///< Optional element.
/// @brief Optional MPEG-4 encoder settings ranges.
/// Element MPEG4 of type "http://www.onvif.org/ver10/schema":Mpeg4Options2.
    struct ns3__Mpeg4Options2*           MPEG4                          0;	///< Optional element.
/// @brief Optional H.264 encoder settings ranges.
/// Element H264 of type "http://www.onvif.org/ver10/schema":H264Options2.
    struct ns3__H264Options2*            H264                           0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":VideoEncoderOptionsExtension2.
    struct ns3__VideoEncoderOptionsExtension2*  Extension                      0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":VideoEncoderOptionsExtension2 is a complexType.
struct ns3__VideoEncoderOptionsExtension2
{
/// TODO: <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":JpegOptions is a complexType.
struct ns3__JpegOptions
{
/// @brief List of supported image sizes.
/// Size of array of struct ns3__VideoResolution* is 1..unbounded
   $int                                  __sizeResolutionsAvailable     1;
/// Array struct ns3__VideoResolution* of length 1..unbounded
    struct ns3__VideoResolution*         ResolutionsAvailable           1;
/// @brief Supported frame rate in fps (frames per second).
/// Element FrameRateRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                FrameRateRange                 1;	///< Required element.
/// @brief Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
/// Element EncodingIntervalRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                EncodingIntervalRange          1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":Mpeg4Options is a complexType.
struct ns3__Mpeg4Options
{
/// @brief List of supported image sizes.
/// Size of array of struct ns3__VideoResolution* is 1..unbounded
   $int                                  __sizeResolutionsAvailable     1;
/// Array struct ns3__VideoResolution* of length 1..unbounded
    struct ns3__VideoResolution*         ResolutionsAvailable           1;
/// @brief Supported group of Video frames length. This value typically corresponds to the I-Frame distance.
/// Element GovLengthRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                GovLengthRange                 1;	///< Required element.
/// @brief Supported frame rate in fps (frames per second).
/// Element FrameRateRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                FrameRateRange                 1;	///< Required element.
/// @brief Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
/// Element EncodingIntervalRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                EncodingIntervalRange          1;	///< Required element.
/// @brief List of supported MPEG-4 profiles.
/// Size of array of enum ns3__Mpeg4Profile* is 1..unbounded
   $int                                  __sizeMpeg4ProfilesSupported   1;
/// Array enum ns3__Mpeg4Profile* of length 1..unbounded
    enum ns3__Mpeg4Profile*              Mpeg4ProfilesSupported         1;
};

/// "http://www.onvif.org/ver10/schema":H264Options is a complexType.
struct ns3__H264Options
{
/// @brief List of supported image sizes.
/// Size of array of struct ns3__VideoResolution* is 1..unbounded
   $int                                  __sizeResolutionsAvailable     1;
/// Array struct ns3__VideoResolution* of length 1..unbounded
    struct ns3__VideoResolution*         ResolutionsAvailable           1;
/// @brief Supported group of Video frames length. This value typically corresponds to the I-Frame distance.
/// Element GovLengthRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                GovLengthRange                 1;	///< Required element.
/// @brief Supported frame rate in fps (frames per second).
/// Element FrameRateRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                FrameRateRange                 1;	///< Required element.
/// @brief Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
/// Element EncodingIntervalRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                EncodingIntervalRange          1;	///< Required element.
/// @brief List of supported H.264 profiles.
/// Size of array of enum ns3__H264Profile* is 1..unbounded
   $int                                  __sizeH264ProfilesSupported    1;
/// Array enum ns3__H264Profile* of length 1..unbounded
    enum ns3__H264Profile*               H264ProfilesSupported          1;
};

/// "http://www.onvif.org/ver10/schema":AudioSourceConfigurationOptions is a complexType.
struct ns3__AudioSourceConfigurationOptions
{
/// @brief Tokens of the audio source the configuration can be used for.
/// Size of array of ns3__ReferenceToken* is 1..unbounded
   $int                                  __sizeInputTokensAvailable     1;
/// Array ns3__ReferenceToken* of length 1..unbounded
    ns3__ReferenceToken*                 InputTokensAvailable           1;
/// Element Extension of type "http://www.onvif.org/ver10/schema":AudioSourceOptionsExtension.
    struct ns3__AudioSourceOptionsExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":AudioSourceOptionsExtension is a complexType.
struct ns3__AudioSourceOptionsExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":AudioEncoderConfigurationOptions is a complexType.
struct ns3__AudioEncoderConfigurationOptions
{
/// @brief list of supported AudioEncoderConfigurations
/// Size of array of struct ns3__AudioEncoderConfigurationOption* is 0..unbounded
   $int                                  __sizeOptions                  0;
/// Array struct ns3__AudioEncoderConfigurationOption* of length 0..unbounded
    struct ns3__AudioEncoderConfigurationOption*  Options                        0;
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":AudioEncoderConfigurationOption is a complexType.
struct ns3__AudioEncoderConfigurationOption
{
/// @brief The enoding used for audio data (either G.711, G.726 or AAC)
/// Element Encoding of type "http://www.onvif.org/ver10/schema":AudioEncoding.
    enum ns3__AudioEncoding              Encoding                       1;	///< Required element.
/// @brief List of supported bitrates in kbps for the specified Encoding
/// Element BitrateList of type "http://www.onvif.org/ver10/schema":IntList.
    struct ns3__IntList*                 BitrateList                    1;	///< Required element.
/// @brief List of supported Sample Rates in kHz for the specified Encoding
/// Element SampleRateList of type "http://www.onvif.org/ver10/schema":IntList.
    struct ns3__IntList*                 SampleRateList                 1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":PTZFilter is a complexType.
struct ns3__PTZFilter
{
/// @brief True if the metadata stream shall contain the PTZ status (IDLE, MOVING or UNKNOWN)
/// Element Status of type xs:boolean.
    enum xsd__boolean                    Status                         1;	///< Required element.
/// @brief True if the metadata stream shall contain the PTZ position
/// Element Position of type xs:boolean.
    enum xsd__boolean                    Position                       1;	///< Required element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":EventSubscription is a complexType.
/// @brief Subcription handling in the same way as base notification subscription.
struct ns3__EventSubscription
{
/// Element Filter of type "http://docs.oasis-open.org/wsn/b-2":FilterType.
    struct ns4__FilterType*              Filter                         0;	///< Optional element.
    struct _ns3__EventSubscription_SubscriptionPolicy
    {
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
    }                                   *SubscriptionPolicy             0;	///< Optional element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":MetadataConfigurationOptions is a complexType.
struct ns3__MetadataConfigurationOptions
{
/// Element PTZStatusFilterOptions of type "http://www.onvif.org/ver10/schema":PTZStatusFilterOptions.
    struct ns3__PTZStatusFilterOptions*  PTZStatusFilterOptions         1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":PTZStatusFilterOptions is a complexType.
struct ns3__PTZStatusFilterOptions
{
/// @brief True if the device is able to stream pan or tilt status information.
/// Element PanTiltStatusSupported of type xs:boolean.
    enum xsd__boolean                    PanTiltStatusSupported         1;	///< Required element.
/// @brief True if the device is able to stream zoom status inforamtion.
/// Element ZoomStatusSupported of type xs:boolean.
    enum xsd__boolean                    ZoomStatusSupported            1;	///< Required element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// @brief True if the device is able to stream the pan or tilt position.
/// Element PanTiltPositionSupported of type xs:boolean.
    enum xsd__boolean*                   PanTiltPositionSupported       0;	///< Optional element.
/// @brief True if the device is able to stream zoom position information.
/// Element ZoomPositionSupported of type xs:boolean.
    enum xsd__boolean*                   ZoomPositionSupported          0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":PTZStatusFilterOptionsExtension.
    struct ns3__PTZStatusFilterOptionsExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":PTZStatusFilterOptionsExtension is a complexType.
struct ns3__PTZStatusFilterOptionsExtension
{
/// TODO: <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":VideoOutputConfigurationOptions is a complexType.
struct ns3__VideoOutputConfigurationOptions
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":VideoDecoderConfigurationOptions is a complexType.
struct ns3__VideoDecoderConfigurationOptions
{
/// @brief If the device is able to decode Jpeg streams this element describes the supported codecs and configurations
/// Element JpegDecOptions of type "http://www.onvif.org/ver10/schema":JpegDecOptions.
    struct ns3__JpegDecOptions*          JpegDecOptions                 0;	///< Optional element.
/// @brief If the device is able to decode H.264 streams this element describes the supported codecs and configurations
/// Element H264DecOptions of type "http://www.onvif.org/ver10/schema":H264DecOptions.
    struct ns3__H264DecOptions*          H264DecOptions                 0;	///< Optional element.
/// @brief If the device is able to decode Mpeg4 streams this element describes the supported codecs and configurations
/// Element Mpeg4DecOptions of type "http://www.onvif.org/ver10/schema":Mpeg4DecOptions.
    struct ns3__Mpeg4DecOptions*         Mpeg4DecOptions                0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":VideoDecoderConfigurationOptionsExtension.
    struct ns3__VideoDecoderConfigurationOptionsExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":H264DecOptions is a complexType.
struct ns3__H264DecOptions
{
/// @brief List of supported H.264 Video Resolutions
/// Size of array of struct ns3__VideoResolution* is 1..unbounded
   $int                                  __sizeResolutionsAvailable     1;
/// Array struct ns3__VideoResolution* of length 1..unbounded
    struct ns3__VideoResolution*         ResolutionsAvailable           1;
/// @brief List of supported H264 Profiles (either baseline, main, extended or high)
/// Size of array of enum ns3__H264Profile* is 1..unbounded
   $int                                  __sizeSupportedH264Profiles    1;
/// Array enum ns3__H264Profile* of length 1..unbounded
    enum ns3__H264Profile*               SupportedH264Profiles          1;
/// @brief Supported H.264 bitrate range in kbps
/// Element SupportedInputBitrate of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                SupportedInputBitrate          1;	///< Required element.
/// @brief Supported H.264 framerate range in fps
/// Element SupportedFrameRate of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                SupportedFrameRate             1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":JpegDecOptions is a complexType.
struct ns3__JpegDecOptions
{
/// @brief List of supported Jpeg Video Resolutions
/// Size of array of struct ns3__VideoResolution* is 1..unbounded
   $int                                  __sizeResolutionsAvailable     1;
/// Array struct ns3__VideoResolution* of length 1..unbounded
    struct ns3__VideoResolution*         ResolutionsAvailable           1;
/// @brief Supported Jpeg bitrate range in kbps
/// Element SupportedInputBitrate of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                SupportedInputBitrate          1;	///< Required element.
/// @brief Supported Jpeg framerate range in fps
/// Element SupportedFrameRate of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                SupportedFrameRate             1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":Mpeg4DecOptions is a complexType.
struct ns3__Mpeg4DecOptions
{
/// @brief List of supported Mpeg4 Video Resolutions
/// Size of array of struct ns3__VideoResolution* is 1..unbounded
   $int                                  __sizeResolutionsAvailable     1;
/// Array struct ns3__VideoResolution* of length 1..unbounded
    struct ns3__VideoResolution*         ResolutionsAvailable           1;
/// @brief List of supported Mpeg4 Profiles (either SP or ASP)
/// Size of array of enum ns3__Mpeg4Profile* is 1..unbounded
   $int                                  __sizeSupportedMpeg4Profiles   1;
/// Array enum ns3__Mpeg4Profile* of length 1..unbounded
    enum ns3__Mpeg4Profile*              SupportedMpeg4Profiles         1;
/// @brief Supported Mpeg4 bitrate range in kbps
/// Element SupportedInputBitrate of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                SupportedInputBitrate          1;	///< Required element.
/// @brief Supported Mpeg4 framerate range in fps
/// Element SupportedFrameRate of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                SupportedFrameRate             1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":VideoDecoderConfigurationOptionsExtension is a complexType.
struct ns3__VideoDecoderConfigurationOptionsExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":AudioOutputConfigurationOptions is a complexType.
struct ns3__AudioOutputConfigurationOptions
{
/// @brief Tokens of the physical Audio outputs (typically one).
/// Size of array of ns3__ReferenceToken* is 1..unbounded
   $int                                  __sizeOutputTokensAvailable    1;
/// Array ns3__ReferenceToken* of length 1..unbounded
    ns3__ReferenceToken*                 OutputTokensAvailable          1;
/// @brief An <b>audio</b> channel MAY support different types of audio transmission. While for full duplex operation no special handling is required, in half duplex operation the transmission direction needs to be switched. The optional SendPrimacy parameter inside the AudioOutputConfiguration indicates which direction is currently active. An NVC can switch between different modes by setting the AudioOutputConfiguration.<br/> The following modes for the Send-Primacy are defined:<ul> <li>www.onvif.org/ver20/HalfDuplex/Server The server is allowed to send audio data to the client. The client shall not send audio data via the backchannel to the NVT in this mode.</li> <li>www.onvif.org/ver20/HalfDuplex/Client The client is allowed to send audio data via the backchannel to the server. The NVT shall not send audio data to the client in this mode.</li> <li>www.onvif.org/ver20/HalfDuplex/Auto It is up to the device how to deal with sending and receiving audio data.</li></ul> Acoustic echo cancellation is out of ONVIF scope.
/// Size of array of xsd__anyURI* is 0..unbounded
   $int                                  __sizeSendPrimacyOptions       0;
/// Array xsd__anyURI* of length 0..unbounded
    xsd__anyURI*                         SendPrimacyOptions             0;
/// @brief Minimum and maximum level range supported for this Output.
/// Element OutputLevelRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                OutputLevelRange               1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":AudioDecoderConfigurationOptions is a complexType.
struct ns3__AudioDecoderConfigurationOptions
{
/// @brief If the device is able to decode AAC encoded audio this section describes the supported configurations
/// Element AACDecOptions of type "http://www.onvif.org/ver10/schema":AACDecOptions.
    struct ns3__AACDecOptions*           AACDecOptions                  0;	///< Optional element.
/// @brief If the device is able to decode G711 encoded audio this section describes the supported configurations
/// Element G711DecOptions of type "http://www.onvif.org/ver10/schema":G711DecOptions.
    struct ns3__G711DecOptions*          G711DecOptions                 0;	///< Optional element.
/// @brief If the device is able to decode G726 encoded audio this section describes the supported configurations
/// Element G726DecOptions of type "http://www.onvif.org/ver10/schema":G726DecOptions.
    struct ns3__G726DecOptions*          G726DecOptions                 0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":AudioDecoderConfigurationOptionsExtension.
    struct ns3__AudioDecoderConfigurationOptionsExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":G711DecOptions is a complexType.
struct ns3__G711DecOptions
{
/// @brief List of supported bitrates in kbps
/// Element Bitrate of type "http://www.onvif.org/ver10/schema":IntList.
    struct ns3__IntList*                 Bitrate                        1;	///< Required element.
/// @brief List of supported sample rates in kHz
/// Element SampleRateRange of type "http://www.onvif.org/ver10/schema":IntList.
    struct ns3__IntList*                 SampleRateRange                1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":AACDecOptions is a complexType.
struct ns3__AACDecOptions
{
/// @brief List of supported bitrates in kbps
/// Element Bitrate of type "http://www.onvif.org/ver10/schema":IntList.
    struct ns3__IntList*                 Bitrate                        1;	///< Required element.
/// @brief List of supported sample rates in kHz
/// Element SampleRateRange of type "http://www.onvif.org/ver10/schema":IntList.
    struct ns3__IntList*                 SampleRateRange                1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":G726DecOptions is a complexType.
struct ns3__G726DecOptions
{
/// @brief List of supported bitrates in kbps
/// Element Bitrate of type "http://www.onvif.org/ver10/schema":IntList.
    struct ns3__IntList*                 Bitrate                        1;	///< Required element.
/// @brief List of supported sample rates in kHz
/// Element SampleRateRange of type "http://www.onvif.org/ver10/schema":IntList.
    struct ns3__IntList*                 SampleRateRange                1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":AudioDecoderConfigurationOptionsExtension is a complexType.
struct ns3__AudioDecoderConfigurationOptionsExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":MulticastConfiguration is a complexType.
struct ns3__MulticastConfiguration
{
/// @brief The multicast address (if this address is set to 0 no multicast streaming is enaled)
/// Element Address of type "http://www.onvif.org/ver10/schema":IPAddress.
    struct ns3__IPAddress*               Address                        1;	///< Required element.
/// @brief The multicast port
/// Element Port of type xs:int.
    int                                  Port                           1;	///< Required element.
/// @brief The TTL value that should be used for the multicast stream
/// Element TTL of type xs:int.
    int                                  TTL                            1;	///< Required element.
/// @brief true if the streaming is persistant (shall restart after a reboot)
/// Element AutoStart of type xs:boolean.
    enum xsd__boolean                    AutoStart                      1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":StreamSetup is a complexType.
struct ns3__StreamSetup
{
/// @brief Defines if a multicast or unicast stream is requested
/// Element Stream of type "http://www.onvif.org/ver10/schema":StreamType.
    enum ns3__StreamType                 Stream                         1;	///< Required element.
/// Element Transport of type "http://www.onvif.org/ver10/schema":Transport.
    struct ns3__Transport*               Transport                      1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":Transport is a complexType.
struct ns3__Transport
{
/// @brief Defines the network protocol for streaming, either UDP=RTP/UDP, RTSP=RTP/RTSP/TCP or HTTP=RTP/RTSP/HTTP/TCP
/// Element Protocol of type "http://www.onvif.org/ver10/schema":TransportProtocol.
    enum ns3__TransportProtocol          Protocol                       1;	///< Required element.
/// @brief Optional element to describe further tunnel options. This element is normally not needed
/// Element Tunnel of type "http://www.onvif.org/ver10/schema":Transport.
    struct ns3__Transport*               Tunnel                         0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":MediaUri is a complexType.
struct ns3__MediaUri
{
/// @brief Stable Uri to be used for requesting the media stream
/// Element Uri of type xs:anyURI.
    xsd__anyURI                          Uri                            1;	///< Required element.
/// @brief Indicates if the Uri is only valid until the connection is established. The value shall be set to "false".
/// Element InvalidAfterConnect of type xs:boolean.
    enum xsd__boolean                    InvalidAfterConnect            1;	///< Required element.
/// @brief Indicates if the Uri is invalid after a reboot of the device. The value shall be set to "false".
/// Element InvalidAfterReboot of type xs:boolean.
    enum xsd__boolean                    InvalidAfterReboot             1;	///< Required element.
/// @brief Duration how long the Uri is valid. This parameter shall be set to PT0S to indicate that this stream URI is indefinitely valid even if the profile changes
/// Element Timeout of type xs:duration.
    xsd__duration                        Timeout                        1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":Scope is a complexType.
struct ns3__Scope
{
/// @brief Indicates if the scope is fixed or configurable.
/// Element ScopeDef of type "http://www.onvif.org/ver10/schema":ScopeDefinition.
    enum ns3__ScopeDefinition            ScopeDef                       1;	///< Required element.
/// @brief Scope item URI.
/// Element ScopeItem of type xs:anyURI.
    xsd__anyURI                          ScopeItem                      1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":NetworkInterfaceExtension is a complexType.
struct ns3__NetworkInterfaceExtension
{
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element InterfaceType of type "http://www.onvif.org/ver10/schema":IANA-IfTypes.
    ns3__IANA_IfTypes                    InterfaceType                  1;	///< Required element.
/// @brief Extension point prepared for future 802.3 configuration.
/// Size of array of struct ns3__Dot3Configuration* is 0..unbounded
   $int                                  __sizeDot3                     0;
/// Array struct ns3__Dot3Configuration* of length 0..unbounded
    struct ns3__Dot3Configuration*       Dot3                           0;
/// Size of array of struct ns3__Dot11Configuration* is 0..unbounded
   $int                                  __sizeDot11                    0;
/// Array struct ns3__Dot11Configuration* of length 0..unbounded
    struct ns3__Dot11Configuration*      Dot11                          0;
/// Element Extension of type "http://www.onvif.org/ver10/schema":NetworkInterfaceExtension2.
    struct ns3__NetworkInterfaceExtension2*  Extension                      0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":Dot3Configuration is a complexType.
struct ns3__Dot3Configuration
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":NetworkInterfaceExtension2 is a complexType.
struct ns3__NetworkInterfaceExtension2
{
/// TODO: <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":NetworkInterfaceLink is a complexType.
struct ns3__NetworkInterfaceLink
{
/// @brief Configured link settings.
/// Element AdminSettings of type "http://www.onvif.org/ver10/schema":NetworkInterfaceConnectionSetting.
    struct ns3__NetworkInterfaceConnectionSetting*  AdminSettings                  1;	///< Required element.
/// @brief Current active link settings.
/// Element OperSettings of type "http://www.onvif.org/ver10/schema":NetworkInterfaceConnectionSetting.
    struct ns3__NetworkInterfaceConnectionSetting*  OperSettings                   1;	///< Required element.
/// @brief Integer indicating interface type, for example: 6 is ethernet.
/// Element InterfaceType of type "http://www.onvif.org/ver10/schema":IANA-IfTypes.
    ns3__IANA_IfTypes                    InterfaceType                  1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":NetworkInterfaceConnectionSetting is a complexType.
struct ns3__NetworkInterfaceConnectionSetting
{
/// @brief Auto negotiation on/off.
/// Element AutoNegotiation of type xs:boolean.
    enum xsd__boolean                    AutoNegotiation                1;	///< Required element.
/// @brief Speed.
/// Element Speed of type xs:int.
    int                                  Speed                          1;	///< Required element.
/// @brief Duplex type, Half or Full.
/// Element Duplex of type "http://www.onvif.org/ver10/schema":Duplex.
    enum ns3__Duplex                     Duplex                         1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":NetworkInterfaceInfo is a complexType.
struct ns3__NetworkInterfaceInfo
{
/// @brief Network interface name, for example eth0.
/// Element Name of type xs:string.
    char*                                Name                           0;	///< Optional element.
/// @brief Network interface MAC address.
/// Element HwAddress of type "http://www.onvif.org/ver10/schema":HwAddress.
    ns3__HwAddress                       HwAddress                      1;	///< Required element.
/// @brief Maximum transmission unit.
/// Element MTU of type xs:int.
    int*                                 MTU                            0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":IPv6NetworkInterface is a complexType.
struct ns3__IPv6NetworkInterface
{
/// @brief Indicates whether or not IPv6 is enabled.
/// Element Enabled of type xs:boolean.
    enum xsd__boolean                    Enabled                        1;	///< Required element.
/// @brief IPv6 configuration.
/// Element Config of type "http://www.onvif.org/ver10/schema":IPv6Configuration.
    struct ns3__IPv6Configuration*       Config                         0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":IPv4NetworkInterface is a complexType.
struct ns3__IPv4NetworkInterface
{
/// @brief Indicates whether or not IPv4 is enabled.
/// Element Enabled of type xs:boolean.
    enum xsd__boolean                    Enabled                        1;	///< Required element.
/// @brief IPv4 configuration.
/// Element Config of type "http://www.onvif.org/ver10/schema":IPv4Configuration.
    struct ns3__IPv4Configuration*       Config                         1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":IPv4Configuration is a complexType.
struct ns3__IPv4Configuration
{
/// @brief List of manually added IPv4 addresses.
/// Size of array of struct ns3__PrefixedIPv4Address* is 0..unbounded
   $int                                  __sizeManual                   0;
/// Array struct ns3__PrefixedIPv4Address* of length 0..unbounded
    struct ns3__PrefixedIPv4Address*     Manual                         0;
/// @brief Link local address.
/// Element LinkLocal of type "http://www.onvif.org/ver10/schema":PrefixedIPv4Address.
    struct ns3__PrefixedIPv4Address*     LinkLocal                      0;	///< Optional element.
/// @brief IPv4 address configured by using DHCP.
/// Element FromDHCP of type "http://www.onvif.org/ver10/schema":PrefixedIPv4Address.
    struct ns3__PrefixedIPv4Address*     FromDHCP                       0;	///< Optional element.
/// @brief Indicates whether or not DHCP is used.
/// Element DHCP of type xs:boolean.
    enum xsd__boolean                    DHCP                           1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":IPv6Configuration is a complexType.
struct ns3__IPv6Configuration
{
/// @brief Indicates whether router advertisment is used.
/// Element AcceptRouterAdvert of type xs:boolean.
    enum xsd__boolean*                   AcceptRouterAdvert             0;	///< Optional element.
/// @brief DHCP configuration.
/// Element DHCP of type "http://www.onvif.org/ver10/schema":IPv6DHCPConfiguration.
    enum ns3__IPv6DHCPConfiguration      DHCP                           1;	///< Required element.
/// @brief List of manually entered IPv6 addresses.
/// Size of array of struct ns3__PrefixedIPv6Address* is 0..unbounded
   $int                                  __sizeManual                   0;
/// Array struct ns3__PrefixedIPv6Address* of length 0..unbounded
    struct ns3__PrefixedIPv6Address*     Manual                         0;
/// @brief List of link local IPv6 addresses.
/// Size of array of struct ns3__PrefixedIPv6Address* is 0..unbounded
   $int                                  __sizeLinkLocal                0;
/// Array struct ns3__PrefixedIPv6Address* of length 0..unbounded
    struct ns3__PrefixedIPv6Address*     LinkLocal                      0;
/// @brief List of IPv6 addresses configured by using DHCP.
/// Size of array of struct ns3__PrefixedIPv6Address* is 0..unbounded
   $int                                  __sizeFromDHCP                 0;
/// Array struct ns3__PrefixedIPv6Address* of length 0..unbounded
    struct ns3__PrefixedIPv6Address*     FromDHCP                       0;
/// @brief List of IPv6 addresses configured by using router advertisment.
/// Size of array of struct ns3__PrefixedIPv6Address* is 0..unbounded
   $int                                  __sizeFromRA                   0;
/// Array struct ns3__PrefixedIPv6Address* of length 0..unbounded
    struct ns3__PrefixedIPv6Address*     FromRA                         0;
/// Element Extension of type "http://www.onvif.org/ver10/schema":IPv6ConfigurationExtension.
    struct ns3__IPv6ConfigurationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":IPv6ConfigurationExtension is a complexType.
struct ns3__IPv6ConfigurationExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":NetworkProtocol is a complexType.
struct ns3__NetworkProtocol
{
/// @brief Network protocol type string.
/// Element Name of type "http://www.onvif.org/ver10/schema":NetworkProtocolType.
    enum ns3__NetworkProtocolType        Name                           1;	///< Required element.
/// @brief Indicates if the protocol is enabled or not.
/// Element Enabled of type xs:boolean.
    enum xsd__boolean                    Enabled                        1;	///< Required element.
/// @brief The port that is used by the protocol.
/// Size of array of int* is 1..unbounded
   $int                                  __sizePort                     1;
/// Array int* of length 1..unbounded
    int*                                 Port                           1;
/// Element Extension of type "http://www.onvif.org/ver10/schema":NetworkProtocolExtension.
    struct ns3__NetworkProtocolExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":NetworkProtocolExtension is a complexType.
struct ns3__NetworkProtocolExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":NetworkHost is a complexType.
struct ns3__NetworkHost
{
/// @brief Network host type: IPv4, IPv6 or DNS.
/// Element Type of type "http://www.onvif.org/ver10/schema":NetworkHostType.
    enum ns3__NetworkHostType            Type                           1;	///< Required element.
/// @brief IPv4 address.
/// Element IPv4Address of type "http://www.onvif.org/ver10/schema":IPv4Address.
    ns3__IPv4Address*                    IPv4Address                    0;	///< Optional element.
/// @brief IPv6 address.
/// Element IPv6Address of type "http://www.onvif.org/ver10/schema":IPv6Address.
    ns3__IPv6Address*                    IPv6Address                    0;	///< Optional element.
/// @brief DNS name.
/// Element DNSname of type "http://www.onvif.org/ver10/schema":DNSName.
    ns3__DNSName*                        DNSname                        0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":NetworkHostExtension.
    struct ns3__NetworkHostExtension*    Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":NetworkHostExtension is a complexType.
struct ns3__NetworkHostExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":IPAddress is a complexType.
struct ns3__IPAddress
{
/// @brief Indicates if the address is an IPv4 or IPv6 address.
/// Element Type of type "http://www.onvif.org/ver10/schema":IPType.
    enum ns3__IPType                     Type                           1;	///< Required element.
/// @brief IPv4 address.
/// Element IPv4Address of type "http://www.onvif.org/ver10/schema":IPv4Address.
    ns3__IPv4Address*                    IPv4Address                    0;	///< Optional element.
/// @brief IPv6 address
/// Element IPv6Address of type "http://www.onvif.org/ver10/schema":IPv6Address.
    ns3__IPv6Address*                    IPv6Address                    0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":PrefixedIPv4Address is a complexType.
struct ns3__PrefixedIPv4Address
{
/// @brief IPv4 address
/// Element Address of type "http://www.onvif.org/ver10/schema":IPv4Address.
    ns3__IPv4Address                     Address                        1;	///< Required element.
/// @brief Prefix/submask length
/// Element PrefixLength of type xs:int.
    int                                  PrefixLength                   1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":PrefixedIPv6Address is a complexType.
struct ns3__PrefixedIPv6Address
{
/// @brief IPv6 address
/// Element Address of type "http://www.onvif.org/ver10/schema":IPv6Address.
    ns3__IPv6Address                     Address                        1;	///< Required element.
/// @brief Prefix/submask length
/// Element PrefixLength of type xs:int.
    int                                  PrefixLength                   1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":HostnameInformation is a complexType.
struct ns3__HostnameInformation
{
/// @brief Indicates whether the hostname is obtained from DHCP or not.
/// Element FromDHCP of type xs:boolean.
    enum xsd__boolean                    FromDHCP                       1;	///< Required element.
/// @brief Indicates the hostname.
/// Element Name of type xs:token.
    xsd__token                           Name                           0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":HostnameInformationExtension.
    struct ns3__HostnameInformationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":HostnameInformationExtension is a complexType.
struct ns3__HostnameInformationExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":DNSInformation is a complexType.
struct ns3__DNSInformation
{
/// @brief Indicates whether or not DNS information is retrieved from DHCP.
/// Element FromDHCP of type xs:boolean.
    enum xsd__boolean                    FromDHCP                       1;	///< Required element.
/// @brief Search domain.
/// Size of array of xsd__token* is 0..unbounded
   $int                                  __sizeSearchDomain             0;
/// Array xsd__token* of length 0..unbounded
    xsd__token*                          SearchDomain                   0;
/// @brief List of DNS addresses received from DHCP.
/// Size of array of struct ns3__IPAddress* is 0..unbounded
   $int                                  __sizeDNSFromDHCP              0;
/// Array struct ns3__IPAddress* of length 0..unbounded
    struct ns3__IPAddress*               DNSFromDHCP                    0;
/// @brief List of manually entered DNS addresses.
/// Size of array of struct ns3__IPAddress* is 0..unbounded
   $int                                  __sizeDNSManual                0;
/// Array struct ns3__IPAddress* of length 0..unbounded
    struct ns3__IPAddress*               DNSManual                      0;
/// Element Extension of type "http://www.onvif.org/ver10/schema":DNSInformationExtension.
    struct ns3__DNSInformationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":DNSInformationExtension is a complexType.
struct ns3__DNSInformationExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":NTPInformation is a complexType.
struct ns3__NTPInformation
{
/// @brief Indicates if NTP information is to be retrieved by using DHCP.
/// Element FromDHCP of type xs:boolean.
    enum xsd__boolean                    FromDHCP                       1;	///< Required element.
/// @brief List of NTP addresses retrieved by using DHCP.
/// Size of array of struct ns3__NetworkHost* is 0..unbounded
   $int                                  __sizeNTPFromDHCP              0;
/// Array struct ns3__NetworkHost* of length 0..unbounded
    struct ns3__NetworkHost*             NTPFromDHCP                    0;
/// @brief List of manually entered NTP addresses.
/// Size of array of struct ns3__NetworkHost* is 0..unbounded
   $int                                  __sizeNTPManual                0;
/// Array struct ns3__NetworkHost* of length 0..unbounded
    struct ns3__NetworkHost*             NTPManual                      0;
/// Element Extension of type "http://www.onvif.org/ver10/schema":NTPInformationExtension.
    struct ns3__NTPInformationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":NTPInformationExtension is a complexType.
struct ns3__NTPInformationExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":DynamicDNSInformation is a complexType.
struct ns3__DynamicDNSInformation
{
/// @brief Dynamic DNS type.
/// Element Type of type "http://www.onvif.org/ver10/schema":DynamicDNSType.
    enum ns3__DynamicDNSType             Type                           1;	///< Required element.
/// @brief DNS name.
/// Element Name of type "http://www.onvif.org/ver10/schema":DNSName.
    ns3__DNSName*                        Name                           0;	///< Optional element.
/// @brief Time to live.
/// Element TTL of type xs:duration.
    xsd__duration                        TTL                            0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":DynamicDNSInformationExtension.
    struct ns3__DynamicDNSInformationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":DynamicDNSInformationExtension is a complexType.
struct ns3__DynamicDNSInformationExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":NetworkInterfaceSetConfiguration is a complexType.
struct ns3__NetworkInterfaceSetConfiguration
{
/// @brief Indicates whether or not an interface is enabled.
/// Element Enabled of type xs:boolean.
    enum xsd__boolean*                   Enabled                        0;	///< Optional element.
/// @brief Link configuration.
/// Element Link of type "http://www.onvif.org/ver10/schema":NetworkInterfaceConnectionSetting.
    struct ns3__NetworkInterfaceConnectionSetting*  Link                           0;	///< Optional element.
/// @brief Maximum transmission unit.
/// Element MTU of type xs:int.
    int*                                 MTU                            0;	///< Optional element.
/// @brief IPv4 network interface configuration.
/// Element IPv4 of type "http://www.onvif.org/ver10/schema":IPv4NetworkInterfaceSetConfiguration.
    struct ns3__IPv4NetworkInterfaceSetConfiguration*  IPv4                           0;	///< Optional element.
/// @brief IPv6 network interface configuration.
/// Element IPv6 of type "http://www.onvif.org/ver10/schema":IPv6NetworkInterfaceSetConfiguration.
    struct ns3__IPv6NetworkInterfaceSetConfiguration*  IPv6                           0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":NetworkInterfaceSetConfigurationExtension.
    struct ns3__NetworkInterfaceSetConfigurationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":NetworkInterfaceSetConfigurationExtension is a complexType.
struct ns3__NetworkInterfaceSetConfigurationExtension
{
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Size of array of struct ns3__Dot3Configuration* is 0..unbounded
   $int                                  __sizeDot3                     0;
/// Array struct ns3__Dot3Configuration* of length 0..unbounded
    struct ns3__Dot3Configuration*       Dot3                           0;
/// Element Dot11 of type "http://www.onvif.org/ver10/schema":Dot11Configuration.
    struct ns3__Dot11Configuration*      Dot11                          0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":NetworkInterfaceSetConfigurationExtension2.
    struct ns3__NetworkInterfaceSetConfigurationExtension2*  Extension                      0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":IPv6NetworkInterfaceSetConfiguration is a complexType.
struct ns3__IPv6NetworkInterfaceSetConfiguration
{
/// @brief Indicates whether or not IPv6 is enabled.
/// Element Enabled of type xs:boolean.
    enum xsd__boolean*                   Enabled                        0;	///< Optional element.
/// @brief Indicates whether router advertisment is used.
/// Element AcceptRouterAdvert of type xs:boolean.
    enum xsd__boolean*                   AcceptRouterAdvert             0;	///< Optional element.
/// @brief List of manually added IPv6 addresses.
/// Size of array of struct ns3__PrefixedIPv6Address* is 0..unbounded
   $int                                  __sizeManual                   0;
/// Array struct ns3__PrefixedIPv6Address* of length 0..unbounded
    struct ns3__PrefixedIPv6Address*     Manual                         0;
/// @brief DHCP configuration.
/// Element DHCP of type "http://www.onvif.org/ver10/schema":IPv6DHCPConfiguration.
    enum ns3__IPv6DHCPConfiguration*     DHCP                           0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":IPv4NetworkInterfaceSetConfiguration is a complexType.
struct ns3__IPv4NetworkInterfaceSetConfiguration
{
/// @brief Indicates whether or not IPv4 is enabled.
/// Element Enabled of type xs:boolean.
    enum xsd__boolean*                   Enabled                        0;	///< Optional element.
/// @brief List of manually added IPv4 addresses.
/// Size of array of struct ns3__PrefixedIPv4Address* is 0..unbounded
   $int                                  __sizeManual                   0;
/// Array struct ns3__PrefixedIPv4Address* of length 0..unbounded
    struct ns3__PrefixedIPv4Address*     Manual                         0;
/// @brief Indicates whether or not DHCP is used.
/// Element DHCP of type xs:boolean.
    enum xsd__boolean*                   DHCP                           0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":NetworkGateway is a complexType.
struct ns3__NetworkGateway
{
/// @brief IPv4 address string.
/// Size of array of ns3__IPv4Address* is 0..unbounded
   $int                                  __sizeIPv4Address              0;
/// Array ns3__IPv4Address* of length 0..unbounded
    ns3__IPv4Address*                    IPv4Address                    0;
/// @brief IPv6 address string.
/// Size of array of ns3__IPv6Address* is 0..unbounded
   $int                                  __sizeIPv6Address              0;
/// Array ns3__IPv6Address* of length 0..unbounded
    ns3__IPv6Address*                    IPv6Address                    0;
};

/// "http://www.onvif.org/ver10/schema":NetworkZeroConfiguration is a complexType.
struct ns3__NetworkZeroConfiguration
{
/// @brief Unique identifier of network interface.
/// Element InterfaceToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  InterfaceToken                 1;	///< Required element.
/// @brief Indicates whether the zero-configuration is enabled or not.
/// Element Enabled of type xs:boolean.
    enum xsd__boolean                    Enabled                        1;	///< Required element.
/// @brief The zero-configuration IPv4 address(es)
/// Size of array of ns3__IPv4Address* is 0..unbounded
   $int                                  __sizeAddresses                0;
/// Array ns3__IPv4Address* of length 0..unbounded
    ns3__IPv4Address*                    Addresses                      0;
/// Element Extension of type "http://www.onvif.org/ver10/schema":NetworkZeroConfigurationExtension.
    struct ns3__NetworkZeroConfigurationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":NetworkZeroConfigurationExtension is a complexType.
struct ns3__NetworkZeroConfigurationExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":IPAddressFilter is a complexType.
struct ns3__IPAddressFilter
{
/// Element Type of type "http://www.onvif.org/ver10/schema":IPAddressFilterType.
    enum ns3__IPAddressFilterType        Type                           1;	///< Required element.
/// Size of array of struct ns3__PrefixedIPv4Address* is 0..unbounded
   $int                                  __sizeIPv4Address              0;
/// Array struct ns3__PrefixedIPv4Address* of length 0..unbounded
    struct ns3__PrefixedIPv4Address*     IPv4Address                    0;
/// Size of array of struct ns3__PrefixedIPv6Address* is 0..unbounded
   $int                                  __sizeIPv6Address              0;
/// Array struct ns3__PrefixedIPv6Address* of length 0..unbounded
    struct ns3__PrefixedIPv6Address*     IPv6Address                    0;
/// Element Extension of type "http://www.onvif.org/ver10/schema":IPAddressFilterExtension.
    struct ns3__IPAddressFilterExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":IPAddressFilterExtension is a complexType.
struct ns3__IPAddressFilterExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":Dot11Configuration is a complexType.
struct ns3__Dot11Configuration
{
/// Element SSID of type "http://www.onvif.org/ver10/schema":Dot11SSIDType.
    ns3__Dot11SSIDType                   SSID                           1;	///< Required element.
/// Element Mode of type "http://www.onvif.org/ver10/schema":Dot11StationMode.
    enum ns3__Dot11StationMode           Mode                           1;	///< Required element.
/// Element Alias of type "http://www.onvif.org/ver10/schema":Name.
    ns3__Name                            Alias                          1;	///< Required element.
/// Element Priority of type "http://www.onvif.org/ver10/schema":NetworkInterfaceConfigPriority.
    ns3__NetworkInterfaceConfigPriority  Priority                       1;	///< Required element.
/// Element Security of type "http://www.onvif.org/ver10/schema":Dot11SecurityConfiguration.
    struct ns3__Dot11SecurityConfiguration*  Security                       1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":Dot11SecurityConfiguration is a complexType.
struct ns3__Dot11SecurityConfiguration
{
/// Element Mode of type "http://www.onvif.org/ver10/schema":Dot11SecurityMode.
    enum ns3__Dot11SecurityMode          Mode                           1;	///< Required element.
/// Element Algorithm of type "http://www.onvif.org/ver10/schema":Dot11Cipher.
    enum ns3__Dot11Cipher*               Algorithm                      0;	///< Optional element.
/// Element PSK of type "http://www.onvif.org/ver10/schema":Dot11PSKSet.
    struct ns3__Dot11PSKSet*             PSK                            0;	///< Optional element.
/// Element Dot1X of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  Dot1X                          0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":Dot11SecurityConfigurationExtension.
    struct ns3__Dot11SecurityConfigurationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":Dot11SecurityConfigurationExtension is a complexType.
struct ns3__Dot11SecurityConfigurationExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":Dot11PSKSet is a complexType.
struct ns3__Dot11PSKSet
{
/// Element Key of type "http://www.onvif.org/ver10/schema":Dot11PSK.
    ns3__Dot11PSK*                       Key                            0;	///< Optional element.
/// Element Passphrase of type "http://www.onvif.org/ver10/schema":Dot11PSKPassphrase.
    ns3__Dot11PSKPassphrase              Passphrase                     0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":Dot11PSKSetExtension.
    struct ns3__Dot11PSKSetExtension*    Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":Dot11PSKSetExtension is a complexType.
struct ns3__Dot11PSKSetExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":NetworkInterfaceSetConfigurationExtension2 is a complexType.
struct ns3__NetworkInterfaceSetConfigurationExtension2
{
/// TODO: <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":Dot11Capabilities is a complexType.
struct ns3__Dot11Capabilities
{
/// Element TKIP of type xs:boolean.
    enum xsd__boolean                    TKIP                           1;	///< Required element.
/// Element ScanAvailableNetworks of type xs:boolean.
    enum xsd__boolean                    ScanAvailableNetworks          1;	///< Required element.
/// Element MultipleConfiguration of type xs:boolean.
    enum xsd__boolean                    MultipleConfiguration          1;	///< Required element.
/// Element AdHocStationMode of type xs:boolean.
    enum xsd__boolean                    AdHocStationMode               1;	///< Required element.
/// Element WEP of type xs:boolean.
    enum xsd__boolean                    WEP                            1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":Dot11Status is a complexType.
struct ns3__Dot11Status
{
/// Element SSID of type "http://www.onvif.org/ver10/schema":Dot11SSIDType.
    ns3__Dot11SSIDType                   SSID                           1;	///< Required element.
/// Element BSSID of type xs:string.
    char*                                BSSID                          0;	///< Optional element.
/// Element PairCipher of type "http://www.onvif.org/ver10/schema":Dot11Cipher.
    enum ns3__Dot11Cipher*               PairCipher                     0;	///< Optional element.
/// Element GroupCipher of type "http://www.onvif.org/ver10/schema":Dot11Cipher.
    enum ns3__Dot11Cipher*               GroupCipher                    0;	///< Optional element.
/// Element SignalStrength of type "http://www.onvif.org/ver10/schema":Dot11SignalStrength.
    enum ns3__Dot11SignalStrength*       SignalStrength                 0;	///< Optional element.
/// Element ActiveConfigAlias of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ActiveConfigAlias              1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":Dot11AvailableNetworks is a complexType.
struct ns3__Dot11AvailableNetworks
{
/// Element SSID of type "http://www.onvif.org/ver10/schema":Dot11SSIDType.
    ns3__Dot11SSIDType                   SSID                           1;	///< Required element.
/// Element BSSID of type xs:string.
    char*                                BSSID                          0;	///< Optional element.
/// Size of array of enum ns3__Dot11AuthAndMangementSuite* is 0..unbounded
   $int                                  __sizeAuthAndMangementSuite    0;
/// Array enum ns3__Dot11AuthAndMangementSuite* of length 0..unbounded
    enum ns3__Dot11AuthAndMangementSuite*  AuthAndMangementSuite          0;
/// Size of array of enum ns3__Dot11Cipher* is 0..unbounded
   $int                                  __sizePairCipher               0;
/// Array enum ns3__Dot11Cipher* of length 0..unbounded
    enum ns3__Dot11Cipher*               PairCipher                     0;
/// Size of array of enum ns3__Dot11Cipher* is 0..unbounded
   $int                                  __sizeGroupCipher              0;
/// Array enum ns3__Dot11Cipher* of length 0..unbounded
    enum ns3__Dot11Cipher*               GroupCipher                    0;
/// Element SignalStrength of type "http://www.onvif.org/ver10/schema":Dot11SignalStrength.
    enum ns3__Dot11SignalStrength*       SignalStrength                 0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":Dot11AvailableNetworksExtension.
    struct ns3__Dot11AvailableNetworksExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":Dot11AvailableNetworksExtension is a complexType.
struct ns3__Dot11AvailableNetworksExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":Capabilities is a complexType.
struct ns3__Capabilities
{
/// @brief Analytics capabilities
/// Element Analytics of type "http://www.onvif.org/ver10/schema":AnalyticsCapabilities.
    struct ns3__AnalyticsCapabilities*   Analytics                      0;	///< Optional element.
/// @brief Device capabilities
/// Element Device of type "http://www.onvif.org/ver10/schema":DeviceCapabilities.
    struct ns3__DeviceCapabilities*      Device                         0;	///< Optional element.
/// @brief Event capabilities
/// Element Events of type "http://www.onvif.org/ver10/schema":EventCapabilities.
    struct ns3__EventCapabilities*       Events                         0;	///< Optional element.
/// @brief Imaging capabilities
/// Element Imaging of type "http://www.onvif.org/ver10/schema":ImagingCapabilities.
    struct ns3__ImagingCapabilities*     Imaging                        0;	///< Optional element.
/// @brief Media capabilities
/// Element Media of type "http://www.onvif.org/ver10/schema":MediaCapabilities.
    struct ns3__MediaCapabilities*       Media                          0;	///< Optional element.
/// @brief PTZ capabilities
/// Element PTZ of type "http://www.onvif.org/ver10/schema":PTZCapabilities.
    struct ns3__PTZCapabilities*         PTZ                            0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":CapabilitiesExtension.
    struct ns3__CapabilitiesExtension*   Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":CapabilitiesExtension is a complexType.
struct ns3__CapabilitiesExtension
{
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element DeviceIO of type "http://www.onvif.org/ver10/schema":DeviceIOCapabilities.
    struct ns3__DeviceIOCapabilities*    DeviceIO                       0;	///< Optional element.
/// Element Display of type "http://www.onvif.org/ver10/schema":DisplayCapabilities.
    struct ns3__DisplayCapabilities*     Display                        0;	///< Optional element.
/// Element Recording of type "http://www.onvif.org/ver10/schema":RecordingCapabilities.
    struct ns3__RecordingCapabilities*   Recording                      0;	///< Optional element.
/// Element Search of type "http://www.onvif.org/ver10/schema":SearchCapabilities.
    struct ns3__SearchCapabilities*      Search                         0;	///< Optional element.
/// Element Replay of type "http://www.onvif.org/ver10/schema":ReplayCapabilities.
    struct ns3__ReplayCapabilities*      Replay                         0;	///< Optional element.
/// Element Receiver of type "http://www.onvif.org/ver10/schema":ReceiverCapabilities.
    struct ns3__ReceiverCapabilities*    Receiver                       0;	///< Optional element.
/// Element AnalyticsDevice of type "http://www.onvif.org/ver10/schema":AnalyticsDeviceCapabilities.
    struct ns3__AnalyticsDeviceCapabilities*  AnalyticsDevice                0;	///< Optional element.
/// Element Extensions of type "http://www.onvif.org/ver10/schema":CapabilitiesExtension2.
    struct ns3__CapabilitiesExtension2*  Extensions                     0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":CapabilitiesExtension2 is a complexType.
struct ns3__CapabilitiesExtension2
{
/// TODO: <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":AnalyticsCapabilities is a complexType.
struct ns3__AnalyticsCapabilities
{
/// @brief Analytics service URI.
/// Element XAddr of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// @brief Indicates whether or not rules are supported.
/// Element RuleSupport of type xs:boolean.
    enum xsd__boolean                    RuleSupport                    1;	///< Required element.
/// @brief Indicates whether or not modules are supported.
/// Element AnalyticsModuleSupport of type xs:boolean.
    enum xsd__boolean                    AnalyticsModuleSupport         1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":DeviceCapabilities is a complexType.
struct ns3__DeviceCapabilities
{
/// @brief Device service URI.
/// Element XAddr of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// @brief Network capabilities.
/// Element Network of type "http://www.onvif.org/ver10/schema":NetworkCapabilities.
    struct ns3__NetworkCapabilities*     Network                        0;	///< Optional element.
/// @brief System capabilities.
/// Element System of type "http://www.onvif.org/ver10/schema":SystemCapabilities.
    struct ns3__SystemCapabilities*      System                         0;	///< Optional element.
/// @brief I/O capabilities.
/// Element IO of type "http://www.onvif.org/ver10/schema":IOCapabilities.
    struct ns3__IOCapabilities*          IO                             0;	///< Optional element.
/// @brief Security capabilities.
/// Element Security of type "http://www.onvif.org/ver10/schema":SecurityCapabilities.
    struct ns3__SecurityCapabilities*    Security                       0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":DeviceCapabilitiesExtension.
    struct ns3__DeviceCapabilitiesExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":DeviceCapabilitiesExtension is a complexType.
struct ns3__DeviceCapabilitiesExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":EventCapabilities is a complexType.
struct ns3__EventCapabilities
{
/// @brief Event service URI.
/// Element XAddr of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// @brief Indicates whether or not WS Subscription policy is supported.
/// Element WSSubscriptionPolicySupport of type xs:boolean.
    enum xsd__boolean                    WSSubscriptionPolicySupport    1;	///< Required element.
/// @brief Indicates whether or not WS Pull Point is supported.
/// Element WSPullPointSupport of type xs:boolean.
    enum xsd__boolean                    WSPullPointSupport             1;	///< Required element.
/// @brief Indicates whether or not WS Pausable Subscription Manager Interface is supported.
/// Element WSPausableSubscriptionManagerInterfaceSupport of type xs:boolean.
    enum xsd__boolean                    WSPausableSubscriptionManagerInterfaceSupport 1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":IOCapabilities is a complexType.
struct ns3__IOCapabilities
{
/// @brief Number of input connectors.
/// Element InputConnectors of type xs:int.
    int*                                 InputConnectors                0;	///< Optional element.
/// @brief Number of relay outputs.
/// Element RelayOutputs of type xs:int.
    int*                                 RelayOutputs                   0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":IOCapabilitiesExtension.
    struct ns3__IOCapabilitiesExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":IOCapabilitiesExtension is a complexType.
struct ns3__IOCapabilitiesExtension
{
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Auxiliary of type xs:boolean.
    enum xsd__boolean*                   Auxiliary                      0;	///< Optional element.
/// Size of array of ns3__AuxiliaryData* is 0..unbounded
   $int                                  __sizeAuxiliaryCommands        0;
/// Array ns3__AuxiliaryData* of length 0..unbounded
    ns3__AuxiliaryData*                  AuxiliaryCommands              0;
/// Element Extension of type "http://www.onvif.org/ver10/schema":IOCapabilitiesExtension2.
    struct ns3__IOCapabilitiesExtension2*  Extension                      1;	///< Required element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":IOCapabilitiesExtension2 is a complexType.
struct ns3__IOCapabilitiesExtension2
{
/// TODO: <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":MediaCapabilities is a complexType.
struct ns3__MediaCapabilities
{
/// @brief Media service URI.
/// Element XAddr of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// @brief Streaming capabilities.
/// Element StreamingCapabilities of type "http://www.onvif.org/ver10/schema":RealTimeStreamingCapabilities.
    struct ns3__RealTimeStreamingCapabilities*  StreamingCapabilities          1;	///< Required element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Extension of type "http://www.onvif.org/ver10/schema":MediaCapabilitiesExtension.
    struct ns3__MediaCapabilitiesExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":MediaCapabilitiesExtension is a complexType.
struct ns3__MediaCapabilitiesExtension
{
/// Element ProfileCapabilities of type "http://www.onvif.org/ver10/schema":ProfileCapabilities.
    struct ns3__ProfileCapabilities*     ProfileCapabilities            1;	///< Required element.
/// TODO: <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":RealTimeStreamingCapabilities is a complexType.
struct ns3__RealTimeStreamingCapabilities
{
/// @brief Indicates whether or not RTP multicast is supported.
/// Element RTPMulticast of type xs:boolean.
    enum xsd__boolean*                   RTPMulticast                   0;	///< Optional element.
/// @brief Indicates whether or not RTP over TCP is supported.
/// Element RTP_TCP of type xs:boolean.
    enum xsd__boolean*                   RTP_USCORETCP                  0;	///< Optional element.
/// @brief Indicates whether or not RTP/RTSP/TCP is supported.
/// Element RTP_RTSP_TCP of type xs:boolean.
    enum xsd__boolean*                   RTP_USCORERTSP_USCORETCP       0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":RealTimeStreamingCapabilitiesExtension.
    struct ns3__RealTimeStreamingCapabilitiesExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":RealTimeStreamingCapabilitiesExtension is a complexType.
struct ns3__RealTimeStreamingCapabilitiesExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":ProfileCapabilities is a complexType.
struct ns3__ProfileCapabilities
{
/// @brief Maximum number of profiles.
/// Element MaximumNumberOfProfiles of type xs:int.
    int                                  MaximumNumberOfProfiles        1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":NetworkCapabilities is a complexType.
struct ns3__NetworkCapabilities
{
/// @brief Indicates whether or not IP filtering is supported.
/// Element IPFilter of type xs:boolean.
    enum xsd__boolean*                   IPFilter                       0;	///< Optional element.
/// @brief Indicates whether or not zeroconf is supported.
/// Element ZeroConfiguration of type xs:boolean.
    enum xsd__boolean*                   ZeroConfiguration              0;	///< Optional element.
/// @brief Indicates whether or not IPv6 is supported.
/// Element IPVersion6 of type xs:boolean.
    enum xsd__boolean*                   IPVersion6                     0;	///< Optional element.
/// @brief Indicates whether or not is supported.
/// Element DynDNS of type xs:boolean.
    enum xsd__boolean*                   DynDNS                         0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":NetworkCapabilitiesExtension.
    struct ns3__NetworkCapabilitiesExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":NetworkCapabilitiesExtension is a complexType.
struct ns3__NetworkCapabilitiesExtension
{
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Dot11Configuration of type xs:boolean.
    enum xsd__boolean*                   Dot11Configuration             0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":NetworkCapabilitiesExtension2.
    struct ns3__NetworkCapabilitiesExtension2*  Extension                      0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":NetworkCapabilitiesExtension2 is a complexType.
struct ns3__NetworkCapabilitiesExtension2
{
/// TODO: <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":SecurityCapabilities is a complexType.
struct ns3__SecurityCapabilities
{
/// @brief Indicates whether or not TLS 1.1 is supported.
/// Element TLS1.1 of type xs:boolean.
    enum xsd__boolean                    TLS1_x002e1                    1;	///< Required element.
/// @brief Indicates whether or not TLS 1.2 is supported.
/// Element TLS1.2 of type xs:boolean.
    enum xsd__boolean                    TLS1_x002e2                    1;	///< Required element.
/// @brief Indicates whether or not onboard key generation is supported.
/// Element OnboardKeyGeneration of type xs:boolean.
    enum xsd__boolean                    OnboardKeyGeneration           1;	///< Required element.
/// @brief Indicates whether or not access policy configuration is supported.
/// Element AccessPolicyConfig of type xs:boolean.
    enum xsd__boolean                    AccessPolicyConfig             1;	///< Required element.
/// @brief Indicates whether or not WS-Security X.509 token is supported.
/// Element X.509Token of type xs:boolean.
    enum xsd__boolean                    X_x002e509Token                1;	///< Required element.
/// @brief Indicates whether or not WS-Security SAML token is supported.
/// Element SAMLToken of type xs:boolean.
    enum xsd__boolean                    SAMLToken                      1;	///< Required element.
/// @brief Indicates whether or not WS-Security Kerberos token is supported.
/// Element KerberosToken of type xs:boolean.
    enum xsd__boolean                    KerberosToken                  1;	///< Required element.
/// @brief Indicates whether or not WS-Security REL token is supported.
/// Element RELToken of type xs:boolean.
    enum xsd__boolean                    RELToken                       1;	///< Required element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Extension of type "http://www.onvif.org/ver10/schema":SecurityCapabilitiesExtension.
    struct ns3__SecurityCapabilitiesExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":SecurityCapabilitiesExtension is a complexType.
struct ns3__SecurityCapabilitiesExtension
{
/// Element TLS1.0 of type xs:boolean.
    enum xsd__boolean                    TLS1_x002e0                    1;	///< Required element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":SecurityCapabilitiesExtension2.
    struct ns3__SecurityCapabilitiesExtension2*  Extension                      0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":SecurityCapabilitiesExtension2 is a complexType.
struct ns3__SecurityCapabilitiesExtension2
{
/// Element Dot1X of type xs:boolean.
    enum xsd__boolean                    Dot1X                          1;	///< Required element.
/// @brief EAP Methods supported by the device. The int values refer to the <a href="http://www.iana.org/assignments/eap-numbers/eap-numbers.xhtml">IANA EAP Registry</a>.
/// Size of array of int* is 0..unbounded
   $int                                  __sizeSupportedEAPMethod       0;
/// Array int* of length 0..unbounded
    int*                                 SupportedEAPMethod             0;
/// Element RemoteUserHandling of type xs:boolean.
    enum xsd__boolean                    RemoteUserHandling             1;	///< Required element.
/// TODO: <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":SystemCapabilities is a complexType.
struct ns3__SystemCapabilities
{
/// @brief Indicates whether or not WS Discovery resolve requests are supported.
/// Element DiscoveryResolve of type xs:boolean.
    enum xsd__boolean                    DiscoveryResolve               1;	///< Required element.
/// @brief Indicates whether or not WS-Discovery Bye is supported.
/// Element DiscoveryBye of type xs:boolean.
    enum xsd__boolean                    DiscoveryBye                   1;	///< Required element.
/// @brief Indicates whether or not remote discovery, see WS-Discovery, is supported.
/// Element RemoteDiscovery of type xs:boolean.
    enum xsd__boolean                    RemoteDiscovery                1;	///< Required element.
/// @brief Indicates whether or not system backup is supported.
/// Element SystemBackup of type xs:boolean.
    enum xsd__boolean                    SystemBackup                   1;	///< Required element.
/// @brief Indicates whether or not system logging is supported.
/// Element SystemLogging of type xs:boolean.
    enum xsd__boolean                    SystemLogging                  1;	///< Required element.
/// @brief Indicates whether or not firmware upgrade is supported.
/// Element FirmwareUpgrade of type xs:boolean.
    enum xsd__boolean                    FirmwareUpgrade                1;	///< Required element.
/// @brief Indicates supported ONVIF version(s).
/// Size of array of struct ns3__OnvifVersion* is 1..unbounded
   $int                                  __sizeSupportedVersions        1;
/// Array struct ns3__OnvifVersion* of length 1..unbounded
    struct ns3__OnvifVersion*            SupportedVersions              1;
/// Element Extension of type "http://www.onvif.org/ver10/schema":SystemCapabilitiesExtension.
    struct ns3__SystemCapabilitiesExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":SystemCapabilitiesExtension is a complexType.
struct ns3__SystemCapabilitiesExtension
{
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element HttpFirmwareUpgrade of type xs:boolean.
    enum xsd__boolean*                   HttpFirmwareUpgrade            0;	///< Optional element.
/// Element HttpSystemBackup of type xs:boolean.
    enum xsd__boolean*                   HttpSystemBackup               0;	///< Optional element.
/// Element HttpSystemLogging of type xs:boolean.
    enum xsd__boolean*                   HttpSystemLogging              0;	///< Optional element.
/// Element HttpSupportInformation of type xs:boolean.
    enum xsd__boolean*                   HttpSupportInformation         0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":SystemCapabilitiesExtension2.
    struct ns3__SystemCapabilitiesExtension2*  Extension                      0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":SystemCapabilitiesExtension2 is a complexType.
struct ns3__SystemCapabilitiesExtension2
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":OnvifVersion is a complexType.
struct ns3__OnvifVersion
{
/// @brief Major version number.
/// Element Major of type xs:int.
    int                                  Major                          1;	///< Required element.
/// @brief Two digit minor version number (e.g. 1 maps to "01" and 20 maps to "20").
/// Element Minor of type xs:int.
    int                                  Minor                          1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":ImagingCapabilities is a complexType.
struct ns3__ImagingCapabilities
{
/// @brief Imaging service URI.
/// Element XAddr of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":PTZCapabilities is a complexType.
struct ns3__PTZCapabilities
{
/// @brief PTZ service URI.
/// Element XAddr of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":DeviceIOCapabilities is a complexType.
struct ns3__DeviceIOCapabilities
{
/// Element XAddr of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// Element VideoSources of type xs:int.
    int                                  VideoSources                   1;	///< Required element.
/// Element VideoOutputs of type xs:int.
    int                                  VideoOutputs                   1;	///< Required element.
/// Element AudioSources of type xs:int.
    int                                  AudioSources                   1;	///< Required element.
/// Element AudioOutputs of type xs:int.
    int                                  AudioOutputs                   1;	///< Required element.
/// Element RelayOutputs of type xs:int.
    int                                  RelayOutputs                   1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":DisplayCapabilities is a complexType.
struct ns3__DisplayCapabilities
{
/// Element XAddr of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// @brief Indication that the SetLayout command supports only predefined layouts.
/// Element FixedLayout of type xs:boolean.
    enum xsd__boolean                    FixedLayout                    1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":RecordingCapabilities is a complexType.
struct ns3__RecordingCapabilities
{
/// Element XAddr of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// Element ReceiverSource of type xs:boolean.
    enum xsd__boolean                    ReceiverSource                 1;	///< Required element.
/// Element MediaProfileSource of type xs:boolean.
    enum xsd__boolean                    MediaProfileSource             1;	///< Required element.
/// Element DynamicRecordings of type xs:boolean.
    enum xsd__boolean                    DynamicRecordings              1;	///< Required element.
/// Element DynamicTracks of type xs:boolean.
    enum xsd__boolean                    DynamicTracks                  1;	///< Required element.
/// Element MaxStringLength of type xs:int.
    int                                  MaxStringLength                1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":SearchCapabilities is a complexType.
struct ns3__SearchCapabilities
{
/// Element XAddr of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// Element MetadataSearch of type xs:boolean.
    enum xsd__boolean                    MetadataSearch                 1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":ReplayCapabilities is a complexType.
struct ns3__ReplayCapabilities
{
/// @brief The address of the replay service.
/// Element XAddr of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":ReceiverCapabilities is a complexType.
struct ns3__ReceiverCapabilities
{
/// @brief The address of the receiver service.
/// Element XAddr of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// @brief Indicates whether the device can receive RTP multicast streams.
/// Element RTP_Multicast of type xs:boolean.
    enum xsd__boolean                    RTP_USCOREMulticast            1;	///< Required element.
/// @brief Indicates whether the device can receive RTP/TCP streams
/// Element RTP_TCP of type xs:boolean.
    enum xsd__boolean                    RTP_USCORETCP                  1;	///< Required element.
/// @brief Indicates whether the device can receive RTP/RTSP/TCP streams.
/// Element RTP_RTSP_TCP of type xs:boolean.
    enum xsd__boolean                    RTP_USCORERTSP_USCORETCP       1;	///< Required element.
/// @brief The maximum number of receivers supported by the device.
/// Element SupportedReceivers of type xs:int.
    int                                  SupportedReceivers             1;	///< Required element.
/// @brief The maximum allowed length for RTSP URIs.
/// Element MaximumRTSPURILength of type xs:int.
    int                                  MaximumRTSPURILength           1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":AnalyticsDeviceCapabilities is a complexType.
struct ns3__AnalyticsDeviceCapabilities
{
/// Element XAddr of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// @brief Obsolete property.
/// Element RuleSupport of type xs:boolean.
    enum xsd__boolean*                   RuleSupport                    0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":AnalyticsDeviceExtension.
    struct ns3__AnalyticsDeviceExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":AnalyticsDeviceExtension is a complexType.
struct ns3__AnalyticsDeviceExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":SystemLog is a complexType.
struct ns3__SystemLog
{
/// @brief The log information as attachment data.
/// Element Binary of type "http://www.onvif.org/ver10/schema":AttachmentData.
    struct ns3__AttachmentData*          Binary                         0;	///< Optional element.
/// @brief The log information as character data.
/// Element String of type xs:string.
    char*                                String                         0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":SupportInformation is a complexType.
struct ns3__SupportInformation
{
/// @brief The support information as attachment data.
/// Element Binary of type "http://www.onvif.org/ver10/schema":AttachmentData.
    struct ns3__AttachmentData*          Binary                         0;	///< Optional element.
/// @brief The support information as character data.
/// Element String of type xs:string.
    char*                                String                         0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":BinaryData is a complexType.
struct ns3__BinaryData
{
/// @brief base64 encoded binary data.
/// Element Data of type xs:base64Binary.
    struct xsd__base64Binary             Data                           1;	///< Required element.
/// Imported attribute reference xmime:contentType.
   @_xmime__contentType                  xmime__contentType             0;	///< Optional attribute.
};

/// "http://www.onvif.org/ver10/schema":AttachmentData is a complexType.
struct ns3__AttachmentData
{
/// Element reference "http://www.w3.org/2004/08/xop/include":Include.
    struct ns5__Include*                 ns5__Include                   1;	///< Required element.
/// Imported attribute reference xmime:contentType.
   @_xmime__contentType                  xmime__contentType             0;	///< Optional attribute.
};

/// "http://www.onvif.org/ver10/schema":BackupFile is a complexType.
struct ns3__BackupFile
{
/// Element Name of type xs:string.
    char*                                Name                           1;	///< Required element.
/// Element Data of type "http://www.onvif.org/ver10/schema":AttachmentData.
    struct ns3__AttachmentData*          Data                           1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":SystemLogUriList is a complexType.
struct ns3__SystemLogUriList
{
/// Size of array of struct ns3__SystemLogUri* is 0..unbounded
   $int                                  __sizeSystemLog                0;
/// Array struct ns3__SystemLogUri* of length 0..unbounded
    struct ns3__SystemLogUri*            SystemLog                      0;
};

/// "http://www.onvif.org/ver10/schema":SystemLogUri is a complexType.
struct ns3__SystemLogUri
{
/// Element Type of type "http://www.onvif.org/ver10/schema":SystemLogType.
    enum ns3__SystemLogType              Type                           1;	///< Required element.
/// Element Uri of type xs:anyURI.
    xsd__anyURI                          Uri                            1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":SystemDateTime is a complexType.
/// @brief General date time inforamtion returned by the GetSystemDateTime method.
struct ns3__SystemDateTime
{
/// @brief Indicates if the time is set manully or through NTP.
/// Element DateTimeType of type "http://www.onvif.org/ver10/schema":SetDateTimeType.
    enum ns3__SetDateTimeType            DateTimeType                   1;	///< Required element.
/// @brief Informative indicator whether daylight savings is currently on/off.
/// Element DaylightSavings of type xs:boolean.
    enum xsd__boolean                    DaylightSavings                1;	///< Required element.
/// @brief Timezone information in Posix format.
/// Element TimeZone of type "http://www.onvif.org/ver10/schema":TimeZone.
    struct ns3__TimeZone*                TimeZone                       0;	///< Optional element.
/// @brief Current system date and time in UTC format. This field is mandatory since version 2.0.
/// Element UTCDateTime of type "http://www.onvif.org/ver10/schema":DateTime.
    struct ns3__DateTime*                UTCDateTime                    0;	///< Optional element.
/// @brief Date and time in local format.
/// Element LocalDateTime of type "http://www.onvif.org/ver10/schema":DateTime.
    struct ns3__DateTime*                LocalDateTime                  0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":SystemDateTimeExtension.
    struct ns3__SystemDateTimeExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":SystemDateTimeExtension is a complexType.
struct ns3__SystemDateTimeExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":DateTime is a complexType.
struct ns3__DateTime
{
/// Element Time of type "http://www.onvif.org/ver10/schema":Time.
    struct ns3__Time*                    Time                           1;	///< Required element.
/// Element Date of type "http://www.onvif.org/ver10/schema":Date.
    struct ns3__Date*                    Date                           1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":Date is a complexType.
struct ns3__Date
{
/// Element Year of type xs:int.
    int                                  Year                           1;	///< Required element.
/// @brief Range is 1 to 12.
/// Element Month of type xs:int.
    int                                  Month                          1;	///< Required element.
/// @brief Range is 1 to 31.
/// Element Day of type xs:int.
    int                                  Day                            1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":Time is a complexType.
struct ns3__Time
{
/// @brief Range is 0 to 23.
/// Element Hour of type xs:int.
    int                                  Hour                           1;	///< Required element.
/// @brief Range is 0 to 59.
/// Element Minute of type xs:int.
    int                                  Minute                         1;	///< Required element.
/// @brief Range is 0 to 61 (typically 59).
/// Element Second of type xs:int.
    int                                  Second                         1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":TimeZone is a complexType.
/// @brief The TZ format is specified by POSIX, please refer to POSIX 1003.1 section 8.3<br/> Example: Europe, Paris TZ=CET-1CEST,M3.5.0/2,M10.5.0/3<br/> CET = designation for standard time when daylight saving is not in force<br/> -1 = offset in hours = negative so 1 hour east of Greenwich meridian<br/> CEST = designation when daylight saving is in force ("Central European Summer Time")<br/> , = no offset number between code and comma, so default to one hour ahead for daylight saving<br/> M3.5.0 = when daylight saving starts = the last Sunday in March (the "5th" week means the last in the month)<br/> /2, = the local time when the switch occurs = 2 a.m. in this case<br/> M10.5.0 = when daylight saving ends = the last Sunday in October.<br/> /3, = the local time when the switch occurs = 3 a.m. in this case<br/>
struct ns3__TimeZone
{
/// @brief Posix timezone string.
/// Element TZ of type xs:token.
    xsd__token                           TZ                             1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":RemoteUser is a complexType.
struct ns3__RemoteUser
{
/// Element Username of type xs:string.
    char*                                Username                       1;	///< Required element.
/// Element Password of type xs:string.
    char*                                Password                       0;	///< Optional element.
/// Element UseDerivedPassword of type xs:boolean.
    enum xsd__boolean                    UseDerivedPassword             1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":User is a complexType.
struct ns3__User
{
/// @brief Username string.
/// Element Username of type xs:string.
    char*                                Username                       1;	///< Required element.
/// @brief Password string.
/// Element Password of type xs:string.
    char*                                Password                       0;	///< Optional element.
/// @brief User level string.
/// Element UserLevel of type "http://www.onvif.org/ver10/schema":UserLevel.
    enum ns3__UserLevel                  UserLevel                      1;	///< Required element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":UserExtension.
    struct ns3__UserExtension*           Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":UserExtension is a complexType.
struct ns3__UserExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":CertificateGenerationParameters is a complexType.
struct ns3__CertificateGenerationParameters
{
/// Element CertificateID of type xs:token.
    xsd__token                           CertificateID                  0;	///< Optional element.
/// Element Subject of type xs:string.
    char*                                Subject                        0;	///< Optional element.
/// Element ValidNotBefore of type xs:token.
    xsd__token                           ValidNotBefore                 0;	///< Optional element.
/// Element ValidNotAfter of type xs:token.
    xsd__token                           ValidNotAfter                  0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":CertificateGenerationParametersExtension.
    struct ns3__CertificateGenerationParametersExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":CertificateGenerationParametersExtension is a complexType.
struct ns3__CertificateGenerationParametersExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":Certificate is a complexType.
struct ns3__Certificate
{
/// @brief Certificate id.
/// Element CertificateID of type xs:token.
    xsd__token                           CertificateID                  1;	///< Required element.
/// @brief base64 encoded DER representation of certificate.
/// Element Certificate of type "http://www.onvif.org/ver10/schema":BinaryData.
    struct ns3__BinaryData*              Certificate                    1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":CertificateStatus is a complexType.
struct ns3__CertificateStatus
{
/// @brief Certificate id.
/// Element CertificateID of type xs:token.
    xsd__token                           CertificateID                  1;	///< Required element.
/// @brief Indicates whether or not a certificate is used in a HTTPS configuration.
/// Element Status of type xs:boolean.
    enum xsd__boolean                    Status                         1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":CertificateWithPrivateKey is a complexType.
struct ns3__CertificateWithPrivateKey
{
/// Element CertificateID of type xs:token.
    xsd__token                           CertificateID                  0;	///< Optional element.
/// Element Certificate of type "http://www.onvif.org/ver10/schema":BinaryData.
    struct ns3__BinaryData*              Certificate                    1;	///< Required element.
/// Element PrivateKey of type "http://www.onvif.org/ver10/schema":BinaryData.
    struct ns3__BinaryData*              PrivateKey                     1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":CertificateInformation is a complexType.
struct ns3__CertificateInformation
{
/// Element CertificateID of type xs:token.
    xsd__token                           CertificateID                  1;	///< Required element.
/// Element IssuerDN of type xs:string.
    char*                                IssuerDN                       0;	///< Optional element.
/// Element SubjectDN of type xs:string.
    char*                                SubjectDN                      0;	///< Optional element.
/// Element KeyUsage of type "http://www.onvif.org/ver10/schema":CertificateUsage.
    struct ns3__CertificateUsage*        KeyUsage                       0;	///< Optional element.
/// Element ExtendedKeyUsage of type "http://www.onvif.org/ver10/schema":CertificateUsage.
    struct ns3__CertificateUsage*        ExtendedKeyUsage               0;	///< Optional element.
/// Element KeyLength of type xs:int.
    int*                                 KeyLength                      0;	///< Optional element.
/// Element Version of type xs:string.
    char*                                Version                        0;	///< Optional element.
/// Element SerialNum of type xs:string.
    char*                                SerialNum                      0;	///< Optional element.
/// Element SignatureAlgorithm of type xs:string.
    char*                                SignatureAlgorithm             0;	///< Optional element.
/// Element Validity of type "http://www.onvif.org/ver10/schema":DateTimeRange.
    struct ns3__DateTimeRange*           Validity                       0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":CertificateInformationExtension.
    struct ns3__CertificateInformationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":CertificateInformationExtension is a complexType.
struct ns3__CertificateInformationExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":Dot1XConfiguration is a complexType.
struct ns3__Dot1XConfiguration
{
/// Element Dot1XConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  Dot1XConfigurationToken        1;	///< Required element.
/// Element Identity of type xs:string.
    char*                                Identity                       1;	///< Required element.
/// Element AnonymousID of type xs:string.
    char*                                AnonymousID                    0;	///< Optional element.
/// @brief EAP Method type as defined in <a href="http://www.iana.org/assignments/eap-numbers/eap-numbers.xhtml">IANA EAP Registry</a>.
/// Element EAPMethod of type xs:int.
    int                                  EAPMethod                      1;	///< Required element.
/// Size of array of xsd__token* is 0..unbounded
   $int                                  __sizeCACertificateID          0;
/// Array xsd__token* of length 0..unbounded
    xsd__token*                          CACertificateID                0;
/// Element EAPMethodConfiguration of type "http://www.onvif.org/ver10/schema":EAPMethodConfiguration.
    struct ns3__EAPMethodConfiguration*  EAPMethodConfiguration         0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":Dot1XConfigurationExtension.
    struct ns3__Dot1XConfigurationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":Dot1XConfigurationExtension is a complexType.
struct ns3__Dot1XConfigurationExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":EAPMethodConfiguration is a complexType.
struct ns3__EAPMethodConfiguration
{
/// @brief Confgiuration information for TLS Method.
/// Element TLSConfiguration of type "http://www.onvif.org/ver10/schema":TLSConfiguration.
    struct ns3__TLSConfiguration*        TLSConfiguration               0;	///< Optional element.
/// @brief Password for those EAP Methods that require a password. The password shall never be returned on a get method.
/// Element Password of type xs:string.
    char*                                Password                       0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":EapMethodExtension.
    struct ns3__EapMethodExtension*      Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":EapMethodExtension is a complexType.
struct ns3__EapMethodExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":TLSConfiguration is a complexType.
struct ns3__TLSConfiguration
{
/// Element CertificateID of type xs:token.
    xsd__token                           CertificateID                  1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":GenericEapPwdConfigurationExtension is a complexType.
struct ns3__GenericEapPwdConfigurationExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":RelayOutputSettings is a complexType.
struct ns3__RelayOutputSettings
{
/// @brief 'Bistable' or 'Monostable' <ul> <li>Bistable After setting the state, the relay remains in this state.</li> <li>Monostable After setting the state, the relay returns to its idle state after the specified time.</li> </ul>
/// Element Mode of type "http://www.onvif.org/ver10/schema":RelayMode.
    enum ns3__RelayMode                  Mode                           1;	///< Required element.
/// @brief Time after which the relay returns to its idle state if it is in monostable mode. If the Mode field is set to bistable mode the value of the parameter can be ignored.
/// Element DelayTime of type xs:duration.
    xsd__duration                        DelayTime                      1;	///< Required element.
/// @brief 'open' or 'closed' <ul> <li>'open' means that the relay is open when the relay state is set to 'inactive' through the trigger command and closed when the state is set to 'active' through the same command.</li> <li>'closed' means that the relay is closed when the relay state is set to 'inactive' through the trigger command and open when the state is set to 'active' through the same command.</li> </ul>
/// Element IdleState of type "http://www.onvif.org/ver10/schema":RelayIdleState.
    enum ns3__RelayIdleState             IdleState                      1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":PTZNodeExtension is a complexType.
struct ns3__PTZNodeExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":PTZConfigurationExtension is a complexType.
struct ns3__PTZConfigurationExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":PTZConfigurationOptions is a complexType.
struct ns3__PTZConfigurationOptions
{
/// @brief A list of supported coordinate systems including their range limitations.
/// Element Spaces of type "http://www.onvif.org/ver10/schema":PTZSpaces.
    struct ns3__PTZSpaces*               Spaces                         1;	///< Required element.
/// @brief A timeout Range within which Timeouts are accepted by the PTZ Node.
/// Element PTZTimeout of type "http://www.onvif.org/ver10/schema":DurationRange.
    struct ns3__DurationRange*           PTZTimeout                     1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":PanTiltLimits is a complexType.
struct ns3__PanTiltLimits
{
/// @brief A range of pan tilt limits.
/// Element Range of type "http://www.onvif.org/ver10/schema":Space2DDescription.
    struct ns3__Space2DDescription*      Range                          1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":ZoomLimits is a complexType.
struct ns3__ZoomLimits
{
/// @brief A range of zoom limit
/// Element Range of type "http://www.onvif.org/ver10/schema":Space1DDescription.
    struct ns3__Space1DDescription*      Range                          1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":PTZSpaces is a complexType.
struct ns3__PTZSpaces
{
/// @brief The Generic Pan/Tilt Position space is provided by every PTZ node that supports absolute Pan/Tilt, since it does not relate to a specific physical range. Instead, the range should be defined as the full range of the PTZ unit normalized to the range -1 to 1 resulting in the following space description.
/// Size of array of struct ns3__Space2DDescription* is 0..unbounded
   $int                                  __sizeAbsolutePanTiltPositionSpace 0;
/// Array struct ns3__Space2DDescription* of length 0..unbounded
    struct ns3__Space2DDescription*      AbsolutePanTiltPositionSpace   0;
/// @brief The Generic Zoom Position Space is provided by every PTZ node that supports absolute Zoom, since it does not relate to a specific physical range. Instead, the range should be defined as the full range of the Zoom normalized to the range 0 (wide) to 1 (tele). There is no assumption about how the generic zoom range is mapped to magnification, FOV or other physical zoom dimension.
/// Size of array of struct ns3__Space1DDescription* is 0..unbounded
   $int                                  __sizeAbsoluteZoomPositionSpace 0;
/// Array struct ns3__Space1DDescription* of length 0..unbounded
    struct ns3__Space1DDescription*      AbsoluteZoomPositionSpace      0;
/// @brief The Generic Pan/Tilt translation space is provided by every PTZ node that supports relative Pan/Tilt, since it does not relate to a specific physical range. Instead, the range should be defined as the full positive and negative translation range of the PTZ unit normalized to the range -1 to 1, where positive translation would mean clockwise rotation or movement in right/up direction resulting in the following space description.
/// Size of array of struct ns3__Space2DDescription* is 0..unbounded
   $int                                  __sizeRelativePanTiltTranslationSpace 0;
/// Array struct ns3__Space2DDescription* of length 0..unbounded
    struct ns3__Space2DDescription*      RelativePanTiltTranslationSpace 0;
/// @brief The Generic Zoom Translation Space is provided by every PTZ node that supports relative Zoom, since it does not relate to a specific physical range. Instead, the corresponding absolute range should be defined as the full positive and negative translation range of the Zoom normalized to the range -1 to1, where a positive translation maps to a movement in TELE direction. The translation is signed to indicate direction (negative is to wide, positive is to tele). There is no assumption about how the generic zoom range is mapped to magnification, FOV or other physical zoom dimension. This results in the following space description.
/// Size of array of struct ns3__Space1DDescription* is 0..unbounded
   $int                                  __sizeRelativeZoomTranslationSpace 0;
/// Array struct ns3__Space1DDescription* of length 0..unbounded
    struct ns3__Space1DDescription*      RelativeZoomTranslationSpace   0;
/// @brief The generic Pan/Tilt velocity space shall be provided by every PTZ node, since it does not relate to a specific physical range. Instead, the range should be defined as a range of the PTZ units speed normalized to the range -1 to 1, where a positive velocity would map to clockwise rotation or movement in the right/up direction. A signed speed can be independently specified for the pan and tilt component resulting in the following space description.
/// Size of array of struct ns3__Space2DDescription* is 0..unbounded
   $int                                  __sizeContinuousPanTiltVelocitySpace 0;
/// Array struct ns3__Space2DDescription* of length 0..unbounded
    struct ns3__Space2DDescription*      ContinuousPanTiltVelocitySpace 0;
/// @brief The generic zoom velocity space specifies a zoom factor velocity without knowing the underlying physical model. The range should be normalized from -1 to 1, where a positive velocity would map to TELE direction. A generic zoom velocity space description resembles the following.
/// Size of array of struct ns3__Space1DDescription* is 0..unbounded
   $int                                  __sizeContinuousZoomVelocitySpace 0;
/// Array struct ns3__Space1DDescription* of length 0..unbounded
    struct ns3__Space1DDescription*      ContinuousZoomVelocitySpace    0;
/// @brief The speed space specifies the speed for a Pan/Tilt movement when moving to an absolute position or to a relative translation. In contrast to the velocity spaces, speed spaces do not contain any directional information. The speed of a combined Pan/Tilt movement is represented by a single non-negative scalar value.
/// Size of array of struct ns3__Space1DDescription* is 0..unbounded
   $int                                  __sizePanTiltSpeedSpace        0;
/// Array struct ns3__Space1DDescription* of length 0..unbounded
    struct ns3__Space1DDescription*      PanTiltSpeedSpace              0;
/// @brief The speed space specifies the speed for a Zoom movement when moving to an absolute position or to a relative translation. In contrast to the velocity spaces, speed spaces do not contain any directional information.
/// Size of array of struct ns3__Space1DDescription* is 0..unbounded
   $int                                  __sizeZoomSpeedSpace           0;
/// Array struct ns3__Space1DDescription* of length 0..unbounded
    struct ns3__Space1DDescription*      ZoomSpeedSpace                 0;
/// Element Extension of type "http://www.onvif.org/ver10/schema":PTZSpacesExtension.
    struct ns3__PTZSpacesExtension*      Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":PTZSpacesExtension is a complexType.
struct ns3__PTZSpacesExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":Space2DDescription is a complexType.
struct ns3__Space2DDescription
{
/// @brief A URI of coordinate systems.
/// Element URI of type xs:anyURI.
    xsd__anyURI                          URI                            1;	///< Required element.
/// @brief A range of x-axis.
/// Element XRange of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              XRange                         1;	///< Required element.
/// @brief A range of y-axis.
/// Element YRange of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              YRange                         1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":Space1DDescription is a complexType.
struct ns3__Space1DDescription
{
/// @brief A URI of coordinate systems.
/// Element URI of type xs:anyURI.
    xsd__anyURI                          URI                            1;	///< Required element.
/// @brief A range of x-axis.
/// Element XRange of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              XRange                         1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":Vector2D is a complexType.
struct ns3__Vector2D
{
/// Attribute x of type xs:float.
   @float                                x                              1;	///< Required attribute.
/// Attribute y of type xs:float.
   @float                                y                              1;	///< Required attribute.
/// @brief Pan/tilt coordinate space selector. The following options are defined:<ul> <li> http://www.onvif.org/ver10/tptz/PanTiltSpaces/PositionGenericSpace</li> <li> http://www.onvif.org/ver10/tptz/PanTiltSpaces/TranslationGenericSpace</li> <li> http://www.onvif.org/ver10/tptz/PanTiltSpaces/VelocityGenericSpace</li> <li> http://www.onvif.org/ver10/tptz/PanTiltSpaces/GenericSpeedSpace</li></ul>
/// Attribute space of type xs:anyURI.
   @xsd__anyURI                          space                          0;	///< Optional attribute.
};

/// "http://www.onvif.org/ver10/schema":Vector1D is a complexType.
struct ns3__Vector1D
{
/// Attribute x of type xs:float.
   @float                                x                              1;	///< Required attribute.
/// @brief Pan/tilt coordinate space selector. The following options are defined:<ul style=""> <li> http://www.onvif.org/ver10/tptz/PanTiltSpaces/PositionGenericSpace</li> <li> http://www.onvif.org/ver10/tptz/PanTiltSpaces/TranslationGenericSpace</li> <li> http://www.onvif.org/ver10/tptz/PanTiltSpaces/VelocityGenericSpace</li> <li> http://www.onvif.org/ver10/tptz/PanTiltSpaces/GenericSpeedSpace</li></ul>
/// Attribute space of type xs:anyURI.
   @xsd__anyURI                          space                          0;	///< Optional attribute.
};

/// "http://www.onvif.org/ver10/schema":PTZVector is a complexType.
struct ns3__PTZVector
{
/// @brief Pan and tilt position. The x component corresponds to pan and the y component to tilt.
/// Element PanTilt of type "http://www.onvif.org/ver10/schema":Vector2D.
    struct ns3__Vector2D*                PanTilt                        0;	///< Optional element.
/// @brief A zoom position.
/// Element Zoom of type "http://www.onvif.org/ver10/schema":Vector1D.
    struct ns3__Vector1D*                Zoom                           0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":PTZSpeed is a complexType.
struct ns3__PTZSpeed
{
/// @brief Pan and tilt speed. The x component corresponds to pan and the y component to tilt.
/// Element PanTilt of type "http://www.onvif.org/ver10/schema":Vector2D.
    struct ns3__Vector2D*                PanTilt                        0;	///< Optional element.
/// @brief A zoom speed.
/// Element Zoom of type "http://www.onvif.org/ver10/schema":Vector1D.
    struct ns3__Vector1D*                Zoom                           0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":PTZStatus is a complexType.
struct ns3__PTZStatus
{
/// @brief Specifies the absolute position of the PTZ unit together with the Space references. The default absolute spaces of the corresponding PTZ configuration MUST be referenced within the Position element.
/// Element Position of type "http://www.onvif.org/ver10/schema":PTZVector.
    struct ns3__PTZVector*               Position                       0;	///< Optional element.
/// @brief Indicates if the Pan/Tilt/Zoom device unit is currently moving, idle or in an unknown state.
/// Element MoveStatus of type "http://www.onvif.org/ver10/schema":PTZMoveStatus.
    struct ns3__PTZMoveStatus*           MoveStatus                     0;	///< Optional element.
/// @brief States a current PTZ error.
/// Element Error of type xs:string.
    char*                                Error                          0;	///< Optional element.
/// @brief Specifies the UTC time when this status was generated.
/// Element UtcTime of type xs:dateTime.
    time_t                               UtcTime                        1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":PTZPreset is a complexType.
struct ns3__PTZPreset
{
/// @brief A list of preset position name.
/// Element Name of type "http://www.onvif.org/ver10/schema":Name.
    ns3__Name                            Name                           0;	///< Optional element.
/// @brief A list of preset position.
/// Element PTZPosition of type "http://www.onvif.org/ver10/schema":PTZVector.
    struct ns3__PTZVector*               PTZPosition                    0;	///< Optional element.
/// @brief
/// Attribute token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @ns3__ReferenceToken                  token                          0;	///< Optional attribute.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":PTZMoveStatus is a complexType.
struct ns3__PTZMoveStatus
{
/// @brief
/// Element PanTilt of type "http://www.onvif.org/ver10/schema":MoveStatus.
    enum ns3__MoveStatus*                PanTilt                        0;	///< Optional element.
/// @brief
/// Element Zoom of type "http://www.onvif.org/ver10/schema":MoveStatus.
    enum ns3__MoveStatus*                Zoom                           0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":ImagingStatus is a complexType.
struct ns3__ImagingStatus
{
/// Element FocusStatus of type "http://www.onvif.org/ver10/schema":FocusStatus.
    struct ns3__FocusStatus*             FocusStatus                    1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":FocusStatus is a complexType.
struct ns3__FocusStatus
{
/// @brief Status of focus position.
/// Element Position of type xs:float.
    float                                Position                       1;	///< Required element.
/// @brief Status of focus MoveStatus.
/// Element MoveStatus of type "http://www.onvif.org/ver10/schema":MoveStatus.
    enum ns3__MoveStatus                 MoveStatus                     1;	///< Required element.
/// @brief Error status of focus.
/// Element Error of type xs:string.
    char*                                Error                          1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":FocusConfiguration is a complexType.
struct ns3__FocusConfiguration
{
/// Element AutoFocusMode of type "http://www.onvif.org/ver10/schema":AutoFocusMode.
    enum ns3__AutoFocusMode              AutoFocusMode                  1;	///< Required element.
/// Element DefaultSpeed of type xs:float.
    float                                DefaultSpeed                   1;	///< Required element.
/// @brief Parameter to set autofocus near limit (unit: meter).
/// Element NearLimit of type xs:float.
    float                                NearLimit                      1;	///< Required element.
/// @brief Parameter to set autofocus far limit (unit: meter). If set to 0.0, infinity will be used.
/// Element FarLimit of type xs:float.
    float                                FarLimit                       1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":ImagingSettings is a complexType.
struct ns3__ImagingSettings
{
/// @brief Enabled/disabled BLC mode (on/off).
/// Element BacklightCompensation of type "http://www.onvif.org/ver10/schema":BacklightCompensation.
    struct ns3__BacklightCompensation*   BacklightCompensation          0;	///< Optional element.
/// @brief Image brightness (unit unspecified).
/// Element Brightness of type xs:float.
    float*                               Brightness                     0;	///< Optional element.
/// @brief Color saturation of the image (unit unspecified).
/// Element ColorSaturation of type xs:float.
    float*                               ColorSaturation                0;	///< Optional element.
/// @brief Contrast of the image (unit unspecified).
/// Element Contrast of type xs:float.
    float*                               Contrast                       0;	///< Optional element.
/// @brief Exposure mode of the device.
/// Element Exposure of type "http://www.onvif.org/ver10/schema":Exposure.
    struct ns3__Exposure*                Exposure                       0;	///< Optional element.
/// @brief Focus configuration.
/// Element Focus of type "http://www.onvif.org/ver10/schema":FocusConfiguration.
    struct ns3__FocusConfiguration*      Focus                          0;	///< Optional element.
/// @brief Infrared Cutoff Filter settings.
/// Element IrCutFilter of type "http://www.onvif.org/ver10/schema":IrCutFilterMode.
    enum ns3__IrCutFilterMode*           IrCutFilter                    0;	///< Optional element.
/// @brief Sharpness of the Video image.
/// Element Sharpness of type xs:float.
    float*                               Sharpness                      0;	///< Optional element.
/// @brief WDR settings.
/// Element WideDynamicRange of type "http://www.onvif.org/ver10/schema":WideDynamicRange.
    struct ns3__WideDynamicRange*        WideDynamicRange               0;	///< Optional element.
/// @brief White balance settings.
/// Element WhiteBalance of type "http://www.onvif.org/ver10/schema":WhiteBalance.
    struct ns3__WhiteBalance*            WhiteBalance                   0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":ImagingSettingsExtension.
    struct ns3__ImagingSettingsExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":ImagingSettingsExtension is a complexType.
struct ns3__ImagingSettingsExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":Exposure is a complexType.
struct ns3__Exposure
{
/// @brief Exposure Mode <ul> <li>Auto Enabled the exposure algorithm on the NVT.</li> <li>Manual Disabled exposure algorithm on the NVT.</li> </ul>
/// Element Mode of type "http://www.onvif.org/ver10/schema":ExposureMode.
    enum ns3__ExposureMode               Mode                           1;	///< Required element.
/// @brief The exposure priority mode (low noise/framerate).
/// Element Priority of type "http://www.onvif.org/ver10/schema":ExposurePriority.
    enum ns3__ExposurePriority           Priority                       1;	///< Required element.
/// @brief Rectangular exposure mask.
/// Element Window of type "http://www.onvif.org/ver10/schema":Rectangle.
    struct ns3__Rectangle*               Window                         1;	///< Required element.
/// @brief Minimum value of exposure time range allowed to be used by the algorithm.
/// Element MinExposureTime of type xs:float.
    float                                MinExposureTime                1;	///< Required element.
/// @brief Maximum value of exposure time range allowed to be used by the algorithm.
/// Element MaxExposureTime of type xs:float.
    float                                MaxExposureTime                1;	///< Required element.
/// @brief Minimum value of the sensor gain range that is allowed to be used by the algorithm.
/// Element MinGain of type xs:float.
    float                                MinGain                        1;	///< Required element.
/// @brief Maximum value of the sensor gain range that is allowed to be used by the algorithm.
/// Element MaxGain of type xs:float.
    float                                MaxGain                        1;	///< Required element.
/// @brief Minimum value of the iris range allowed to be used by the algorithm.
/// Element MinIris of type xs:float.
    float                                MinIris                        1;	///< Required element.
/// @brief Maximum value of the iris range allowed to be used by the algorithm.
/// Element MaxIris of type xs:float.
    float                                MaxIris                        1;	///< Required element.
/// @brief The fixed exposure time used by the image sensor (s).
/// Element ExposureTime of type xs:float.
    float                                ExposureTime                   1;	///< Required element.
/// @brief The fixed gain used by the image sensor (dB).
/// Element Gain of type xs:float.
    float                                Gain                           1;	///< Required element.
/// @brief The fixed attenuation of input light affected by the iris (dB). 0dB maps to a fully opened iris.
/// Element Iris of type xs:float.
    float                                Iris                           1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":WideDynamicRange is a complexType.
struct ns3__WideDynamicRange
{
/// @brief White dynamic range (on/off)
/// Element Mode of type "http://www.onvif.org/ver10/schema":WideDynamicMode.
    enum ns3__WideDynamicMode            Mode                           1;	///< Required element.
/// @brief Optional level parameter (unitless)
/// Element Level of type xs:float.
    float                                Level                          1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":BacklightCompensation is a complexType.
struct ns3__BacklightCompensation
{
/// @brief Backlight compensation mode (on/off).
/// Element Mode of type "http://www.onvif.org/ver10/schema":BacklightCompensationMode.
    enum ns3__BacklightCompensationMode  Mode                           1;	///< Required element.
/// @brief Optional level parameter (unit unspecified).
/// Element Level of type xs:float.
    float                                Level                          1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":ImagingOptions is a complexType.
struct ns3__ImagingOptions
{
/// Element BacklightCompensation of type "http://www.onvif.org/ver10/schema":BacklightCompensationOptions.
    struct ns3__BacklightCompensationOptions*  BacklightCompensation          1;	///< Required element.
/// Element Brightness of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              Brightness                     1;	///< Required element.
/// Element ColorSaturation of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              ColorSaturation                1;	///< Required element.
/// Element Contrast of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              Contrast                       1;	///< Required element.
/// Element Exposure of type "http://www.onvif.org/ver10/schema":ExposureOptions.
    struct ns3__ExposureOptions*         Exposure                       1;	///< Required element.
/// Element Focus of type "http://www.onvif.org/ver10/schema":FocusOptions.
    struct ns3__FocusOptions*            Focus                          1;	///< Required element.
/// Size of array of enum ns3__IrCutFilterMode* is 1..unbounded
   $int                                  __sizeIrCutFilterModes         1;
/// Array enum ns3__IrCutFilterMode* of length 1..unbounded
    enum ns3__IrCutFilterMode*           IrCutFilterModes               1;
/// Element Sharpness of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              Sharpness                      1;	///< Required element.
/// Element WideDynamicRange of type "http://www.onvif.org/ver10/schema":WideDynamicRangeOptions.
    struct ns3__WideDynamicRangeOptions*  WideDynamicRange               1;	///< Required element.
/// Element WhiteBalance of type "http://www.onvif.org/ver10/schema":WhiteBalanceOptions.
    struct ns3__WhiteBalanceOptions*     WhiteBalance                   1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":WideDynamicRangeOptions is a complexType.
struct ns3__WideDynamicRangeOptions
{
/// Size of array of enum ns3__WideDynamicMode* is 1..unbounded
   $int                                  __sizeMode                     1;
/// Array enum ns3__WideDynamicMode* of length 1..unbounded
    enum ns3__WideDynamicMode*           Mode                           1;
/// Element Level of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              Level                          1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":BacklightCompensationOptions is a complexType.
struct ns3__BacklightCompensationOptions
{
/// Size of array of enum ns3__WideDynamicMode* is 1..unbounded
   $int                                  __sizeMode                     1;
/// Array enum ns3__WideDynamicMode* of length 1..unbounded
    enum ns3__WideDynamicMode*           Mode                           1;
/// Element Level of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              Level                          1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":FocusOptions is a complexType.
struct ns3__FocusOptions
{
/// Size of array of enum ns3__AutoFocusMode* is 0..unbounded
   $int                                  __sizeAutoFocusModes           0;
/// Array enum ns3__AutoFocusMode* of length 0..unbounded
    enum ns3__AutoFocusMode*             AutoFocusModes                 0;
/// Element DefaultSpeed of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              DefaultSpeed                   1;	///< Required element.
/// Element NearLimit of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              NearLimit                      1;	///< Required element.
/// Element FarLimit of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              FarLimit                       1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":ExposureOptions is a complexType.
struct ns3__ExposureOptions
{
/// Size of array of enum ns3__ExposureMode* is 1..unbounded
   $int                                  __sizeMode                     1;
/// Array enum ns3__ExposureMode* of length 1..unbounded
    enum ns3__ExposureMode*              Mode                           1;
/// Size of array of enum ns3__ExposurePriority* is 1..unbounded
   $int                                  __sizePriority                 1;
/// Array enum ns3__ExposurePriority* of length 1..unbounded
    enum ns3__ExposurePriority*          Priority                       1;
/// Element MinExposureTime of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              MinExposureTime                1;	///< Required element.
/// Element MaxExposureTime of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              MaxExposureTime                1;	///< Required element.
/// Element MinGain of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              MinGain                        1;	///< Required element.
/// Element MaxGain of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              MaxGain                        1;	///< Required element.
/// Element MinIris of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              MinIris                        1;	///< Required element.
/// Element MaxIris of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              MaxIris                        1;	///< Required element.
/// Element ExposureTime of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              ExposureTime                   1;	///< Required element.
/// Element Gain of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              Gain                           1;	///< Required element.
/// Element Iris of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              Iris                           1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":WhiteBalanceOptions is a complexType.
struct ns3__WhiteBalanceOptions
{
/// Size of array of enum ns3__WhiteBalanceMode* is 1..unbounded
   $int                                  __sizeMode                     1;
/// Array enum ns3__WhiteBalanceMode* of length 1..unbounded
    enum ns3__WhiteBalanceMode*          Mode                           1;
/// Element YrGain of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              YrGain                         1;	///< Required element.
/// Element YbGain of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              YbGain                         1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":FocusMove is a complexType.
struct ns3__FocusMove
{
/// @brief Parameters for the absolute focus control.
/// Element Absolute of type "http://www.onvif.org/ver10/schema":AbsoluteFocus.
    struct ns3__AbsoluteFocus*           Absolute                       0;	///< Optional element.
/// @brief Parameters for the relative focus control.
/// Element Relative of type "http://www.onvif.org/ver10/schema":RelativeFocus.
    struct ns3__RelativeFocus*           Relative                       0;	///< Optional element.
/// @brief Parameter for the continuous focus control.
/// Element Continuous of type "http://www.onvif.org/ver10/schema":ContinuousFocus.
    struct ns3__ContinuousFocus*         Continuous                     0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":AbsoluteFocus is a complexType.
struct ns3__AbsoluteFocus
{
/// @brief Position parameter for the absolute focus control.
/// Element Position of type xs:float.
    float                                Position                       1;	///< Required element.
/// @brief Speed parameter for the absolute focus control.
/// Element Speed of type xs:float.
    float*                               Speed                          0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":RelativeFocus is a complexType.
struct ns3__RelativeFocus
{
/// @brief Distance parameter for the relative focus control.
/// Element Distance of type xs:float.
    float                                Distance                       1;	///< Required element.
/// @brief Speed parameter for the relative focus control.
/// Element Speed of type xs:float.
    float*                               Speed                          0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":ContinuousFocus is a complexType.
struct ns3__ContinuousFocus
{
/// @brief Speed parameter for the Continuous focus control.
/// Element Speed of type xs:float.
    float                                Speed                          1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":MoveOptions is a complexType.
struct ns3__MoveOptions
{
/// Element Absolute of type "http://www.onvif.org/ver10/schema":AbsoluteFocusOptions.
    struct ns3__AbsoluteFocusOptions*    Absolute                       0;	///< Optional element.
/// Element Relative of type "http://www.onvif.org/ver10/schema":RelativeFocusOptions.
    struct ns3__RelativeFocusOptions*    Relative                       0;	///< Optional element.
/// Element Continuous of type "http://www.onvif.org/ver10/schema":ContinuousFocusOptions.
    struct ns3__ContinuousFocusOptions*  Continuous                     0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":AbsoluteFocusOptions is a complexType.
struct ns3__AbsoluteFocusOptions
{
/// @brief Valid ranges of the position.
/// Element Position of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              Position                       1;	///< Required element.
/// @brief Valid ranges of the speed.
/// Element Speed of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              Speed                          0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":RelativeFocusOptions is a complexType.
struct ns3__RelativeFocusOptions
{
/// @brief Valid ranges of the distance.
/// Element Distance of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              Distance                       1;	///< Required element.
/// @brief Valid ranges of the speed.
/// Element Speed of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              Speed                          1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":ContinuousFocusOptions is a complexType.
struct ns3__ContinuousFocusOptions
{
/// @brief Valid ranges of the speed.
/// Element Speed of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              Speed                          1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":WhiteBalance is a complexType.
struct ns3__WhiteBalance
{
/// @brief Auto whitebalancing mode (auto/manual).
/// Element Mode of type "http://www.onvif.org/ver10/schema":WhiteBalanceMode.
    enum ns3__WhiteBalanceMode           Mode                           1;	///< Required element.
/// @brief Rgain (unitless).
/// Element CrGain of type xs:float.
    float                                CrGain                         1;	///< Required element.
/// @brief Bgain (unitless).
/// Element CbGain of type xs:float.
    float                                CbGain                         1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":ImagingStatus20 is a complexType.
struct ns3__ImagingStatus20
{
/// @brief Status of focus.
/// Element FocusStatus20 of type "http://www.onvif.org/ver10/schema":FocusStatus20.
    struct ns3__FocusStatus20*           FocusStatus20                  0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":ImagingStatus20Extension.
    struct ns3__ImagingStatus20Extension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":ImagingStatus20Extension is a complexType.
struct ns3__ImagingStatus20Extension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":FocusStatus20 is a complexType.
struct ns3__FocusStatus20
{
/// @brief Status of focus position.
/// Element Position of type xs:float.
    float                                Position                       1;	///< Required element.
/// @brief Status of focus MoveStatus.
/// Element MoveStatus of type "http://www.onvif.org/ver10/schema":MoveStatus.
    enum ns3__MoveStatus                 MoveStatus                     1;	///< Required element.
/// @brief Error status of focus.
/// Element Error of type xs:string.
    char*                                Error                          0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":FocusStatus20Extension.
    struct ns3__FocusStatus20Extension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":FocusStatus20Extension is a complexType.
struct ns3__FocusStatus20Extension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":ImagingSettings20 is a complexType.
/// @brief Type describing the ImagingSettings of a VideoSource. The supported options and ranges can be obtained via the GetOptions command.
struct ns3__ImagingSettings20
{
/// @brief Enabled/disabled BLC mode (on/off).
/// Element BacklightCompensation of type "http://www.onvif.org/ver10/schema":BacklightCompensation20.
    struct ns3__BacklightCompensation20*  BacklightCompensation          0;	///< Optional element.
/// @brief Image brightness (unit unspecified).
/// Element Brightness of type xs:float.
    float*                               Brightness                     0;	///< Optional element.
/// @brief Color saturation of the image (unit unspecified).
/// Element ColorSaturation of type xs:float.
    float*                               ColorSaturation                0;	///< Optional element.
/// @brief Contrast of the image (unit unspecified).
/// Element Contrast of type xs:float.
    float*                               Contrast                       0;	///< Optional element.
/// @brief Exposure mode of the device.
/// Element Exposure of type "http://www.onvif.org/ver10/schema":Exposure20.
    struct ns3__Exposure20*              Exposure                       0;	///< Optional element.
/// @brief Focus configuration.
/// Element Focus of type "http://www.onvif.org/ver10/schema":FocusConfiguration20.
    struct ns3__FocusConfiguration20*    Focus                          0;	///< Optional element.
/// @brief Infrared Cutoff Filter settings.
/// Element IrCutFilter of type "http://www.onvif.org/ver10/schema":IrCutFilterMode.
    enum ns3__IrCutFilterMode*           IrCutFilter                    0;	///< Optional element.
/// @brief Sharpness of the Video image.
/// Element Sharpness of type xs:float.
    float*                               Sharpness                      0;	///< Optional element.
/// @brief WDR settings.
/// Element WideDynamicRange of type "http://www.onvif.org/ver10/schema":WideDynamicRange20.
    struct ns3__WideDynamicRange20*      WideDynamicRange               0;	///< Optional element.
/// @brief White balance settings.
/// Element WhiteBalance of type "http://www.onvif.org/ver10/schema":WhiteBalance20.
    struct ns3__WhiteBalance20*          WhiteBalance                   0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":ImagingSettingsExtension20.
    struct ns3__ImagingSettingsExtension20*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":ImagingSettingsExtension20 is a complexType.
struct ns3__ImagingSettingsExtension20
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":WideDynamicRange20 is a complexType.
/// @brief Type describing whether WDR mode is enabled or disabled (on/off).
struct ns3__WideDynamicRange20
{
/// @brief Wide dynamic range mode (on/off).
/// Element Mode of type "http://www.onvif.org/ver10/schema":WideDynamicMode.
    enum ns3__WideDynamicMode            Mode                           1;	///< Required element.
/// @brief Optional level parameter (unit unspecified).
/// Element Level of type xs:float.
    float*                               Level                          0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":BacklightCompensation20 is a complexType.
/// @brief Type describing whether BLC mode is enabled or disabled (on/off).
struct ns3__BacklightCompensation20
{
/// @brief Backlight compensation mode (on/off).
/// Element Mode of type "http://www.onvif.org/ver10/schema":BacklightCompensationMode.
    enum ns3__BacklightCompensationMode  Mode                           1;	///< Required element.
/// @brief Optional level parameter (unit unspecified).
/// Element Level of type xs:float.
    float*                               Level                          0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":Exposure20 is a complexType.
/// @brief Type describing the exposure settings.
struct ns3__Exposure20
{
/// @brief Exposure Mode <ul> <li>Auto Enabled the exposure algorithm on the device.</li> <li>Manual Disabled exposure algorithm on the device.</li> </ul>
/// Element Mode of type "http://www.onvif.org/ver10/schema":ExposureMode.
    enum ns3__ExposureMode               Mode                           1;	///< Required element.
/// @brief The exposure priority mode (low noise/framerate).
/// Element Priority of type "http://www.onvif.org/ver10/schema":ExposurePriority.
    enum ns3__ExposurePriority*          Priority                       0;	///< Optional element.
/// @brief Rectangular exposure mask.
/// Element Window of type "http://www.onvif.org/ver10/schema":Rectangle.
    struct ns3__Rectangle*               Window                         0;	///< Optional element.
/// @brief Minimum value of exposure time range allowed to be used by the algorithm.
/// Element MinExposureTime of type xs:float.
    float*                               MinExposureTime                0;	///< Optional element.
/// @brief Maximum value of exposure time range allowed to be used by the algorithm.
/// Element MaxExposureTime of type xs:float.
    float*                               MaxExposureTime                0;	///< Optional element.
/// @brief Minimum value of the sensor gain range that is allowed to be used by the algorithm.
/// Element MinGain of type xs:float.
    float*                               MinGain                        0;	///< Optional element.
/// @brief Maximum value of the sensor gain range that is allowed to be used by the algorithm.
/// Element MaxGain of type xs:float.
    float*                               MaxGain                        0;	///< Optional element.
/// @brief Minimum value of the iris range allowed to be used by the algorithm.
/// Element MinIris of type xs:float.
    float*                               MinIris                        0;	///< Optional element.
/// @brief Maximum value of the iris range allowed to be used by the algorithm.
/// Element MaxIris of type xs:float.
    float*                               MaxIris                        0;	///< Optional element.
/// @brief The fixed exposure time used by the image sensor (s).
/// Element ExposureTime of type xs:float.
    float*                               ExposureTime                   0;	///< Optional element.
/// @brief The fixed gain used by the image sensor (dB).
/// Element Gain of type xs:float.
    float*                               Gain                           0;	///< Optional element.
/// @brief The fixed attenuation of input light affected by the iris (dB). 0dB maps to a fully opened iris.
/// Element Iris of type xs:float.
    float*                               Iris                           0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":ImagingOptions20 is a complexType.
struct ns3__ImagingOptions20
{
/// @brief Valid range of Backlight Compensation.
/// Element BacklightCompensation of type "http://www.onvif.org/ver10/schema":BacklightCompensationOptions20.
    struct ns3__BacklightCompensationOptions20*  BacklightCompensation          0;	///< Optional element.
/// @brief Valid range of Brightness.
/// Element Brightness of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              Brightness                     0;	///< Optional element.
/// @brief Valid range of Color Saturation.
/// Element ColorSaturation of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              ColorSaturation                0;	///< Optional element.
/// @brief Valid range of Contrast.
/// Element Contrast of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              Contrast                       0;	///< Optional element.
/// @brief Valid range of Exposure.
/// Element Exposure of type "http://www.onvif.org/ver10/schema":ExposureOptions20.
    struct ns3__ExposureOptions20*       Exposure                       0;	///< Optional element.
/// @brief Valid range of Focus.
/// Element Focus of type "http://www.onvif.org/ver10/schema":FocusOptions20.
    struct ns3__FocusOptions20*          Focus                          0;	///< Optional element.
/// @brief Valid range of IrCutFilterModes.
/// Size of array of enum ns3__IrCutFilterMode* is 0..unbounded
   $int                                  __sizeIrCutFilterModes         0;
/// Array enum ns3__IrCutFilterMode* of length 0..unbounded
    enum ns3__IrCutFilterMode*           IrCutFilterModes               0;
/// @brief Valid range of Sharpness.
/// Element Sharpness of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              Sharpness                      0;	///< Optional element.
/// @brief Valid range of WideDynamicRange.
/// Element WideDynamicRange of type "http://www.onvif.org/ver10/schema":WideDynamicRangeOptions20.
    struct ns3__WideDynamicRangeOptions20*  WideDynamicRange               0;	///< Optional element.
/// @brief Valid range of WhiteBalance.
/// Element WhiteBalance of type "http://www.onvif.org/ver10/schema":WhiteBalanceOptions20.
    struct ns3__WhiteBalanceOptions20*   WhiteBalance                   0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":ImagingOptions20Extension.
    struct ns3__ImagingOptions20Extension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":ImagingOptions20Extension is a complexType.
struct ns3__ImagingOptions20Extension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":WideDynamicRangeOptions20 is a complexType.
struct ns3__WideDynamicRangeOptions20
{
/// Size of array of enum ns3__WideDynamicMode* is 1..unbounded
   $int                                  __sizeMode                     1;
/// Array enum ns3__WideDynamicMode* of length 1..unbounded
    enum ns3__WideDynamicMode*           Mode                           1;
/// Element Level of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              Level                          0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":BacklightCompensationOptions20 is a complexType.
struct ns3__BacklightCompensationOptions20
{
/// @brief 'ON' or 'OFF'
/// Size of array of enum ns3__BacklightCompensationMode* is 1..unbounded
   $int                                  __sizeMode                     1;
/// Array enum ns3__BacklightCompensationMode* of length 1..unbounded
    enum ns3__BacklightCompensationMode*  Mode                           1;
/// @brief Level range of BacklightCompensation.
/// Element Level of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              Level                          0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":ExposureOptions20 is a complexType.
struct ns3__ExposureOptions20
{
/// @brief Exposure Mode <ul> <li>Auto Enabled the exposure algorithm on the device.</li> <li>Manual Disabled exposure algorithm on the device.</li> </ul>
/// Size of array of enum ns3__ExposureMode* is 1..unbounded
   $int                                  __sizeMode                     1;
/// Array enum ns3__ExposureMode* of length 1..unbounded
    enum ns3__ExposureMode*              Mode                           1;
/// @brief The exposure priority mode (low noise/framerate).
/// Size of array of enum ns3__ExposurePriority* is 0..unbounded
   $int                                  __sizePriority                 0;
/// Array enum ns3__ExposurePriority* of length 0..unbounded
    enum ns3__ExposurePriority*          Priority                       0;
/// @brief Valid range of the Minimum ExposureTime.
/// Element MinExposureTime of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              MinExposureTime                0;	///< Optional element.
/// @brief Valid range of the Maximum ExposureTime.
/// Element MaxExposureTime of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              MaxExposureTime                0;	///< Optional element.
/// @brief Valid range of the Minimum Gain.
/// Element MinGain of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              MinGain                        0;	///< Optional element.
/// @brief Valid range of the Maximum Gain.
/// Element MaxGain of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              MaxGain                        0;	///< Optional element.
/// @brief Valid range of the Minimum Iris.
/// Element MinIris of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              MinIris                        0;	///< Optional element.
/// @brief Valid range of the Maximum Iris.
/// Element MaxIris of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              MaxIris                        0;	///< Optional element.
/// @brief Valid range of the ExposureTime.
/// Element ExposureTime of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              ExposureTime                   0;	///< Optional element.
/// @brief Valid range of the Gain.
/// Element Gain of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              Gain                           0;	///< Optional element.
/// @brief Valid range of the Iris.
/// Element Iris of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              Iris                           0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":MoveOptions20 is a complexType.
struct ns3__MoveOptions20
{
/// @brief Valid ranges for the absolute control.
/// Element Absolute of type "http://www.onvif.org/ver10/schema":AbsoluteFocusOptions.
    struct ns3__AbsoluteFocusOptions*    Absolute                       0;	///< Optional element.
/// @brief Valid ranges for the relative control.
/// Element Relative of type "http://www.onvif.org/ver10/schema":RelativeFocusOptions20.
    struct ns3__RelativeFocusOptions20*  Relative                       0;	///< Optional element.
/// @brief Valid ranges for the continuous control.
/// Element Continuous of type "http://www.onvif.org/ver10/schema":ContinuousFocusOptions.
    struct ns3__ContinuousFocusOptions*  Continuous                     0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":RelativeFocusOptions20 is a complexType.
struct ns3__RelativeFocusOptions20
{
/// @brief Valid ranges of the distance.
/// Element Distance of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              Distance                       1;	///< Required element.
/// @brief Valid ranges of the speed.
/// Element Speed of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              Speed                          0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":WhiteBalance20 is a complexType.
struct ns3__WhiteBalance20
{
/// @brief 'AUTO' or 'MANUAL'
/// Element Mode of type "http://www.onvif.org/ver10/schema":WhiteBalanceMode.
    enum ns3__WhiteBalanceMode           Mode                           1;	///< Required element.
/// @brief Rgain (unitless).
/// Element CrGain of type xs:float.
    float*                               CrGain                         0;	///< Optional element.
/// @brief Bgain (unitless).
/// Element CbGain of type xs:float.
    float*                               CbGain                         0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":WhiteBalance20Extension.
    struct ns3__WhiteBalance20Extension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":WhiteBalance20Extension is a complexType.
struct ns3__WhiteBalance20Extension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":FocusConfiguration20 is a complexType.
struct ns3__FocusConfiguration20
{
/// @brief Mode of auto fucus. <ul> <li>AUTO</li> <li>MANUAL</li> </ul>
/// Element AutoFocusMode of type "http://www.onvif.org/ver10/schema":AutoFocusMode.
    enum ns3__AutoFocusMode              AutoFocusMode                  1;	///< Required element.
/// Element DefaultSpeed of type xs:float.
    float*                               DefaultSpeed                   0;	///< Optional element.
/// @brief Parameter to set autofocus near limit (unit: meter).
/// Element NearLimit of type xs:float.
    float*                               NearLimit                      0;	///< Optional element.
/// @brief Parameter to set autofocus far limit (unit: meter).
/// Element FarLimit of type xs:float.
    float*                               FarLimit                       0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":FocusConfiguration20Extension.
    struct ns3__FocusConfiguration20Extension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":FocusConfiguration20Extension is a complexType.
struct ns3__FocusConfiguration20Extension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":WhiteBalanceOptions20 is a complexType.
struct ns3__WhiteBalanceOptions20
{
/// @brief Mode of WhiteBalance. <ul> <li>AUTO</li> <li>MANUAL</li> </ul>
/// Size of array of enum ns3__WhiteBalanceMode* is 1..unbounded
   $int                                  __sizeMode                     1;
/// Array enum ns3__WhiteBalanceMode* of length 1..unbounded
    enum ns3__WhiteBalanceMode*          Mode                           1;
/// Element YrGain of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              YrGain                         0;	///< Optional element.
/// Element YbGain of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              YbGain                         0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":WhiteBalanceOptions20Extension.
    struct ns3__WhiteBalanceOptions20Extension*  Extension                      0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":WhiteBalanceOptions20Extension is a complexType.
struct ns3__WhiteBalanceOptions20Extension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":FocusOptions20 is a complexType.
struct ns3__FocusOptions20
{
/// @brief Mode of Auto Focus. <ul> <li>AUTO</li> <li>MANUAL</li> </ul>
/// Size of array of enum ns3__AutoFocusMode* is 0..unbounded
   $int                                  __sizeAutoFocusModes           0;
/// Array enum ns3__AutoFocusMode* of length 0..unbounded
    enum ns3__AutoFocusMode*             AutoFocusModes                 0;
/// @brief Valid range of DefaultSpeed.
/// Element DefaultSpeed of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              DefaultSpeed                   0;	///< Optional element.
/// @brief Valid range of NearLimit.
/// Element NearLimit of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              NearLimit                      0;	///< Optional element.
/// @brief Valid range of FarLimit.
/// Element FarLimit of type "http://www.onvif.org/ver10/schema":FloatRange.
    struct ns3__FloatRange*              FarLimit                       0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":FocusOptions20Extension.
    struct ns3__FocusOptions20Extension*  Extension                      0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":FocusOptions20Extension is a complexType.
struct ns3__FocusOptions20Extension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":MessageExtension is a complexType.
struct ns3__MessageExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":ItemList is a complexType.
/// @brief List of parameters according to the corresponding ItemListDescription. Each item in the list shall have a unique name.
struct ns3__ItemList
{
/// @brief Value name pair as defined by the corresponding description.
/// Size of SimpleItem array is 0..unbounded
   $int                                  __sizeSimpleItem               0;
    struct _ns3__ItemList_SimpleItem
    {
/// @brief Item name.
/// Attribute Name of type xs:string.
   @char*                                Name                           1;	///< Required attribute.
/// @brief Item value. The type is defined in the corresponding description.
/// Attribute Value of type xs:anySimpleType.
   @xsd__anySimpleType                   Value                          1;	///< Required attribute.
    }                                   *SimpleItem                     0;
/// @brief Complex value structure.
/// Size of ElementItem array is 0..unbounded
   $int                                  __sizeElementItem              0;
    struct _ns3__ItemList_ElementItem
    {
/// TODO: <any namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
/// @brief Item name.
/// Attribute Name of type xs:string.
   @char*                                Name                           1;	///< Required attribute.
    }                                   *ElementItem                    0;
/// Element Extension of type "http://www.onvif.org/ver10/schema":ItemListExtension.
    struct ns3__ItemListExtension*       Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":ItemListExtension is a complexType.
struct ns3__ItemListExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":MessageDescription is a complexType.
struct ns3__MessageDescription
{
/// @brief Set of tokens producing this message. The list may only contain SimpleItemDescription items. The set of tokens identify the component within the WS-Endpoint, which is responsible for the producing the message.<br/> For analytics events the token set shall include the VideoSourceConfigurationToken, the VideoAnalyticsConfigurationToken and the name of the analytics module or rule.
/// Element Source of type "http://www.onvif.org/ver10/schema":ItemListDescription.
    struct ns3__ItemListDescription*     Source                         0;	///< Optional element.
/// @brief Describes optional message payload parameters that may be used as key. E.g. object IDs of tracked objects are conveyed as key.
/// Element Key of type "http://www.onvif.org/ver10/schema":ItemListDescription.
    struct ns3__ItemListDescription*     Key                            0;	///< Optional element.
/// @brief Describes the payload of the message.
/// Element Data of type "http://www.onvif.org/ver10/schema":ItemListDescription.
    struct ns3__ItemListDescription*     Data                           0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":MessageDescriptionExtension.
    struct ns3__MessageDescriptionExtension*  Extension                      0;	///< Optional element.
/// @brief Must be set to true when the described Message relates to a property. An alternative term of "property" is a "state" in contrast to a pure event, which contains relevant information for only a single point in time.<br/>Default is false.
/// Attribute IsProperty of type xs:boolean.
   @enum xsd__boolean*                   IsProperty                     0;	///< Optional attribute.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":MessageDescriptionExtension is a complexType.
struct ns3__MessageDescriptionExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":ItemListDescription is a complexType.
/// @brief Describes a list of items. Each item in the list shall have a unique name. The list is designed as linear structure without optional or unbounded elements. Use ElementItems only when complex structures are inevitable.
struct ns3__ItemListDescription
{
/// @brief Description of a simple item. The type must be of cathegory simpleType (xs:string, xs:integer, xs:float, ...).
/// Size of SimpleItemDescription array is 0..unbounded
   $int                                  __sizeSimpleItemDescription    0;
    struct _ns3__ItemListDescription_SimpleItemDescription
    {
/// @brief Item name. Must be unique within a list.
/// Attribute Name of type xs:string.
   @char*                                Name                           1;	///< Required attribute.
/// Attribute Type of type xs:QName.
   @_QName                               Type                           1;	///< Required attribute.
    }                                   *SimpleItemDescription          0;
/// @brief Description of a complex type. The Type must reference a defined type.
/// Size of ElementItemDescription array is 0..unbounded
   $int                                  __sizeElementItemDescription   0;
    struct _ns3__ItemListDescription_ElementItemDescription
    {
/// @brief Item name. Must be unique within a list.
/// Attribute Name of type xs:string.
   @char*                                Name                           1;	///< Required attribute.
/// @brief The type of the item. The Type must reference a defined type.
/// Attribute Type of type xs:QName.
   @_QName                               Type                           1;	///< Required attribute.
    }                                   *ElementItemDescription         0;
/// Element Extension of type "http://www.onvif.org/ver10/schema":ItemListDescriptionExtension.
    struct ns3__ItemListDescriptionExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":ItemListDescriptionExtension is a complexType.
struct ns3__ItemListDescriptionExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":Vector is a complexType.
struct ns3__Vector
{
/// Attribute x of type xs:float.
   @float*                               x                              0;	///< Optional attribute.
/// Attribute y of type xs:float.
   @float*                               y                              0;	///< Optional attribute.
};

/// "http://www.onvif.org/ver10/schema":Rectangle is a complexType.
struct ns3__Rectangle
{
/// Attribute bottom of type xs:float.
   @float*                               bottom                         0;	///< Optional attribute.
/// Attribute top of type xs:float.
   @float*                               top                            0;	///< Optional attribute.
/// Attribute right of type xs:float.
   @float*                               right                          0;	///< Optional attribute.
/// Attribute left of type xs:float.
   @float*                               left                           0;	///< Optional attribute.
};

/// "http://www.onvif.org/ver10/schema":Polygon is a complexType.
struct ns3__Polygon
{
/// Size of array of struct ns3__Vector* is 3..unbounded
   $int                                  __sizePoint                    3;
/// Array struct ns3__Vector* of length 3..unbounded
    struct ns3__Vector*                  Point                          3;
};

/// "http://www.onvif.org/ver10/schema":Polyline is a complexType.
struct ns3__Polyline
{
/// Size of array of struct ns3__Vector* is 2..unbounded
   $int                                  __sizePoint                    2;
/// Array struct ns3__Vector* of length 2..unbounded
    struct ns3__Vector*                  Point                          2;
};

/// "http://www.onvif.org/ver10/schema":Color is a complexType.
struct ns3__Color
{
/// Attribute X of type xs:float.
   @float                                X                              1;	///< Required attribute.
/// Attribute Y of type xs:float.
   @float                                Y                              1;	///< Required attribute.
/// Attribute Z of type xs:float.
   @float                                Z                              1;	///< Required attribute.
/// Attribute Colorspace of type xs:anyURI.
   @xsd__anyURI                          Colorspace                     0;	///< Optional attribute.
};

/// "http://www.onvif.org/ver10/schema":ColorCovariance is a complexType.
struct ns3__ColorCovariance
{
/// Attribute XX of type xs:float.
   @float                                XX                             1;	///< Required attribute.
/// Attribute YY of type xs:float.
   @float                                YY                             1;	///< Required attribute.
/// Attribute ZZ of type xs:float.
   @float                                ZZ                             1;	///< Required attribute.
/// Attribute XY of type xs:float.
   @float*                               XY                             0;	///< Optional attribute.
/// Attribute XZ of type xs:float.
   @float*                               XZ                             0;	///< Optional attribute.
/// Attribute YZ of type xs:float.
   @float*                               YZ                             0;	///< Optional attribute.
/// Attribute Colorspace of type xs:anyURI.
   @xsd__anyURI                          Colorspace                     0;	///< Optional attribute.
};

/// "http://www.onvif.org/ver10/schema":Appearance is a complexType.
struct ns3__Appearance
{
/// Element Transformation of type "http://www.onvif.org/ver10/schema":Transformation.
    struct ns3__Transformation*          Transformation                 0;	///< Optional element.
/// Element Shape of type "http://www.onvif.org/ver10/schema":ShapeDescriptor.
    struct ns3__ShapeDescriptor*         Shape                          0;	///< Optional element.
/// Element Color of type "http://www.onvif.org/ver10/schema":ColorDescriptor.
    struct ns3__ColorDescriptor*         Color                          0;	///< Optional element.
/// Element Class of type "http://www.onvif.org/ver10/schema":ClassDescriptor.
    struct ns3__ClassDescriptor*         Class                          0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":AppearanceExtension.
    struct ns3__AppearanceExtension*     Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":AppearanceExtension is a complexType.
struct ns3__AppearanceExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":ShapeDescriptor is a complexType.
struct ns3__ShapeDescriptor
{
/// Element BoundingBox of type "http://www.onvif.org/ver10/schema":Rectangle.
    struct ns3__Rectangle*               BoundingBox                    1;	///< Required element.
/// Element CenterOfGravity of type "http://www.onvif.org/ver10/schema":Vector.
    struct ns3__Vector*                  CenterOfGravity                1;	///< Required element.
/// Size of array of struct ns3__Polygon* is 0..unbounded
   $int                                  __sizePolygon                  0;
/// Array struct ns3__Polygon* of length 0..unbounded
    struct ns3__Polygon*                 Polygon                        0;
/// Element Extension of type "http://www.onvif.org/ver10/schema":ShapeDescriptorExtension.
    struct ns3__ShapeDescriptorExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":ShapeDescriptorExtension is a complexType.
struct ns3__ShapeDescriptorExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":ColorDescriptor is a complexType.
struct ns3__ColorDescriptor
{
/// Size of ColorCluster array is 0..unbounded
   $int                                  __sizeColorCluster             0;
    struct _ns3__ColorDescriptor_ColorCluster
    {
/// Element Color of type "http://www.onvif.org/ver10/schema":Color.
    struct ns3__Color*                   Color                          1;	///< Required element.
/// Element Weight of type xs:float.
    float*                               Weight                         0;	///< Optional element.
/// Element Covariance of type "http://www.onvif.org/ver10/schema":ColorCovariance.
    struct ns3__ColorCovariance*         Covariance                     0;	///< Optional element.
    }                                   *ColorCluster                   0;
/// Element Extension of type "http://www.onvif.org/ver10/schema":ColorDescriptorExtension.
    struct ns3__ColorDescriptorExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":ColorDescriptorExtension is a complexType.
struct ns3__ColorDescriptorExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":ClassDescriptor is a complexType.
struct ns3__ClassDescriptor
{
/// Size of ClassCandidate array is 0..unbounded
   $int                                  __sizeClassCandidate           0;
    struct _ns3__ClassDescriptor_ClassCandidate
    {
/// Element Type of type "http://www.onvif.org/ver10/schema":ClassType.
    enum ns3__ClassType                  Type                           1;	///< Required element.
/// Element Likelihood of type xs:float.
    float                                Likelihood                     1;	///< Required element.
    }                                   *ClassCandidate                 0;
/// Element Extension of type "http://www.onvif.org/ver10/schema":ClassDescriptorExtension.
    struct ns3__ClassDescriptorExtension*  Extension                      0;	///< Optional element.
};

/// "http://www.onvif.org/ver10/schema":ClassDescriptorExtension is a complexType.
struct ns3__ClassDescriptorExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":ObjectExtension is a complexType.
struct ns3__ObjectExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":Transformation is a complexType.
struct ns3__Transformation
{
/// Element Translate of type "http://www.onvif.org/ver10/schema":Vector.
    struct ns3__Vector*                  Translate                      0;	///< Optional element.
/// Element Scale of type "http://www.onvif.org/ver10/schema":Vector.
    struct ns3__Vector*                  Scale                          0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":TransformationExtension.
    struct ns3__TransformationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":TransformationExtension is a complexType.
struct ns3__TransformationExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":Frame is a complexType.
struct ns3__Frame
{
/// Element PTZStatus of type "http://www.onvif.org/ver10/schema":PTZStatus.
    struct ns3__PTZStatus*               PTZStatus                      0;	///< Optional element.
/// Element Transformation of type "http://www.onvif.org/ver10/schema":Transformation.
    struct ns3__Transformation*          Transformation                 0;	///< Optional element.
/// Size of array of struct ns3__Object* is 0..unbounded
   $int                                  __sizeObject                   0;
/// Array struct ns3__Object* of length 0..unbounded
    struct ns3__Object*                  Object                         0;
/// Element ObjectTree of type "http://www.onvif.org/ver10/schema":ObjectTree.
    struct ns3__ObjectTree*              ObjectTree                     0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":FrameExtension.
    struct ns3__FrameExtension*          Extension                      0;	///< Optional element.
/// Attribute UtcTime of type xs:dateTime.
   @time_t                               UtcTime                        1;	///< Required attribute.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":FrameExtension is a complexType.
struct ns3__FrameExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":Merge is a complexType.
struct ns3__Merge
{
/// Size of array of struct ns3__ObjectId* is 2..unbounded
   $int                                  __sizefrom                     2;
/// Array struct ns3__ObjectId* of length 2..unbounded
    struct ns3__ObjectId*                from                           2;
/// Element to of type "http://www.onvif.org/ver10/schema":ObjectId.
    struct ns3__ObjectId*                to                             1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":Split is a complexType.
struct ns3__Split
{
/// Element from of type "http://www.onvif.org/ver10/schema":ObjectId.
    struct ns3__ObjectId*                from                           1;	///< Required element.
/// Size of array of struct ns3__ObjectId* is 2..unbounded
   $int                                  __sizeto                       2;
/// Array struct ns3__ObjectId* of length 2..unbounded
    struct ns3__ObjectId*                to                             2;
};

/// "http://www.onvif.org/ver10/schema":Rename is a complexType.
struct ns3__Rename
{
/// Element from of type "http://www.onvif.org/ver10/schema":ObjectId.
    struct ns3__ObjectId*                from                           1;	///< Required element.
/// Element to of type "http://www.onvif.org/ver10/schema":ObjectId.
    struct ns3__ObjectId*                to                             1;	///< Required element.
};

/// "http://www.onvif.org/ver10/schema":ObjectId is a complexType.
struct ns3__ObjectId
{
/// Attribute ObjectId of type xs:integer.
   @xsd__integer                         ObjectId                       0;	///< Optional attribute.
};

/// "http://www.onvif.org/ver10/schema":Behaviour is a complexType.
struct ns3__Behaviour
{
    struct _ns3__Behaviour_Removed
    {
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
    }                                   *Removed                        0;	///< Optional element.
    struct _ns3__Behaviour_Idle
    {
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
    }                                   *Idle                           0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":BehaviourExtension.
    struct ns3__BehaviourExtension*      Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":BehaviourExtension is a complexType.
struct ns3__BehaviourExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":ObjectTree is a complexType.
struct ns3__ObjectTree
{
/// Size of array of struct ns3__Rename* is 0..unbounded
   $int                                  __sizeRename                   0;
/// Array struct ns3__Rename* of length 0..unbounded
    struct ns3__Rename*                  Rename                         0;
/// Size of array of struct ns3__Split* is 0..unbounded
   $int                                  __sizeSplit                    0;
/// Array struct ns3__Split* of length 0..unbounded
    struct ns3__Split*                   Split                          0;
/// Size of array of struct ns3__Merge* is 0..unbounded
   $int                                  __sizeMerge                    0;
/// Array struct ns3__Merge* of length 0..unbounded
    struct ns3__Merge*                   Merge                          0;
/// Size of array of struct ns3__ObjectId* is 0..unbounded
   $int                                  __sizeDelete                   0;
/// Array struct ns3__ObjectId* of length 0..unbounded
    struct ns3__ObjectId*                Delete                         0;
/// Element Extension of type "http://www.onvif.org/ver10/schema":ObjectTreeExtension.
    struct ns3__ObjectTreeExtension*     Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":ObjectTreeExtension is a complexType.
struct ns3__ObjectTreeExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":AnalyticsEngineConfiguration is a complexType.
struct ns3__AnalyticsEngineConfiguration
{
/// Size of array of struct ns3__Config* is 0..unbounded
   $int                                  __sizeAnalyticsModule          0;
/// Array struct ns3__Config* of length 0..unbounded
    struct ns3__Config*                  AnalyticsModule                0;
/// Element Extension of type "http://www.onvif.org/ver10/schema":AnalyticsEngineConfigurationExtension.
    struct ns3__AnalyticsEngineConfigurationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":AnalyticsEngineConfigurationExtension is a complexType.
struct ns3__AnalyticsEngineConfigurationExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":RuleEngineConfiguration is a complexType.
struct ns3__RuleEngineConfiguration
{
/// Size of array of struct ns3__Config* is 0..unbounded
   $int                                  __sizeRule                     0;
/// Array struct ns3__Config* of length 0..unbounded
    struct ns3__Config*                  Rule                           0;
/// Element Extension of type "http://www.onvif.org/ver10/schema":RuleEngineConfigurationExtension.
    struct ns3__RuleEngineConfigurationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":RuleEngineConfigurationExtension is a complexType.
struct ns3__RuleEngineConfigurationExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":Config is a complexType.
struct ns3__Config
{
/// @brief List of configuration parameters as defined in the correspding description.
/// Element Parameters of type "http://www.onvif.org/ver10/schema":ItemList.
    struct ns3__ItemList*                Parameters                     1;	///< Required element.
/// @brief Name of the configuration.
/// Attribute Name of type xs:string.
   @char*                                Name                           1;	///< Required attribute.
/// @brief Type of the configuration represented by a unique QName. The Type characterizes a ConfigDescription defining the Parameters.
/// Attribute Type of type xs:QName.
   @_QName                               Type                           1;	///< Required attribute.
};

/// "http://www.onvif.org/ver10/schema":ConfigDescription is a complexType.
struct ns3__ConfigDescription
{
/// @brief List describing the configuration parameters. The names of the parameters must be unique. If possible SimpleItems should be used to transport the information to ease parsing of dynamically defined messages by a client application.
/// Element Parameters of type "http://www.onvif.org/ver10/schema":ItemListDescription.
    struct ns3__ItemListDescription*     Parameters                     1;	///< Required element.
/// @brief The analytics modules and rule engine produce Events, which must be listed within the Analytics Module Description. In order to do so the structure of the Message is defined and consists of three groups: Source, Key, and Data. It is recommended to use SimpleItemDescriptions wherever applicable. The name of all Items must be unique within all Items contained in any group of this Message. Depending on the component multiple parameters or none may be needed to identify the component uniquely.
/// Size of Messages array is 0..unbounded
   $int                                  __sizeMessages                 0;
    struct _ns3__ConfigDescription_Messages
    {
/// INHERITED FROM ns3__MessageDescription:
/// @brief Set of tokens producing this message. The list may only contain SimpleItemDescription items. The set of tokens identify the component within the WS-Endpoint, which is responsible for the producing the message.<br/> For analytics events the token set shall include the VideoSourceConfigurationToken, the VideoAnalyticsConfigurationToken and the name of the analytics module or rule.
/// Element Source of type "http://www.onvif.org/ver10/schema":ItemListDescription.
    struct ns3__ItemListDescription*     Source                         0;	///< Optional element.
/// @brief Describes optional message payload parameters that may be used as key. E.g. object IDs of tracked objects are conveyed as key.
/// Element Key of type "http://www.onvif.org/ver10/schema":ItemListDescription.
    struct ns3__ItemListDescription*     Key                            0;	///< Optional element.
/// @brief Describes the payload of the message.
/// Element Data of type "http://www.onvif.org/ver10/schema":ItemListDescription.
    struct ns3__ItemListDescription*     Data                           0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":MessageDescriptionExtension.
    struct ns3__MessageDescriptionExtension*  Extension                      0;	///< Optional element.
/// @brief Must be set to true when the described Message relates to a property. An alternative term of "property" is a "state" in contrast to a pure event, which contains relevant information for only a single point in time.<br/>Default is false.
/// Attribute IsProperty of type xs:boolean.
   @enum xsd__boolean*                   IsProperty                     0;	///< Optional attribute.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns3__MessageDescription
/// @brief The ParentTopic labels the message (e.g. "nn:RuleEngine/LineCrossing"). The real message can extend the ParentTopic by for example the name of the instaniated rule (e.g. "nn:RuleEngine/LineCrossing/corssMyFirstLine"). Even without knowing the complete topic name, the subscriber will be able to distiguish the messages produced by different rule instances of the same type via the Source fields of the message. There the name of the rule instance, which produced the message, must be listed.
/// Element ParentTopic of type xs:string.
    char*                                ParentTopic                    1;	///< Required element.
    }                                   *Messages                       0;
/// Element Extension of type "http://www.onvif.org/ver10/schema":ConfigDescriptionExtension.
    struct ns3__ConfigDescriptionExtension*  Extension                      0;	///< Optional element.
/// @brief XML Type of the Configuration (e.g. "tt::LineDetector").
/// Attribute Name of type xs:QName.
   @_QName                               Name                           1;	///< Required attribute.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":ConfigDescriptionExtension is a complexType.
struct ns3__ConfigDescriptionExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":SupportedRules is a complexType.
struct ns3__SupportedRules
{
/// @brief Lists the location of all schemas that are referenced in the rules.
/// Size of array of xsd__anyURI* is 0..unbounded
   $int                                  __sizeRuleContentSchemaLocation 0;
/// Array xsd__anyURI* of length 0..unbounded
    xsd__anyURI*                         RuleContentSchemaLocation      0;
/// @brief List of rules supported by the Video Analytics configuration..
/// Size of array of struct ns3__ConfigDescription* is 0..unbounded
   $int                                  __sizeRuleDescription          0;
/// Array struct ns3__ConfigDescription* of length 0..unbounded
    struct ns3__ConfigDescription*       RuleDescription                0;
/// Element Extension of type "http://www.onvif.org/ver10/schema":SupportedRulesExtension.
    struct ns3__SupportedRulesExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":SupportedRulesExtension is a complexType.
struct ns3__SupportedRulesExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":SupportedAnalyticsModules is a complexType.
struct ns3__SupportedAnalyticsModules
{
/// @brief It optionally contains a list of URLs that provide the location of schema files. These schema files describe the types and elements used in the analytics module descriptions. If the analytics module descriptions reference types or elements of the ONVIF schema file, the ONVIF schema file MUST be explicitly listed.
/// Size of array of xsd__anyURI* is 0..unbounded
   $int                                  __sizeAnalyticsModuleContentSchemaLocation 0;
/// Array xsd__anyURI* of length 0..unbounded
    xsd__anyURI*                         AnalyticsModuleContentSchemaLocation 0;
/// Size of array of struct ns3__ConfigDescription* is 0..unbounded
   $int                                  __sizeAnalyticsModuleDescription 0;
/// Array struct ns3__ConfigDescription* of length 0..unbounded
    struct ns3__ConfigDescription*       AnalyticsModuleDescription     0;
/// Element Extension of type "http://www.onvif.org/ver10/schema":SupportedAnalyticsModulesExtension.
    struct ns3__SupportedAnalyticsModulesExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":SupportedAnalyticsModulesExtension is a complexType.
struct ns3__SupportedAnalyticsModulesExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":MetadataStream is a complexType.
struct ns3__MetadataStream
{
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_MetadataStream          0;
    struct __ns3__union_MetadataStream
    {
   $int                                  __union_MetadataStream         0;	///< Union _ns3__union_MetadataStream selector: set to SOAP_UNION__ns3__union_MetadataStream_<fieldname> or 0
    union _ns3__union_MetadataStream
    {
/// Element VideoAnalytics of type "http://www.onvif.org/ver10/schema":VideoAnalyticsStream.
    struct ns3__VideoAnalyticsStream*    VideoAnalytics                 1;	///< Required element.
/// Element PTZ of type "http://www.onvif.org/ver10/schema":PTZStream.
    struct ns3__PTZStream*               PTZ                            1;	///< Required element.
/// Element Event of type "http://www.onvif.org/ver10/schema":EventStream.
    struct ns3__EventStream*             Event                          1;	///< Required element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":MetadataStreamExtension.
    struct ns3__MetadataStreamExtension*  Extension                      1;	///< Required element.
    }                                    union_MetadataStream          ;
    }                                   *__union_MetadataStream        ;
//  END OF CHOICE
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":MetadataStreamExtension is a complexType.
struct ns3__MetadataStreamExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":VideoAnalyticsStream is a complexType.
struct ns3__VideoAnalyticsStream
{
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_VideoAnalyticsStream    0;
    struct __ns3__union_VideoAnalyticsStream
    {
   $int                                  __union_VideoAnalyticsStream   0;	///< Union _ns3__union_VideoAnalyticsStream selector: set to SOAP_UNION__ns3__union_VideoAnalyticsStream_<fieldname> or 0
/// Union for choice in type ns3__VideoAnalyticsStream
    union _ns3__union_VideoAnalyticsStream
    {
/// Element Frame of type "http://www.onvif.org/ver10/schema":Frame.
    struct ns3__Frame*                   Frame                          1;	///< Required element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":VideoAnalyticsStreamExtension.
    struct ns3__VideoAnalyticsStreamExtension*  Extension                      1;	///< Required element.
    }                                    union_VideoAnalyticsStream    ;
    }                                   *__union_VideoAnalyticsStream  ;
//  END OF CHOICE
};

/// "http://www.onvif.org/ver10/schema":VideoAnalyticsStreamExtension is a complexType.
struct ns3__VideoAnalyticsStreamExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":PTZStream is a complexType.
struct ns3__PTZStream
{
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_PTZStream               0;
    struct __ns3__union_PTZStream
    {
   $int                                  __union_PTZStream              0;	///< Union _ns3__union_PTZStream selector: set to SOAP_UNION__ns3__union_PTZStream_<fieldname> or 0
/// Union for choice in type ns3__PTZStream
    union _ns3__union_PTZStream
    {
/// Element PTZStatus of type "http://www.onvif.org/ver10/schema":PTZStatus.
    struct ns3__PTZStatus*               PTZStatus                      1;	///< Required element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":PTZStreamExtension.
    struct ns3__PTZStreamExtension*      Extension                      1;	///< Required element.
    }                                    union_PTZStream               ;
    }                                   *__union_PTZStream             ;
//  END OF CHOICE
};

/// "http://www.onvif.org/ver10/schema":PTZStreamExtension is a complexType.
struct ns3__PTZStreamExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":EventStream is a complexType.
struct ns3__EventStream
{
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_EventStream             0;
    struct __ns3__union_EventStream
    {
   $int                                  __union_EventStream            0;	///< Union _ns3__union_EventStream selector: set to SOAP_UNION__ns3__union_EventStream_<fieldname> or 0
/// Union for choice in type ns3__EventStream
    union _ns3__union_EventStream
    {
/// Element reference "http://docs.oasis-open.org/wsn/b-2":NotificationMessage.
    struct ns4__NotificationMessageHolderType*  ns4__NotificationMessage       1;	///< Required element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":EventStreamExtension.
    struct ns3__EventStreamExtension*    Extension                      1;	///< Required element.
    }                                    union_EventStream             ;
    }                                   *__union_EventStream           ;
//  END OF CHOICE
};

/// "http://www.onvif.org/ver10/schema":EventStreamExtension is a complexType.
struct ns3__EventStreamExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":PaneConfiguration is a complexType.
/// @brief Configuration of the streaming and coding settings of a Video window.
struct ns3__PaneConfiguration
{
/// @brief Optional name of the pane configuration.
/// Element PaneName of type xs:string.
    char*                                PaneName                       0;	///< Optional element.
/// @brief If the device has audio outputs, this element contains a pointer to the audio output that is associated with the pane. A client can retrieve the available audio outputs of a device using the GetAudioOutputs command of the DeviceIO service.
/// Element AudioOutputToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  AudioOutputToken               0;	///< Optional element.
/// @brief If the device has audio sources, this element contains a pointer to the audio source that is associated with this pane. The audio connection from a decoder device to the NVT is established using the backchannel mechanism. A client can retrieve the available audio sources of a device using the GetAudioSources command of the DeviceIO service.
/// Element AudioSourceToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  AudioSourceToken               0;	///< Optional element.
/// @brief The configuration of the audio encoder including codec, bitrate and sample rate.
/// Element AudioEncoderConfiguration of type "http://www.onvif.org/ver10/schema":AudioEncoderConfiguration.
    struct ns3__AudioEncoderConfiguration*  AudioEncoderConfiguration      0;	///< Optional element.
/// @brief A pointer to a Receiver that has the necessary information to receive data from a Transmitter. This Receiver can be connected and the network video decoder displays the received data on the specified outputs. A client can retrieve the available Receivers using the GetReceivers command of the Receiver Service.
/// Element ReceiverToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ReceiverToken                  0;	///< Optional element.
/// @brief A unique identifier in the display device.
/// Element Token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  Token                          1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":PaneLayout is a complexType.
/// @brief A pane layout describes one Video window of a display. It links a pane configuration to a region of the screen.
struct ns3__PaneLayout
{
/// @brief Reference to the configuration of the streaming and coding parameters.
/// Element Pane of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  Pane                           1;	///< Required element.
/// @brief Describes the location and size of the area on the monitor. The area coordinate values are espressed in normalized units [-1.0, 1.0].
/// Element Area of type "http://www.onvif.org/ver10/schema":Rectangle.
    struct ns3__Rectangle*               Area                           1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":Layout is a complexType.
/// @brief A layout describes a set of Video windows that are displayed simultaniously on a display.
struct ns3__Layout
{
/// @brief List of panes assembling the display layout.
/// Size of array of struct ns3__PaneLayout* is 1..unbounded
   $int                                  __sizePaneLayout               1;
/// Array struct ns3__PaneLayout* of length 1..unbounded
    struct ns3__PaneLayout*              PaneLayout                     1;
/// Element Extension of type "http://www.onvif.org/ver10/schema":LayoutExtension.
    struct ns3__LayoutExtension*         Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":LayoutExtension is a complexType.
struct ns3__LayoutExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":CodingCapabilities is a complexType.
/// @brief This type contains the Audio and Video coding capabilities of a display service.
struct ns3__CodingCapabilities
{
/// @brief If the device supports audio encoding this section describes the supported codecs and their configuration.
/// Element AudioEncodingCapabilities of type "http://www.onvif.org/ver10/schema":AudioEncoderConfigurationOptions.
    struct ns3__AudioEncoderConfigurationOptions*  AudioEncodingCapabilities      0;	///< Optional element.
/// @brief If the device supports audio decoding this section describes the supported codecs and their settings.
/// Element AudioDecodingCapabilities of type "http://www.onvif.org/ver10/schema":AudioDecoderConfigurationOptions.
    struct ns3__AudioDecoderConfigurationOptions*  AudioDecodingCapabilities      0;	///< Optional element.
/// @brief This section describes the supported video codesc and their configuration.
/// Element VideoDecodingCapabilities of type "http://www.onvif.org/ver10/schema":VideoDecoderConfigurationOptions.
    struct ns3__VideoDecoderConfigurationOptions*  VideoDecodingCapabilities      1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":LayoutOptions is a complexType.
/// @brief The options supported for a display layout.
struct ns3__LayoutOptions
{
/// @brief Lists the possible Pane Layouts of the Video Output
/// Size of array of struct ns3__PaneLayoutOptions* is 1..unbounded
   $int                                  __sizePaneLayoutOptions        1;
/// Array struct ns3__PaneLayoutOptions* of length 1..unbounded
    struct ns3__PaneLayoutOptions*       PaneLayoutOptions              1;
/// Element Extension of type "http://www.onvif.org/ver10/schema":LayoutOptionsExtension.
    struct ns3__LayoutOptionsExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":LayoutOptionsExtension is a complexType.
struct ns3__LayoutOptionsExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":PaneLayoutOptions is a complexType.
/// @brief Description of a pane layout describing a complete display layout.
struct ns3__PaneLayoutOptions
{
/// @brief List of areas assembling a layout. Coordinate values are in the range [-1.0, 1.0].
/// Size of array of struct ns3__Rectangle* is 1..unbounded
   $int                                  __sizeArea                     1;
/// Array struct ns3__Rectangle* of length 1..unbounded
    struct ns3__Rectangle*               Area                           1;
/// Element Extension of type "http://www.onvif.org/ver10/schema":PaneOptionExtension.
    struct ns3__PaneOptionExtension*     Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":PaneOptionExtension is a complexType.
struct ns3__PaneOptionExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":Receiver is a complexType.
/// @brief Description of a receiver, including its token and configuration.
struct ns3__Receiver
{
/// @brief Unique identifier of the receiver.
/// Element Token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  Token                          1;	///< Required element.
/// @brief Describes the configuration of the receiver.
/// Element Configuration of type "http://www.onvif.org/ver10/schema":ReceiverConfiguration.
    struct ns3__ReceiverConfiguration*   Configuration                  1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":ReceiverConfiguration is a complexType.
/// @brief Describes the configuration of a receiver.
struct ns3__ReceiverConfiguration
{
/// @brief The following connection modes are defined:
/// Element Mode of type "http://www.onvif.org/ver10/schema":ReceiverMode.
    enum ns3__ReceiverMode               Mode                           1;	///< Required element.
/// @brief Details of the URI to which the receiver should connect.
/// Element MediaUri of type xs:anyURI.
    xsd__anyURI                          MediaUri                       1;	///< Required element.
/// @brief Stream connection parameters.
/// Element StreamSetup of type "http://www.onvif.org/ver10/schema":StreamSetup.
    struct ns3__StreamSetup*             StreamSetup                    1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":ReceiverStateInformation is a complexType.
/// @brief Contains information about a receiver's current state.
struct ns3__ReceiverStateInformation
{
/// @brief The connection state of the receiver may have one of the following states:
/// Element State of type "http://www.onvif.org/ver10/schema":ReceiverState.
    enum ns3__ReceiverState              State                          1;	///< Required element.
/// @brief Indicates whether or not the receiver was created automatically.
/// Element AutoCreated of type xs:boolean.
    enum xsd__boolean                    AutoCreated                    1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":SourceReference is a complexType.
struct ns3__SourceReference
{
/// Element Token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  Token                          1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Attribute Type of type xs:anyURI.
   @xsd__anyURI                          Type                           0;	///< Default value="http://www.onvif.org/ver10/schema/Receiver".
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":DateTimeRange is a complexType.
struct ns3__DateTimeRange
{
/// Element From of type xs:dateTime.
    time_t                               From                           1;	///< Required element.
/// Element Until of type xs:dateTime.
    time_t                               Until                          1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":RecordingSummary is a complexType.
struct ns3__RecordingSummary
{
/// @brief The earliest point in time where there is recorded data on the device.
/// Element DataFrom of type xs:dateTime.
    time_t                               DataFrom                       1;	///< Required element.
/// @brief The most recent point in time where there is recorded data on the device.
/// Element DataUntil of type xs:dateTime.
    time_t                               DataUntil                      1;	///< Required element.
/// @brief The device contains at least this many recordings.
/// Element NumberRecordings of type xs:int.
    int                                  NumberRecordings               1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":SearchScope is a complexType.
/// @brief A structure for defining a limited scope when searching in recorded data.
struct ns3__SearchScope
{
/// @brief A list of sources that are included in the scope. If this list is included, only data from one of these sources shall be searched.
/// Size of array of struct ns3__SourceReference* is 0..unbounded
   $int                                  __sizeIncludedSources          0;
/// Array struct ns3__SourceReference* of length 0..unbounded
    struct ns3__SourceReference*         IncludedSources                0;
/// @brief A list of recordings that are included in the scope. If this list is included, only data from one of these recordings shall be searched.
/// Size of array of ns3__RecordingReference* is 0..unbounded
   $int                                  __sizeIncludedRecordings       0;
/// Array ns3__RecordingReference* of length 0..unbounded
    ns3__RecordingReference*             IncludedRecordings             0;
/// @brief An xpath expression used to specify what recordings to search. Only those recordings with an RecordingInformation structure that matches the filter shall be searched.
/// Element RecordingInformationFilter of type "http://www.onvif.org/ver10/schema":XPathExpression.
    ns3__XPathExpression                 RecordingInformationFilter     0;	///< Optional element.
/// @brief Extension point
/// Element Extension of type "http://www.onvif.org/ver10/schema":SearchScopeExtension.
    struct ns3__SearchScopeExtension*    Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":SearchScopeExtension is a complexType.
struct ns3__SearchScopeExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":PTZPositionFilter is a complexType.
struct ns3__PTZPositionFilter
{
/// @brief The lower boundary of the PTZ volume to look for.
/// Element MinPosition of type "http://www.onvif.org/ver10/schema":PTZVector.
    struct ns3__PTZVector*               MinPosition                    1;	///< Required element.
/// @brief The upper boundary of the PTZ volume to look for.
/// Element MaxPosition of type "http://www.onvif.org/ver10/schema":PTZVector.
    struct ns3__PTZVector*               MaxPosition                    1;	///< Required element.
/// @brief If true, search for when entering the specified PTZ volume.
/// Element EnterOrExit of type xs:boolean.
    enum xsd__boolean                    EnterOrExit                    1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":MetadataFilter is a complexType.
struct ns3__MetadataFilter
{
/// Element MetadataStreamFilter of type "http://www.onvif.org/ver10/schema":XPathExpression.
    ns3__XPathExpression                 MetadataStreamFilter           1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":FindRecordingResultList is a complexType.
struct ns3__FindRecordingResultList
{
/// @brief The state of the search when the result is returned. Indicates if there can be more results, or if the search is completed.
/// Element SearchState of type "http://www.onvif.org/ver10/schema":SearchState.
    enum ns3__SearchState                SearchState                    1;	///< Required element.
/// @brief A RecordingInformation structure for each found recording matching the search.
/// Size of array of struct ns3__RecordingInformation* is 0..unbounded
   $int                                  __sizeRecordingInformation     0;
/// Array struct ns3__RecordingInformation* of length 0..unbounded
    struct ns3__RecordingInformation*    RecordingInformation           0;
};

/// "http://www.onvif.org/ver10/schema":FindEventResultList is a complexType.
struct ns3__FindEventResultList
{
/// @brief The state of the search when the result is returned. Indicates if there can be more results, or if the search is completed.
/// Element SearchState of type "http://www.onvif.org/ver10/schema":SearchState.
    enum ns3__SearchState                SearchState                    1;	///< Required element.
/// @brief A FindEventResult structure for each found event matching the search.
/// Size of array of struct ns3__FindEventResult* is 0..unbounded
   $int                                  __sizeResult                   0;
/// Array struct ns3__FindEventResult* of length 0..unbounded
    struct ns3__FindEventResult*         Result                         0;
};

/// "http://www.onvif.org/ver10/schema":FindEventResult is a complexType.
struct ns3__FindEventResult
{
/// @brief The recording where this event was found. Empty string if no recording is associated with this event.
/// Element RecordingToken of type "http://www.onvif.org/ver10/schema":RecordingReference.
    ns3__RecordingReference              RecordingToken                 1;	///< Required element.
/// @brief A reference to the track where this event was found. Empty string if no track is associated with this event.
/// Element TrackToken of type "http://www.onvif.org/ver10/schema":TrackReference.
    ns3__TrackReference                  TrackToken                     1;	///< Required element.
/// @brief The time when the event occured.
/// Element Time of type xs:dateTime.
    time_t                               Time                           1;	///< Required element.
/// @brief The description of the event.
/// Element Event of type "http://docs.oasis-open.org/wsn/b-2":NotificationMessageHolderType.
    struct ns4__NotificationMessageHolderType*  Event                          1;	///< Required element.
/// @brief If true, indicates that the event is a virtual event generated for this particular search session to give the state of a property at the start time of the search.
/// Element StartStateEvent of type xs:boolean.
    enum xsd__boolean                    StartStateEvent                1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":FindPTZPositionResultList is a complexType.
struct ns3__FindPTZPositionResultList
{
/// @brief The state of the search when the result is returned. Indicates if there can be more results, or if the search is completed.
/// Element SearchState of type "http://www.onvif.org/ver10/schema":SearchState.
    enum ns3__SearchState                SearchState                    1;	///< Required element.
/// @brief A FindPTZPositionResult structure for each found PTZ position matching the search.
/// Size of array of struct ns3__FindPTZPositionResult* is 0..unbounded
   $int                                  __sizeResult                   0;
/// Array struct ns3__FindPTZPositionResult* of length 0..unbounded
    struct ns3__FindPTZPositionResult*   Result                         0;
};

/// "http://www.onvif.org/ver10/schema":FindPTZPositionResult is a complexType.
struct ns3__FindPTZPositionResult
{
/// @brief A reference to the recording containing the PTZ position.
/// Element RecordingToken of type "http://www.onvif.org/ver10/schema":RecordingReference.
    ns3__RecordingReference              RecordingToken                 1;	///< Required element.
/// @brief A reference to the metadata track containing the PTZ position.
/// Element TrackToken of type "http://www.onvif.org/ver10/schema":TrackReference.
    ns3__TrackReference                  TrackToken                     1;	///< Required element.
/// @brief The time when the PTZ position was valid.
/// Element Time of type xs:dateTime.
    time_t                               Time                           1;	///< Required element.
/// @brief The PTZ position.
/// Element Position of type "http://www.onvif.org/ver10/schema":PTZVector.
    struct ns3__PTZVector*               Position                       1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":FindMetadataResultList is a complexType.
struct ns3__FindMetadataResultList
{
/// @brief The state of the search when the result is returned. Indicates if there can be more results, or if the search is completed.
/// Element SearchState of type "http://www.onvif.org/ver10/schema":SearchState.
    enum ns3__SearchState                SearchState                    1;	///< Required element.
/// @brief A FindMetadataResult structure for each found set of Metadata matching the search.
/// Size of array of struct ns3__FindMetadataResult* is 0..unbounded
   $int                                  __sizeResult                   0;
/// Array struct ns3__FindMetadataResult* of length 0..unbounded
    struct ns3__FindMetadataResult*      Result                         0;
};

/// "http://www.onvif.org/ver10/schema":FindMetadataResult is a complexType.
struct ns3__FindMetadataResult
{
/// @brief A reference to the recording containing the metadata.
/// Element RecordingToken of type "http://www.onvif.org/ver10/schema":RecordingReference.
    ns3__RecordingReference              RecordingToken                 1;	///< Required element.
/// @brief A reference to the metadata track containing the matching metadata.
/// Element TrackToken of type "http://www.onvif.org/ver10/schema":TrackReference.
    ns3__TrackReference                  TrackToken                     1;	///< Required element.
/// @brief The point in time when the matching metadata occurs in the metadata track.
/// Element Time of type xs:dateTime.
    time_t                               Time                           1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":RecordingInformation is a complexType.
struct ns3__RecordingInformation
{
/// Element RecordingToken of type "http://www.onvif.org/ver10/schema":RecordingReference.
    ns3__RecordingReference              RecordingToken                 1;	///< Required element.
/// @brief Information about the source of the recording. This gives a description of where the data in the recording comes from. Since a single recording is intended to record related material, there is just one source. It is indicates the physical location or the major data source for the recording. Currently the recordingconfiguration cannot describe each individual data source.
/// Element Source of type "http://www.onvif.org/ver10/schema":RecordingSourceInformation.
    struct ns3__RecordingSourceInformation*  Source                         1;	///< Required element.
/// Element EarliestRecording of type xs:dateTime.
    time_t*                              EarliestRecording              0;	///< Optional element.
/// Element LatestRecording of type xs:dateTime.
    time_t*                              LatestRecording                0;	///< Optional element.
/// Element Content of type "http://www.onvif.org/ver10/schema":Description.
    ns3__Description                     Content                        1;	///< Required element.
/// Size of array of struct ns3__TrackInformation* is 0..unbounded
   $int                                  __sizeTrack                    0;
/// Array struct ns3__TrackInformation* of length 0..unbounded
    struct ns3__TrackInformation*        Track                          0;
/// Element RecordingStatus of type "http://www.onvif.org/ver10/schema":RecordingStatus.
    enum ns3__RecordingStatus            RecordingStatus                1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":RecordingSourceInformation is a complexType.
/// @brief A set of informative desciptions of a data source. The Search searvice allows a client to filter on recordings based on information in this structure.
struct ns3__RecordingSourceInformation
{
/// @brief Identifier for the source chosen by the client that creates the structure. This identifier is opaque to the device. Clients may use any type of URI for this field.
/// Element SourceId of type xs:anyURI.
    xsd__anyURI                          SourceId                       1;	///< Required element.
/// @brief Informative user readable name of the source, e.g. "Camera23".
/// Element Name of type "http://www.onvif.org/ver10/schema":Name.
    ns3__Name                            Name                           1;	///< Required element.
/// @brief Informative description of the physical location of the source, e.g. the coordinates on a map.
/// Element Location of type "http://www.onvif.org/ver10/schema":Description.
    ns3__Description                     Location                       1;	///< Required element.
/// @brief Informative description of the source.
/// Element Description of type "http://www.onvif.org/ver10/schema":Description.
    ns3__Description                     Description                    1;	///< Required element.
/// @brief URI to the media service of the primary reording source
/// Element Address of type xs:anyURI.
    xsd__anyURI                          Address                        1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":TrackInformation is a complexType.
struct ns3__TrackInformation
{
/// Element TrackToken of type "http://www.onvif.org/ver10/schema":TrackReference.
    ns3__TrackReference                  TrackToken                     1;	///< Required element.
/// @brief Type of the track: "Video", "Audio" or "Metadata". The track shall only be able to hold data of that type.
/// Element TrackType of type "http://www.onvif.org/ver10/schema":TrackType.
    enum ns3__TrackType                  TrackType                      1;	///< Required element.
/// @brief Informative description of the contents of the track.
/// Element Description of type "http://www.onvif.org/ver10/schema":Description.
    ns3__Description                     Description                    1;	///< Required element.
/// @brief The date and time of the oldest data in the track.
/// Element DataFrom of type xs:dateTime.
    time_t                               DataFrom                       1;	///< Required element.
/// @brief The date and time of the newest data in the track.
/// Element DataTo of type xs:dateTime.
    time_t                               DataTo                         1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":MediaAttributes is a complexType.
/// @brief A set of media attributes valid for a recording at a point in time or for a time interval.
struct ns3__MediaAttributes
{
/// @brief A reference to the recording that has these attributes.
/// Element RecordingToken of type "http://www.onvif.org/ver10/schema":RecordingReference.
    ns3__RecordingReference              RecordingToken                 1;	///< Required element.
/// @brief A set of attributes for each track.
/// Size of array of struct ns3__TrackAttributes* is 0..unbounded
   $int                                  __sizeTrackAttributes          0;
/// Array struct ns3__TrackAttributes* of length 0..unbounded
    struct ns3__TrackAttributes*         TrackAttributes                0;
/// @brief The attributes are valid from this point in time in the recording.
/// Element From of type xs:dateTime.
    time_t                               From                           1;	///< Required element.
/// @brief The attributes are valid until this point in time in the recording. Can be equal to 'From' to indicate that the attributes are only known to be valid for this particular point in time.
/// Element Until of type xs:dateTime.
    time_t                               Until                          1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":TrackAttributes is a complexType.
struct ns3__TrackAttributes
{
/// @brief The basic information about the track.
/// Element TrackInformation of type "http://www.onvif.org/ver10/schema":TrackInformation.
    struct ns3__TrackInformation*        TrackInformation               1;	///< Required element.
/// @brief If the track is a video track, exactly one of this structure shall be present and contain the video attributes.
/// Element VideoAttributes of type "http://www.onvif.org/ver10/schema":VideoAttributes.
    struct ns3__VideoAttributes*         VideoAttributes                0;	///< Optional element.
/// @brief If the track is an audio track, exactly one of this structure shall be present and contain the audio attributes.
/// Element AudioAttributes of type "http://www.onvif.org/ver10/schema":AudioAttributes.
    struct ns3__AudioAttributes*         AudioAttributes                0;	///< Optional element.
/// @brief If the track is an metadata track, exactly one of this structure shall be present and contain the metadata attributes.
/// Element MetadataAttributes of type "http://www.onvif.org/ver10/schema":MetadataAttributes.
    struct ns3__MetadataAttributes*      MetadataAttributes             0;	///< Optional element.
/// @brief
/// Element Extension of type "http://www.onvif.org/ver10/schema":TrackAttributesExtension.
    struct ns3__TrackAttributesExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":TrackAttributesExtension is a complexType.
struct ns3__TrackAttributesExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":VideoAttributes is a complexType.
struct ns3__VideoAttributes
{
/// @brief Average bitrate in kbps.
/// Element Bitrate of type xs:int.
    int*                                 Bitrate                        0;	///< Optional element.
/// @brief The width of the video in pixels.
/// Element Width of type xs:int.
    int                                  Width                          1;	///< Required element.
/// @brief The height of the video in pixels.
/// Element Height of type xs:int.
    int                                  Height                         1;	///< Required element.
/// @brief Used video codec, either Jpeg, H.264 or Mpeg4
/// Element Encoding of type "http://www.onvif.org/ver10/schema":VideoEncoding.
    enum ns3__VideoEncoding              Encoding                       1;	///< Required element.
/// @brief Average framerate in frames per second.
/// Element Framerate of type xs:float.
    float                                Framerate                      1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":AudioAttributes is a complexType.
struct ns3__AudioAttributes
{
/// @brief The bitrate in kbps.
/// Element Bitrate of type xs:int.
    int*                                 Bitrate                        0;	///< Optional element.
/// @brief Audio codec used for encoding the audio (either G.711, G.726 or AAC)
/// Element Encoding of type "http://www.onvif.org/ver10/schema":AudioEncoding.
    enum ns3__AudioEncoding              Encoding                       1;	///< Required element.
/// @brief The sample rate in kHz.
/// Element Samplerate of type xs:int.
    int                                  Samplerate                     1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":MetadataAttributes is a complexType.
struct ns3__MetadataAttributes
{
/// @brief Indicates that there can be PTZ data in the metadata track in the specified time interval.
/// Element CanContainPTZ of type xs:boolean.
    enum xsd__boolean                    CanContainPTZ                  1;	///< Required element.
/// @brief Indicates that there can be analytics data in the metadata track in the specified time interval.
/// Element CanContainAnalytics of type xs:boolean.
    enum xsd__boolean                    CanContainAnalytics            1;	///< Required element.
/// @brief Indicates that there can be notifications in the metadata track in the specified time interval.
/// Element CanContainNotifications of type xs:boolean.
    enum xsd__boolean                    CanContainNotifications        1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":RecordingConfiguration is a complexType.
struct ns3__RecordingConfiguration
{
/// @brief Information about the source of the recording.
/// Element Source of type "http://www.onvif.org/ver10/schema":RecordingSourceInformation.
    struct ns3__RecordingSourceInformation*  Source                         1;	///< Required element.
/// @brief Informative description of the source.
/// Element Content of type "http://www.onvif.org/ver10/schema":Description.
    ns3__Description                     Content                        1;	///< Required element.
/// @brief Sspecifies the maximum time that data in any track within the recording shall be stored. The device shall delete any data older than the maximum retention time. Such data shall not be accessible anymore. If the MaximumRetentionPeriod is set to 0, the device shall not limit the retention time of stored data, except by resource constraints. Whatever the value of MaximumRetentionTime, the device may automatically delete recordings to free up storage space for new recordings.
/// Element MaximumRetentionTime of type xs:duration.
    xsd__duration                        MaximumRetentionTime           1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":TrackConfiguration is a complexType.
struct ns3__TrackConfiguration
{
/// @brief Type of the track. It shall be equal to the strings Video, Audio or Metadata. The track shall only be able to hold data of that type.
/// Element TrackType of type "http://www.onvif.org/ver10/schema":TrackType.
    enum ns3__TrackType                  TrackType                      1;	///< Required element.
/// @brief Informative description of the track.
/// Element Description of type "http://www.onvif.org/ver10/schema":Description.
    ns3__Description                     Description                    1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":GetRecordingsResponseItem is a complexType.
struct ns3__GetRecordingsResponseItem
{
/// @brief Token of the recording.
/// Element RecordingToken of type "http://www.onvif.org/ver10/schema":RecordingReference.
    ns3__RecordingReference              RecordingToken                 1;	///< Required element.
/// @brief Configuration of the recording.
/// Element Configuration of type "http://www.onvif.org/ver10/schema":RecordingConfiguration.
    struct ns3__RecordingConfiguration*  Configuration                  1;	///< Required element.
/// @brief List of tracks.
/// Element Tracks of type "http://www.onvif.org/ver10/schema":GetTracksResponseList.
    struct ns3__GetTracksResponseList*   Tracks                         1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":GetTracksResponseList is a complexType.
struct ns3__GetTracksResponseList
{
/// @brief Configuration of a track.
/// Size of array of struct ns3__GetTracksResponseItem* is 0..unbounded
   $int                                  __sizeTrack                    0;
/// Array struct ns3__GetTracksResponseItem* of length 0..unbounded
    struct ns3__GetTracksResponseItem*   Track                          0;
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":GetTracksResponseItem is a complexType.
struct ns3__GetTracksResponseItem
{
/// @brief Token of the track.
/// Element TrackToken of type "http://www.onvif.org/ver10/schema":TrackReference.
    ns3__TrackReference                  TrackToken                     1;	///< Required element.
/// @brief Configuration of the track.
/// Element Configuration of type "http://www.onvif.org/ver10/schema":TrackConfiguration.
    struct ns3__TrackConfiguration*      Configuration                  1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":RecordingJobConfiguration is a complexType.
struct ns3__RecordingJobConfiguration
{
/// @brief Identifies the recording to which this job shall store the received data.
/// Element RecordingToken of type "http://www.onvif.org/ver10/schema":RecordingReference.
    ns3__RecordingReference              RecordingToken                 1;	///< Required element.
/// @brief The mode of the job. If it is idle, nothing shall happen. If it is active, the device shall try to obtain data from the receivers. A client shall use GetRecordingJobState to determine if data transfer is really taking place.<br/> The only valid values for Mode shall be Idle and Active.
/// Element Mode of type "http://www.onvif.org/ver10/schema":RecordingJobMode.
    ns3__RecordingJobMode                Mode                           1;	///< Required element.
/// @brief This shall be a positive number. If there are multiple recording jobs that store data to the same track, the device will only store the data for the recording job with the highest priority. The priority is specified per recording job, but the device shall determine the priority of each track individually. If there are two recording jobs with the same priority, the device shall record the data corresponding to the recording job that was activated the latest.
/// Element Priority of type xs:int.
    int                                  Priority                       1;	///< Required element.
/// @brief Source of the recording.
/// Size of array of struct ns3__RecordingJobSource* is 0..unbounded
   $int                                  __sizeSource                   0;
/// Array struct ns3__RecordingJobSource* of length 0..unbounded
    struct ns3__RecordingJobSource*      Source                         0;
/// Element Extension of type "http://www.onvif.org/ver10/schema":RecordingJobConfigurationExtension.
    struct ns3__RecordingJobConfigurationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":RecordingJobConfigurationExtension is a complexType.
struct ns3__RecordingJobConfigurationExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":RecordingJobSource is a complexType.
struct ns3__RecordingJobSource
{
/// @brief This field shall be a reference to the source of the data. The type of the source is determined by the attribute Type in the SourceToken structure. If Type is http://www.onvif.org/ver10/schema/Receiver, the token is a ReceiverReference. In this case the device shall receive the data over the network. If Type is http://www.onvif.org/ver10/schema/Profile, the token identifies a media profile, instructing the device to obtain data from a profile that exists on the local device.
/// Element SourceToken of type "http://www.onvif.org/ver10/schema":SourceReference.
    struct ns3__SourceReference*         SourceToken                    0;	///< Optional element.
/// @brief If this field is TRUE, and if the SourceToken is omitted, the device shall create a receiver object (through the receiver service) and assign the ReceiverReference to the SourceToken field. When retrieving the RecordingJobConfiguration from the device, the AutoCreateReceiver field shall never be present.
/// Element AutoCreateReceiver of type xs:boolean.
    enum xsd__boolean*                   AutoCreateReceiver             0;	///< Optional element.
/// @brief List of tracks associated with the recording.
/// Size of array of struct ns3__RecordingJobTrack* is 0..unbounded
   $int                                  __sizeTracks                   0;
/// Array struct ns3__RecordingJobTrack* of length 0..unbounded
    struct ns3__RecordingJobTrack*       Tracks                         0;
/// Element Extension of type "http://www.onvif.org/ver10/schema":RecordingJobSourceExtension.
    struct ns3__RecordingJobSourceExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":RecordingJobSourceExtension is a complexType.
struct ns3__RecordingJobSourceExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":RecordingJobTrack is a complexType.
struct ns3__RecordingJobTrack
{
/// @brief If the received RTSP stream contains multiple tracks of the same type, the SourceTag differentiates between those Tracks.
/// Element SourceTag of type xs:string.
    char*                                SourceTag                      1;	///< Required element.
/// @brief The destination is the tracktoken of the track to which the device shall store the received data.
/// Element Destination of type "http://www.onvif.org/ver10/schema":TrackReference.
    ns3__TrackReference                  Destination                    1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":RecordingJobStateInformation is a complexType.
struct ns3__RecordingJobStateInformation
{
/// @brief Identification of the recording that the recording job records to.
/// Element RecordingToken of type "http://www.onvif.org/ver10/schema":RecordingReference.
    ns3__RecordingReference              RecordingToken                 1;	///< Required element.
/// @brief Holds the aggregated state over the whole RecordingJobInformation structure.
/// Element State of type "http://www.onvif.org/ver10/schema":RecordingJobState.
    ns3__RecordingJobState               State                          1;	///< Required element.
/// @brief Identifies the data source of the recording job.
/// Size of array of struct ns3__RecordingJobStateSource* is 0..unbounded
   $int                                  __sizeSources                  0;
/// Array struct ns3__RecordingJobStateSource* of length 0..unbounded
    struct ns3__RecordingJobStateSource*  Sources                        0;
/// Element Extension of type "http://www.onvif.org/ver10/schema":RecordingJobStateInformationExtension.
    struct ns3__RecordingJobStateInformationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":RecordingJobStateInformationExtension is a complexType.
struct ns3__RecordingJobStateInformationExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":RecordingJobStateSource is a complexType.
struct ns3__RecordingJobStateSource
{
/// @brief Identifies the data source of the recording job.
/// Element SourceToken of type "http://www.onvif.org/ver10/schema":SourceReference.
    struct ns3__SourceReference*         SourceToken                    1;	///< Required element.
/// @brief Holds the aggregated state over all substructures of RecordingJobStateSource.
/// Element State of type "http://www.onvif.org/ver10/schema":RecordingJobState.
    ns3__RecordingJobState               State                          1;	///< Required element.
/// @brief List of track items.
/// Element Tracks of type "http://www.onvif.org/ver10/schema":RecordingJobStateTracks.
    struct ns3__RecordingJobStateTracks*  Tracks                         1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":RecordingJobStateTracks is a complexType.
struct ns3__RecordingJobStateTracks
{
/// Size of array of struct ns3__RecordingJobStateTrack* is 0..unbounded
   $int                                  __sizeTrack                    0;
/// Array struct ns3__RecordingJobStateTrack* of length 0..unbounded
    struct ns3__RecordingJobStateTrack*  Track                          0;
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":RecordingJobStateTrack is a complexType.
struct ns3__RecordingJobStateTrack
{
/// @brief Identifies the track of the data source that provides the data.
/// Element SourceTag of type xs:string.
    char*                                SourceTag                      1;	///< Required element.
/// @brief Indicates the destination track.
/// Element Destination of type "http://www.onvif.org/ver10/schema":TrackReference.
    ns3__TrackReference                  Destination                    1;	///< Required element.
/// @brief Optionally holds an implementation defined string value that describes the error. The string should be in the English language.
/// Element Error of type xs:string.
    char*                                Error                          0;	///< Optional element.
/// @brief Provides the job state of the track. The valid values of state shall be Idle, Active and Error. If state equals Error, the Error field may be filled in with an implementation defined value.
/// Element State of type "http://www.onvif.org/ver10/schema":RecordingJobState.
    ns3__RecordingJobState               State                          1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":GetRecordingJobsResponseItem is a complexType.
struct ns3__GetRecordingJobsResponseItem
{
/// Element JobToken of type "http://www.onvif.org/ver10/schema":RecordingJobReference.
    ns3__RecordingJobReference           JobToken                       1;	///< Required element.
/// Element JobConfiguration of type "http://www.onvif.org/ver10/schema":RecordingJobConfiguration.
    struct ns3__RecordingJobConfiguration*  JobConfiguration               1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":ReplayConfiguration is a complexType.
/// @brief Configuration parameters for the replay service.
struct ns3__ReplayConfiguration
{
/// @brief The RTSP session timeout.
/// Element SessionTimeout of type xs:duration.
    xsd__duration                        SessionTimeout                 1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":AnalyticsDeviceEngineConfiguration is a complexType.
struct ns3__AnalyticsDeviceEngineConfiguration
{
/// Size of array of struct ns3__EngineConfiguration* is 1..unbounded
   $int                                  __sizeEngineConfiguration      1;
/// Array struct ns3__EngineConfiguration* of length 1..unbounded
    struct ns3__EngineConfiguration*     EngineConfiguration            1;
/// Element Extension of type "http://www.onvif.org/ver10/schema":AnalyticsDeviceEngineConfigurationExtension.
    struct ns3__AnalyticsDeviceEngineConfigurationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":AnalyticsDeviceEngineConfigurationExtension is a complexType.
struct ns3__AnalyticsDeviceEngineConfigurationExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":EngineConfiguration is a complexType.
struct ns3__EngineConfiguration
{
/// Element VideoAnalyticsConfiguration of type "http://www.onvif.org/ver10/schema":VideoAnalyticsConfiguration.
    struct ns3__VideoAnalyticsConfiguration*  VideoAnalyticsConfiguration    1;	///< Required element.
/// Element AnalyticsEngineInputInfo of type "http://www.onvif.org/ver10/schema":AnalyticsEngineInputInfo.
    struct ns3__AnalyticsEngineInputInfo*  AnalyticsEngineInputInfo       1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":AnalyticsEngineInputInfo is a complexType.
struct ns3__AnalyticsEngineInputInfo
{
/// Element InputInfo of type "http://www.onvif.org/ver10/schema":Config.
    struct ns3__Config*                  InputInfo                      0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":AnalyticsEngineInputInfoExtension.
    struct ns3__AnalyticsEngineInputInfoExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":AnalyticsEngineInputInfoExtension is a complexType.
struct ns3__AnalyticsEngineInputInfoExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":SourceIdentification is a complexType.
struct ns3__SourceIdentification
{
/// Element Name of type xs:string.
    char*                                Name                           1;	///< Required element.
/// Size of array of ns3__ReferenceToken* is 1..unbounded
   $int                                  __sizeToken                    1;
/// Array ns3__ReferenceToken* of length 1..unbounded
    ns3__ReferenceToken*                 Token                          1;
/// Element Extension of type "http://www.onvif.org/ver10/schema":SourceIdentificationExtension.
    struct ns3__SourceIdentificationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":SourceIdentificationExtension is a complexType.
struct ns3__SourceIdentificationExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":MetadataInput is a complexType.
struct ns3__MetadataInput
{
/// Size of array of struct ns3__Config* is 0..unbounded
   $int                                  __sizeMetadataConfig           0;
/// Array struct ns3__Config* of length 0..unbounded
    struct ns3__Config*                  MetadataConfig                 0;
/// Element Extension of type "http://www.onvif.org/ver10/schema":MetadataInputExtension.
    struct ns3__MetadataInputExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":MetadataInputExtension is a complexType.
struct ns3__MetadataInputExtension
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/schema":AnalyticsStateInformation is a complexType.
struct ns3__AnalyticsStateInformation
{
/// @brief Token of the control object whose status is requested.
/// Element AnalyticsEngineControlToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  AnalyticsEngineControlToken    1;	///< Required element.
/// Element State of type "http://www.onvif.org/ver10/schema":AnalyticsState.
    struct ns3__AnalyticsState*          State                          1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":AnalyticsState is a complexType.
struct ns3__AnalyticsState
{
/// Element Error of type xs:string.
    char*                                Error                          0;	///< Optional element.
/// Element State of type xs:string.
    char*                                State                          1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};


/// Top-level root element "http://www.onvif.org/ver10/schema":Message

/// "http://www.onvif.org/ver10/schema":Message is a complexType.
struct _ns3__Message
{
/// @brief Token value pairs that triggered this message. Typically only one item is present.
/// Element Source of type "http://www.onvif.org/ver10/schema":ItemList.
    struct ns3__ItemList*                Source                         0;	///< Optional element.
/// Element Key of type "http://www.onvif.org/ver10/schema":ItemList.
    struct ns3__ItemList*                Key                            0;	///< Optional element.
/// Element Data of type "http://www.onvif.org/ver10/schema":ItemList.
    struct ns3__ItemList*                Data                           0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":MessageExtension.
    struct ns3__MessageExtension*        Extension                      0;	///< Optional element.
/// Attribute UtcTime of type xs:dateTime.
   @time_t                               UtcTime                        1;	///< Required attribute.
/// Attribute PropertyOperation of type "http://www.onvif.org/ver10/schema":PropertyOperation.
   @enum ns3__PropertyOperation*         PropertyOperation              0;	///< Optional attribute.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://docs.oasis-open.org/wsn/b-2                                       *
 *                                                                            *
\******************************************************************************/


/// "http://docs.oasis-open.org/wsn/b-2":QueryExpressionType is a complexType.
struct ns4__QueryExpressionType
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
/// Attribute Dialect of type xs:anyURI.
   @xsd__anyURI                          Dialect                        1;	///< Required attribute.
/// TODO: this mixed complexType is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __mixed                       0;	///< Catch mixed content in XML string
};

/// "http://docs.oasis-open.org/wsn/b-2":TopicExpressionType is a complexType.
struct ns4__TopicExpressionType
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
/// Attribute Dialect of type xs:anyURI.
   @xsd__anyURI                          Dialect                        1;	///< Required attribute.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// TODO: this mixed complexType is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __mixed                       0;	///< Catch mixed content in XML string
};

/// "http://docs.oasis-open.org/wsn/b-2":FilterType is a complexType.
struct ns4__FilterType
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://docs.oasis-open.org/wsn/b-2":SubscriptionPolicyType is a complexType.
struct ns4__SubscriptionPolicyType
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://docs.oasis-open.org/wsn/b-2":NotificationMessageHolderType is a complexType.
struct ns4__NotificationMessageHolderType
{
/// Element reference "http://docs.oasis-open.org/wsn/b-2":SubscriptionReference.
    struct ns14__EndpointReferenceType*  SubscriptionReference          0;	///< Optional element.
/// Element reference "http://docs.oasis-open.org/wsn/b-2":Topic.
    struct ns4__TopicExpressionType*     Topic                          0;	///< Optional element.
/// Element reference "http://docs.oasis-open.org/wsn/b-2":ProducerReference.
    struct ns14__EndpointReferenceType*  ProducerReference              0;	///< Optional element.
    struct _ns4__NotificationMessageHolderType_Message
    {
/// TODO: <any namespace="##any" minOccurs="1" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                    Message                        1;	///< Required element.
};


/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":NotificationProducerRP

/// "http://docs.oasis-open.org/wsn/b-2":NotificationProducerRP is a complexType.
struct _ns4__NotificationProducerRP
{
/// Size of the dynamic array of struct ns4__TopicExpressionType* is 0..unbounded
   $int                                  __sizeTopicExpression          0;
/// Array struct ns4__TopicExpressionType* of length 0..unbounded
    struct ns4__TopicExpressionType*     TopicExpression                0;
/// Element reference "http://docs.oasis-open.org/wsn/b-2":FixedTopicSet.
    enum xsd__boolean*                   FixedTopicSet                  0;	///< Optional element.
/// Size of the dynamic array of xsd__anyURI* is 0..unbounded
   $int                                  __sizeTopicExpressionDialect   0;
/// Array xsd__anyURI* of length 0..unbounded
    xsd__anyURI*                         TopicExpressionDialect         0;
/// Element reference "http://docs.oasis-open.org/wsn/t-1":TopicSet.
    struct ns7__TopicSetType*            ns7__TopicSet                  0;	///< Optional element.
};


/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":SubscriptionManagerRP

/// "http://docs.oasis-open.org/wsn/b-2":SubscriptionManagerRP is a complexType.
struct _ns4__SubscriptionManagerRP
{
/// Element reference "http://docs.oasis-open.org/wsn/b-2":ConsumerReference.
    struct ns14__EndpointReferenceType*  ConsumerReference              1;	///< Required element.
/// Element reference "http://docs.oasis-open.org/wsn/b-2":Filter.
    struct ns4__FilterType*              Filter                         0;	///< Optional element.
/// Element reference "http://docs.oasis-open.org/wsn/b-2":SubscriptionPolicy.
    struct ns4__SubscriptionPolicyType*  SubscriptionPolicy             0;	///< Optional element.
/// Element reference "http://docs.oasis-open.org/wsn/b-2":CreationTime.
    time_t*                              CreationTime                   0;	///< Optional element.
};


/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":Notify

/// "http://docs.oasis-open.org/wsn/b-2":Notify is a complexType.
struct _ns4__Notify
{
/// Size of the dynamic array of struct ns4__NotificationMessageHolderType* is 1..unbounded
   $int                                  __sizeNotificationMessage      1;
/// Array struct ns4__NotificationMessageHolderType* of length 1..unbounded
    struct ns4__NotificationMessageHolderType*  NotificationMessage            1;
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":UseRaw

/// "http://docs.oasis-open.org/wsn/b-2":UseRaw is a complexType.
struct _ns4__UseRaw
{
};


/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":Subscribe

/// "http://docs.oasis-open.org/wsn/b-2":Subscribe is a complexType.
struct _ns4__Subscribe
{
/// Element ConsumerReference of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  ConsumerReference              1;	///< Required element.
/// Element Filter of type "http://docs.oasis-open.org/wsn/b-2":FilterType.
    struct ns4__FilterType*              Filter                         0;	///< Optional element.
/// Element InitialTerminationTime of type "http://docs.oasis-open.org/wsn/b-2":AbsoluteOrRelativeTimeType.
    ns4__AbsoluteOrRelativeTimeType      InitialTerminationTime         0;	///< Nullable pointer.
    struct _ns4__Subscribe_SubscriptionPolicy
    {
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
    }                                   *SubscriptionPolicy             0;	///< Optional element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":SubscribeResponse

/// "http://docs.oasis-open.org/wsn/b-2":SubscribeResponse is a complexType.
struct _ns4__SubscribeResponse
{
/// Element SubscriptionReference of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  SubscriptionReference          1;	///< Required element.
/// Element reference "http://docs.oasis-open.org/wsn/b-2":CurrentTime.
    time_t*                              CurrentTime                    0;	///< Optional element.
/// Element reference "http://docs.oasis-open.org/wsn/b-2":TerminationTime.
    time_t*                              TerminationTime                0;	///< Optional element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":GetCurrentMessage

/// "http://docs.oasis-open.org/wsn/b-2":GetCurrentMessage is a complexType.
struct _ns4__GetCurrentMessage
{
/// Element Topic of type "http://docs.oasis-open.org/wsn/b-2":TopicExpressionType.
    struct ns4__TopicExpressionType*     Topic                          1;	///< Required element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":GetCurrentMessageResponse

/// "http://docs.oasis-open.org/wsn/b-2":GetCurrentMessageResponse is a complexType.
struct _ns4__GetCurrentMessageResponse
{
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":GetMessages

/// "http://docs.oasis-open.org/wsn/b-2":GetMessages is a complexType.
struct _ns4__GetMessages
{
/// Element MaximumNumber of type xs:nonNegativeInteger.
    xsd__nonNegativeInteger              MaximumNumber                  0;	///< Optional element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};


/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":GetMessagesResponse

/// "http://docs.oasis-open.org/wsn/b-2":GetMessagesResponse is a complexType.
struct _ns4__GetMessagesResponse
{
/// Size of the dynamic array of struct ns4__NotificationMessageHolderType* is 0..unbounded
   $int                                  __sizeNotificationMessage      0;
/// Array struct ns4__NotificationMessageHolderType* of length 0..unbounded
    struct ns4__NotificationMessageHolderType*  NotificationMessage            0;
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};


/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":DestroyPullPoint

/// "http://docs.oasis-open.org/wsn/b-2":DestroyPullPoint is a complexType.
struct _ns4__DestroyPullPoint
{
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};


/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":DestroyPullPointResponse

/// "http://docs.oasis-open.org/wsn/b-2":DestroyPullPointResponse is a complexType.
struct _ns4__DestroyPullPointResponse
{
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};


/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":CreatePullPoint

/// "http://docs.oasis-open.org/wsn/b-2":CreatePullPoint is a complexType.
struct _ns4__CreatePullPoint
{
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};


/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":CreatePullPointResponse

/// "http://docs.oasis-open.org/wsn/b-2":CreatePullPointResponse is a complexType.
struct _ns4__CreatePullPointResponse
{
/// Element PullPoint of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  PullPoint                      1;	///< Required element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};


/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":Renew

/// "http://docs.oasis-open.org/wsn/b-2":Renew is a complexType.
struct _ns4__Renew
{
/// Element TerminationTime of type "http://docs.oasis-open.org/wsn/b-2":AbsoluteOrRelativeTimeType.
    ns4__AbsoluteOrRelativeTimeType      TerminationTime                1;	///< Nullable pointer.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":RenewResponse

/// "http://docs.oasis-open.org/wsn/b-2":RenewResponse is a complexType.
struct _ns4__RenewResponse
{
/// Element reference "http://docs.oasis-open.org/wsn/b-2":TerminationTime.
    time_t                               TerminationTime                1;	///< Required element.
/// Element reference "http://docs.oasis-open.org/wsn/b-2":CurrentTime.
    time_t*                              CurrentTime                    0;	///< Optional element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":Unsubscribe

/// "http://docs.oasis-open.org/wsn/b-2":Unsubscribe is a complexType.
struct _ns4__Unsubscribe
{
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnsubscribeResponse

/// "http://docs.oasis-open.org/wsn/b-2":UnsubscribeResponse is a complexType.
struct _ns4__UnsubscribeResponse
{
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":PauseSubscription

/// "http://docs.oasis-open.org/wsn/b-2":PauseSubscription is a complexType.
struct _ns4__PauseSubscription
{
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":PauseSubscriptionResponse

/// "http://docs.oasis-open.org/wsn/b-2":PauseSubscriptionResponse is a complexType.
struct _ns4__PauseSubscriptionResponse
{
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":ResumeSubscription

/// "http://docs.oasis-open.org/wsn/b-2":ResumeSubscription is a complexType.
struct _ns4__ResumeSubscription
{
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":ResumeSubscriptionResponse

/// "http://docs.oasis-open.org/wsn/b-2":ResumeSubscriptionResponse is a complexType.
struct _ns4__ResumeSubscriptionResponse
{
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.w3.org/2004/08/xop/include                                    *
 *                                                                            *
\******************************************************************************/


/// "http://www.w3.org/2004/08/xop/include":Include is a complexType.
struct ns5__Include
{
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Attribute href of type xs:anyURI.
   @xsd__anyURI                          href                           1;	///< Required attribute.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://docs.oasis-open.org/wsrf/bf-2                                     *
 *                                                                            *
\******************************************************************************/


/// "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType is a complexType.
struct ns6__BaseFaultType
{
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Timestamp of type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element Originator of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  Originator                     0;	///< Optional element.
    struct _ns6__BaseFaultType_ErrorCode
    {
/// Attribute dialect of type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ErrorCode                      0;	///< Optional element.
/// Size of Description array is 0..unbounded
   $int                                  __sizeDescription              0;
    struct _ns6__BaseFaultType_Description
    {
/// __item wraps 'xs:string' simpleContent.
    char*                                __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang                           xml__lang                      0;	///< Optional attribute.
    }                                   *Description                    0;
    struct _ns6__BaseFaultType_FaultCause
    {
/// TODO: <any namespace="##other" minOccurs="1" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *FaultCause                     0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://docs.oasis-open.org/wsn/t-1                                       *
 *                                                                            *
\******************************************************************************/


/// "http://docs.oasis-open.org/wsn/t-1":Documentation is a complexType.
struct ns7__Documentation
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// TODO: this mixed complexType is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __mixed                       0;	///< Catch mixed content in XML string
};

/// "http://docs.oasis-open.org/wsn/t-1":ExtensibleDocumented is an abstract complexType.
struct ns7__ExtensibleDocumented
{
/// Element documentation of type "http://docs.oasis-open.org/wsn/t-1":Documentation.
    struct ns7__Documentation*           documentation                  0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://docs.oasis-open.org/wsn/t-1":QueryExpressionType is a complexType.
struct ns7__QueryExpressionType
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
/// Attribute Dialect of type xs:anyURI.
   @xsd__anyURI                          Dialect                        1;	///< Required attribute.
/// TODO: this mixed complexType is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __mixed                       0;	///< Catch mixed content in XML string
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.onvif.org/ver10/device/wsdl                                   *
 *                                                                            *
\******************************************************************************/


/// "http://www.onvif.org/ver10/device/wsdl":Service is a complexType.
struct ns8__Service
{
/// @brief Namespace of the service being described. This parameter allows to match the service capabilities to the service. Note that only one set of capabilities is supported per namespace.
/// Element Namespace of type xs:anyURI.
    xsd__anyURI                          Namespace                      1;	///< Required element.
/// @brief The transport addresses where the service can be reached. The schema and IP part shall match the one used in the request (i.e. the GetServices request).
/// Element XAddr of type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
    struct _ns8__Service_Capabilities
    {
/// TODO: <any namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *Capabilities                   0;	///< Optional element.
/// @brief The version of the service (not the ONVIF core spec version).
/// Element Version of type "http://www.onvif.org/ver10/schema":OnvifVersion.
    struct ns3__OnvifVersion*            Version                        1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/device/wsdl":DeviceServiceCapabilities is a complexType.
struct ns8__DeviceServiceCapabilities
{
/// @brief Network capabilities.
/// Element Network of type "http://www.onvif.org/ver10/device/wsdl":NetworkCapabilities.
    struct ns8__NetworkCapabilities*     Network                        1;	///< Required element.
/// @brief Security capabilities.
/// Element Security of type "http://www.onvif.org/ver10/device/wsdl":SecurityCapabilities.
    struct ns8__SecurityCapabilities*    Security                       1;	///< Required element.
/// @brief System capabilities.
/// Element System of type "http://www.onvif.org/ver10/device/wsdl":SystemCapabilities.
    struct ns8__SystemCapabilities*      System                         1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://www.onvif.org/ver10/device/wsdl":NetworkCapabilities is a complexType.
struct ns8__NetworkCapabilities
{
/// @brief Indicates support for IP filtering.
/// Attribute IPFilter of type xs:boolean.
   @enum xsd__boolean*                   IPFilter                       0;	///< Optional attribute.
/// @brief Indicates support for zeroconf.
/// Attribute ZeroConfiguration of type xs:boolean.
   @enum xsd__boolean*                   ZeroConfiguration              0;	///< Optional attribute.
/// @brief Indicates support for IPv6.
/// Attribute IPVersion6 of type xs:boolean.
   @enum xsd__boolean*                   IPVersion6                     0;	///< Optional attribute.
/// @brief Indicates support for dynamic DNS configuration.
/// Attribute DynDNS of type xs:boolean.
   @enum xsd__boolean*                   DynDNS                         0;	///< Optional attribute.
/// @brief Indicates support for IEEE 802.11 configuration.
/// Attribute Dot11Configuration of type xs:boolean.
   @enum xsd__boolean*                   Dot11Configuration             0;	///< Optional attribute.
/// @brief Indicates support for retrieval of hostname from DHCP.
/// Attribute HostnameFromDHCP of type xs:boolean.
   @enum xsd__boolean*                   HostnameFromDHCP               0;	///< Optional attribute.
/// @brief Maximum number of NTP servers supported by the devices SetNTP command.
/// Attribute NTP of type xs:int.
   @int*                                 NTP                            0;	///< Optional attribute.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/device/wsdl":SecurityCapabilities is a complexType.
struct ns8__SecurityCapabilities
{
/// @brief Indicates support for TLS 1.0.
/// Attribute TLS1.0 of type xs:boolean.
   @enum xsd__boolean*                   TLS1_x002e0                    0;	///< Optional attribute.
/// @brief Indicates support for TLS 1.1.
/// Attribute TLS1.1 of type xs:boolean.
   @enum xsd__boolean*                   TLS1_x002e1                    0;	///< Optional attribute.
/// @brief Indicates support for TLS 1.2.
/// Attribute TLS1.2 of type xs:boolean.
   @enum xsd__boolean*                   TLS1_x002e2                    0;	///< Optional attribute.
/// @brief Indicates support for onboard key generation.
/// Attribute OnboardKeyGeneration of type xs:boolean.
   @enum xsd__boolean*                   OnboardKeyGeneration           0;	///< Optional attribute.
/// @brief Indicates support for access policy configuration.
/// Attribute AccessPolicyConfig of type xs:boolean.
   @enum xsd__boolean*                   AccessPolicyConfig             0;	///< Optional attribute.
/// @brief Indicates support for IEEE 802.1X configuration.
/// Attribute Dot1X of type xs:boolean.
   @enum xsd__boolean*                   Dot1X                          0;	///< Optional attribute.
/// @brief Indicates support for remote user configuration. Used when accessing another device.
/// Attribute RemoteUserHandling of type xs:boolean.
   @enum xsd__boolean*                   RemoteUserHandling             0;	///< Optional attribute.
/// @brief Indicates support for WS-Security X.509 token.
/// Attribute X.509Token of type xs:boolean.
   @enum xsd__boolean*                   X_x002e509Token                0;	///< Optional attribute.
/// @brief Indicates support for WS-Security SAML token.
/// Attribute SAMLToken of type xs:boolean.
   @enum xsd__boolean*                   SAMLToken                      0;	///< Optional attribute.
/// @brief Indicates support for WS-Security Kerberos token.
/// Attribute KerberosToken of type xs:boolean.
   @enum xsd__boolean*                   KerberosToken                  0;	///< Optional attribute.
/// @brief Indicates support for WS-Security Username token.
/// Attribute UsernameToken of type xs:boolean.
   @enum xsd__boolean*                   UsernameToken                  0;	///< Optional attribute.
/// @brief Indicates support for WS over HTTP digest authenticated communication layer.
/// Attribute HttpDigest of type xs:boolean.
   @enum xsd__boolean*                   HttpDigest                     0;	///< Optional attribute.
/// @brief Indicates support for WS-Security REL token.
/// Attribute RELToken of type xs:boolean.
   @enum xsd__boolean*                   RELToken                       0;	///< Optional attribute.
/// @brief EAP Methods supported by the device. The int values refer to the <a href="http://www.iana.org/assignments/eap-numbers/eap-numbers.xhtml">IANA EAP Registry</a>.
/// Attribute SupportedEAPMethods of type "http://www.onvif.org/ver10/device/wsdl":EAPMethodTypes.
   @ns8__EAPMethodTypes                  SupportedEAPMethods            0;	///< Optional attribute.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/device/wsdl":SystemCapabilities is a complexType.
struct ns8__SystemCapabilities
{
/// @brief Indicates support for WS Discovery resolve requests.
/// Attribute DiscoveryResolve of type xs:boolean.
   @enum xsd__boolean*                   DiscoveryResolve               0;	///< Optional attribute.
/// @brief Indicates support for WS-Discovery Bye.
/// Attribute DiscoveryBye of type xs:boolean.
   @enum xsd__boolean*                   DiscoveryBye                   0;	///< Optional attribute.
/// @brief Indicates support for remote discovery, see WS-Discovery.
/// Attribute RemoteDiscovery of type xs:boolean.
   @enum xsd__boolean*                   RemoteDiscovery                0;	///< Optional attribute.
/// @brief Indicates support for system backup through MTOM.
/// Attribute SystemBackup of type xs:boolean.
   @enum xsd__boolean*                   SystemBackup                   0;	///< Optional attribute.
/// @brief Indicates support for retrieval of system logging through MTOM.
/// Attribute SystemLogging of type xs:boolean.
   @enum xsd__boolean*                   SystemLogging                  0;	///< Optional attribute.
/// @brief Indicates support for firmware upgrade through MTOM.
/// Attribute FirmwareUpgrade of type xs:boolean.
   @enum xsd__boolean*                   FirmwareUpgrade                0;	///< Optional attribute.
/// @brief Indicates support for system backup through MTOM.
/// Attribute HttpFirmwareUpgrade of type xs:boolean.
   @enum xsd__boolean*                   HttpFirmwareUpgrade            0;	///< Optional attribute.
/// @brief Indicates support for system backup through HTTP.
/// Attribute HttpSystemBackup of type xs:boolean.
   @enum xsd__boolean*                   HttpSystemBackup               0;	///< Optional attribute.
/// @brief Indicates support for retrieval of system logging through HTTP.
/// Attribute HttpSystemLogging of type xs:boolean.
   @enum xsd__boolean*                   HttpSystemLogging              0;	///< Optional attribute.
/// @brief Indicates support for retrieving support information through HTTP.
/// Attribute HttpSupportInformation of type xs:boolean.
   @enum xsd__boolean*                   HttpSupportInformation         0;	///< Optional attribute.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetServices

/// "http://www.onvif.org/ver10/device/wsdl":GetServices is a complexType.
struct _ns8__GetServices
{
/// @brief Indicates if the service capabilities (untyped) should be included in the response.
/// Element IncludeCapability of type xs:boolean.
    enum xsd__boolean                    IncludeCapability              1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetServicesResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetServicesResponse is a complexType.
struct _ns8__GetServicesResponse
{
/// @brief Each Service element contains information about one service.
/// Size of array of struct ns8__Service* is 1..unbounded
   $int                                  __sizeService                  1;
/// Array struct ns8__Service* of length 1..unbounded
    struct ns8__Service*                 Service                        1;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetServiceCapabilities

/// "http://www.onvif.org/ver10/device/wsdl":GetServiceCapabilities is a complexType.
struct _ns8__GetServiceCapabilities
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetServiceCapabilitiesResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetServiceCapabilitiesResponse is a complexType.
struct _ns8__GetServiceCapabilitiesResponse
{
/// @brief The capabilities for the device service is returned in the Capabilities element.
/// Element Capabilities of type "http://www.onvif.org/ver10/device/wsdl":DeviceServiceCapabilities.
    struct ns8__DeviceServiceCapabilities*  Capabilities                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDeviceInformation

/// "http://www.onvif.org/ver10/device/wsdl":GetDeviceInformation is a complexType.
struct _ns8__GetDeviceInformation
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDeviceInformationResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetDeviceInformationResponse is a complexType.
struct _ns8__GetDeviceInformationResponse
{
/// @brief Contains the device information.
/// @brief The manufactor of the device.
/// Element Manufacturer of type xs:string.
    char*                                Manufacturer                   1;	///< Required element.
/// @brief The device model.
/// Element Model of type xs:string.
    char*                                Model                          1;	///< Required element.
/// @brief The firmware version in the device.
/// Element FirmwareVersion of type xs:string.
    char*                                FirmwareVersion                1;	///< Required element.
/// @brief The serial number of the device.
/// Element SerialNumber of type xs:string.
    char*                                SerialNumber                   1;	///< Required element.
/// @brief The hardware ID of the device.
/// Element HardwareId of type xs:string.
    char*                                HardwareId                     1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetSystemDateAndTime

/// "http://www.onvif.org/ver10/device/wsdl":SetSystemDateAndTime is a complexType.
struct _ns8__SetSystemDateAndTime
{
/// @brief Defines if the date and time is set via NTP or manually.
/// Element DateTimeType of type "http://www.onvif.org/ver10/schema":SetDateTimeType.
    enum ns3__SetDateTimeType            DateTimeType                   1;	///< Required element.
/// @brief Defines if daylight savings is on or off
/// Element DaylightSavings of type xs:boolean.
    enum xsd__boolean                    DaylightSavings                1;	///< Required element.
/// @brief The time zone in POSIX 1003.1 format
/// Element TimeZone of type "http://www.onvif.org/ver10/schema":TimeZone.
    struct ns3__TimeZone*                TimeZone                       0;	///< Optional element.
/// @brief Date and time in UTC. If time is obtained via NTP, UTCDateTime has no meaning
/// Element UTCDateTime of type "http://www.onvif.org/ver10/schema":DateTime.
    struct ns3__DateTime*                UTCDateTime                    0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetSystemDateAndTimeResponse

/// "http://www.onvif.org/ver10/device/wsdl":SetSystemDateAndTimeResponse is a complexType.
struct _ns8__SetSystemDateAndTimeResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemDateAndTime

/// "http://www.onvif.org/ver10/device/wsdl":GetSystemDateAndTime is a complexType.
struct _ns8__GetSystemDateAndTime
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemDateAndTimeResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetSystemDateAndTimeResponse is a complexType.
struct _ns8__GetSystemDateAndTimeResponse
{
/// @brief Contains information whether system date and time are set manually or by NTP, daylight savings is on or off, time zone in POSIX 1003.1 format and system date and time in UTC and also local system date and time.
/// Element SystemDateAndTime of type "http://www.onvif.org/ver10/schema":SystemDateTime.
    struct ns3__SystemDateTime*          SystemDateAndTime              1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetSystemFactoryDefault

/// "http://www.onvif.org/ver10/device/wsdl":SetSystemFactoryDefault is a complexType.
struct _ns8__SetSystemFactoryDefault
{
/// @brief Specifies the factory default action type.
/// Element FactoryDefault of type "http://www.onvif.org/ver10/schema":FactoryDefaultType.
    enum ns3__FactoryDefaultType         FactoryDefault                 1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetSystemFactoryDefaultResponse

/// "http://www.onvif.org/ver10/device/wsdl":SetSystemFactoryDefaultResponse is a complexType.
struct _ns8__SetSystemFactoryDefaultResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":UpgradeSystemFirmware

/// "http://www.onvif.org/ver10/device/wsdl":UpgradeSystemFirmware is a complexType.
struct _ns8__UpgradeSystemFirmware
{
/// Element Firmware of type "http://www.onvif.org/ver10/schema":AttachmentData.
    struct ns3__AttachmentData*          Firmware                       1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":UpgradeSystemFirmwareResponse

/// "http://www.onvif.org/ver10/device/wsdl":UpgradeSystemFirmwareResponse is a complexType.
struct _ns8__UpgradeSystemFirmwareResponse
{
/// Element Message of type xs:string.
    char*                                Message                        0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SystemReboot

/// "http://www.onvif.org/ver10/device/wsdl":SystemReboot is a complexType.
struct _ns8__SystemReboot
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SystemRebootResponse

/// "http://www.onvif.org/ver10/device/wsdl":SystemRebootResponse is a complexType.
struct _ns8__SystemRebootResponse
{
/// @brief Contains the reboot message sent by the device.
/// Element Message of type xs:string.
    char*                                Message                        1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":RestoreSystem

/// "http://www.onvif.org/ver10/device/wsdl":RestoreSystem is a complexType.
struct _ns8__RestoreSystem
{
/// Size of array of struct ns3__BackupFile* is 1..unbounded
   $int                                  __sizeBackupFiles              1;
/// Array struct ns3__BackupFile* of length 1..unbounded
    struct ns3__BackupFile*              BackupFiles                    1;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":RestoreSystemResponse

/// "http://www.onvif.org/ver10/device/wsdl":RestoreSystemResponse is a complexType.
struct _ns8__RestoreSystemResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemBackup

/// "http://www.onvif.org/ver10/device/wsdl":GetSystemBackup is a complexType.
struct _ns8__GetSystemBackup
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemBackupResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetSystemBackupResponse is a complexType.
struct _ns8__GetSystemBackupResponse
{
/// Size of array of struct ns3__BackupFile* is 1..unbounded
   $int                                  __sizeBackupFiles              1;
/// Array struct ns3__BackupFile* of length 1..unbounded
    struct ns3__BackupFile*              BackupFiles                    1;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemSupportInformation

/// "http://www.onvif.org/ver10/device/wsdl":GetSystemSupportInformation is a complexType.
struct _ns8__GetSystemSupportInformation
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemSupportInformationResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetSystemSupportInformationResponse is a complexType.
struct _ns8__GetSystemSupportInformationResponse
{
/// @brief Contains the arbitary device diagnostics information.
/// Element SupportInformation of type "http://www.onvif.org/ver10/schema":SupportInformation.
    struct ns3__SupportInformation*      SupportInformation             1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemLog

/// "http://www.onvif.org/ver10/device/wsdl":GetSystemLog is a complexType.
struct _ns8__GetSystemLog
{
/// @brief Specifies the type of system log to get.
/// Element LogType of type "http://www.onvif.org/ver10/schema":SystemLogType.
    enum ns3__SystemLogType              LogType                        1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemLogResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetSystemLogResponse is a complexType.
struct _ns8__GetSystemLogResponse
{
/// @brief Contains the system log information.
/// Element SystemLog of type "http://www.onvif.org/ver10/schema":SystemLog.
    struct ns3__SystemLog*               SystemLog                      1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetScopes

/// "http://www.onvif.org/ver10/device/wsdl":GetScopes is a complexType.
struct _ns8__GetScopes
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetScopesResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetScopesResponse is a complexType.
struct _ns8__GetScopesResponse
{
/// @brief Contains a list of URI definining the device scopes. Scope parameters can be of two types: fixed and configurable. Fixed parameters can not be altered.
/// Size of array of struct ns3__Scope* is 1..unbounded
   $int                                  __sizeScopes                   1;
/// Array struct ns3__Scope* of length 1..unbounded
    struct ns3__Scope*                   Scopes                         1;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetScopes

/// "http://www.onvif.org/ver10/device/wsdl":SetScopes is a complexType.
struct _ns8__SetScopes
{
/// @brief Contains a list of scope parameters that will replace all existing configurable scope parameters.
/// Size of array of xsd__anyURI* is 1..unbounded
   $int                                  __sizeScopes                   1;
/// Array xsd__anyURI* of length 1..unbounded
    xsd__anyURI*                         Scopes                         1;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetScopesResponse

/// "http://www.onvif.org/ver10/device/wsdl":SetScopesResponse is a complexType.
struct _ns8__SetScopesResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":AddScopes

/// "http://www.onvif.org/ver10/device/wsdl":AddScopes is a complexType.
struct _ns8__AddScopes
{
/// @brief Contains a list of new configurable scope parameters that will be added to the existing configurable scope.
/// Size of array of xsd__anyURI* is 1..unbounded
   $int                                  __sizeScopeItem                1;
/// Array xsd__anyURI* of length 1..unbounded
    xsd__anyURI*                         ScopeItem                      1;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":AddScopesResponse

/// "http://www.onvif.org/ver10/device/wsdl":AddScopesResponse is a complexType.
struct _ns8__AddScopesResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":RemoveScopes

/// "http://www.onvif.org/ver10/device/wsdl":RemoveScopes is a complexType.
struct _ns8__RemoveScopes
{
/// @brief Contains a list of URIs that should be removed from the device scope.<br/> Note that the response message always will match the request or an error will be returned. The use of the response is for that reason deprecated.
/// Size of array of xsd__anyURI* is 1..unbounded
   $int                                  __sizeScopeItem                1;
/// Array xsd__anyURI* of length 1..unbounded
    xsd__anyURI*                         ScopeItem                      1;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":RemoveScopesResponse

/// "http://www.onvif.org/ver10/device/wsdl":RemoveScopesResponse is a complexType.
struct _ns8__RemoveScopesResponse
{
/// @brief Contains a list of URIs that has been removed from the device scope
/// Size of array of xsd__anyURI* is 0..unbounded
   $int                                  __sizeScopeItem                0;
/// Array xsd__anyURI* of length 0..unbounded
    xsd__anyURI*                         ScopeItem                      0;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDiscoveryMode

/// "http://www.onvif.org/ver10/device/wsdl":GetDiscoveryMode is a complexType.
struct _ns8__GetDiscoveryMode
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDiscoveryModeResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetDiscoveryModeResponse is a complexType.
struct _ns8__GetDiscoveryModeResponse
{
/// @brief Indicator of discovery mode: Discoverable, NonDiscoverable.
/// Element DiscoveryMode of type "http://www.onvif.org/ver10/schema":DiscoveryMode.
    enum ns3__DiscoveryMode              DiscoveryMode                  1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDiscoveryMode

/// "http://www.onvif.org/ver10/device/wsdl":SetDiscoveryMode is a complexType.
struct _ns8__SetDiscoveryMode
{
/// @brief Indicator of discovery mode: Discoverable, NonDiscoverable.
/// Element DiscoveryMode of type "http://www.onvif.org/ver10/schema":DiscoveryMode.
    enum ns3__DiscoveryMode              DiscoveryMode                  1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDiscoveryModeResponse

/// "http://www.onvif.org/ver10/device/wsdl":SetDiscoveryModeResponse is a complexType.
struct _ns8__SetDiscoveryModeResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetRemoteDiscoveryMode

/// "http://www.onvif.org/ver10/device/wsdl":GetRemoteDiscoveryMode is a complexType.
struct _ns8__GetRemoteDiscoveryMode
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetRemoteDiscoveryModeResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetRemoteDiscoveryModeResponse is a complexType.
struct _ns8__GetRemoteDiscoveryModeResponse
{
/// @brief Indicator of discovery mode: Discoverable, NonDiscoverable.
/// Element RemoteDiscoveryMode of type "http://www.onvif.org/ver10/schema":DiscoveryMode.
    enum ns3__DiscoveryMode              RemoteDiscoveryMode            1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetRemoteDiscoveryMode

/// "http://www.onvif.org/ver10/device/wsdl":SetRemoteDiscoveryMode is a complexType.
struct _ns8__SetRemoteDiscoveryMode
{
/// @brief Indicator of discovery mode: Discoverable, NonDiscoverable.
/// Element RemoteDiscoveryMode of type "http://www.onvif.org/ver10/schema":DiscoveryMode.
    enum ns3__DiscoveryMode              RemoteDiscoveryMode            1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetRemoteDiscoveryModeResponse

/// "http://www.onvif.org/ver10/device/wsdl":SetRemoteDiscoveryModeResponse is a complexType.
struct _ns8__SetRemoteDiscoveryModeResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDPAddresses

/// "http://www.onvif.org/ver10/device/wsdl":GetDPAddresses is a complexType.
struct _ns8__GetDPAddresses
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDPAddressesResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetDPAddressesResponse is a complexType.
struct _ns8__GetDPAddressesResponse
{
/// Size of array of struct ns3__NetworkHost* is 0..unbounded
   $int                                  __sizeDPAddress                0;
/// Array struct ns3__NetworkHost* of length 0..unbounded
    struct ns3__NetworkHost*             DPAddress                      0;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDPAddresses

/// "http://www.onvif.org/ver10/device/wsdl":SetDPAddresses is a complexType.
struct _ns8__SetDPAddresses
{
/// Size of array of struct ns3__NetworkHost* is 0..unbounded
   $int                                  __sizeDPAddress                0;
/// Array struct ns3__NetworkHost* of length 0..unbounded
    struct ns3__NetworkHost*             DPAddress                      0;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDPAddressesResponse

/// "http://www.onvif.org/ver10/device/wsdl":SetDPAddressesResponse is a complexType.
struct _ns8__SetDPAddressesResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetEndpointReference

/// "http://www.onvif.org/ver10/device/wsdl":GetEndpointReference is a complexType.
struct _ns8__GetEndpointReference
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetEndpointReferenceResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetEndpointReferenceResponse is a complexType.
struct _ns8__GetEndpointReferenceResponse
{
/// Element GUID of type xs:string.
    char*                                GUID                           1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetRemoteUser

/// "http://www.onvif.org/ver10/device/wsdl":GetRemoteUser is a complexType.
struct _ns8__GetRemoteUser
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetRemoteUserResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetRemoteUserResponse is a complexType.
struct _ns8__GetRemoteUserResponse
{
/// Element RemoteUser of type "http://www.onvif.org/ver10/schema":RemoteUser.
    struct ns3__RemoteUser*              RemoteUser                     0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetRemoteUser

/// "http://www.onvif.org/ver10/device/wsdl":SetRemoteUser is a complexType.
struct _ns8__SetRemoteUser
{
/// Element RemoteUser of type "http://www.onvif.org/ver10/schema":RemoteUser.
    struct ns3__RemoteUser*              RemoteUser                     0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetRemoteUserResponse

/// "http://www.onvif.org/ver10/device/wsdl":SetRemoteUserResponse is a complexType.
struct _ns8__SetRemoteUserResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetUsers

/// "http://www.onvif.org/ver10/device/wsdl":GetUsers is a complexType.
struct _ns8__GetUsers
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetUsersResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetUsersResponse is a complexType.
struct _ns8__GetUsersResponse
{
/// @brief Contains a list of the onvif users and following information is included in each entry: username and user level.
/// Size of array of struct ns3__User* is 0..unbounded
   $int                                  __sizeUser                     0;
/// Array struct ns3__User* of length 0..unbounded
    struct ns3__User*                    User                           0;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":CreateUsers

/// "http://www.onvif.org/ver10/device/wsdl":CreateUsers is a complexType.
struct _ns8__CreateUsers
{
/// @brief Creates new device users and corresponding credentials. Each user entry includes: username, password and user level. Either all users are created successfully or a fault message MUST be returned without creating any user. If trying to create several users with exactly the same username the request is rejected and no users are created. If password is missing, then fault message Too weak password is returned.
/// Size of array of struct ns3__User* is 1..unbounded
   $int                                  __sizeUser                     1;
/// Array struct ns3__User* of length 1..unbounded
    struct ns3__User*                    User                           1;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":CreateUsersResponse

/// "http://www.onvif.org/ver10/device/wsdl":CreateUsersResponse is a complexType.
struct _ns8__CreateUsersResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteUsers

/// "http://www.onvif.org/ver10/device/wsdl":DeleteUsers is a complexType.
struct _ns8__DeleteUsers
{
/// @brief Deletes users on an device and there may exist users that cannot be deleted to ensure access to the unit. Either all users are deleted successfully or a fault message MUST be returned and no users be deleted. If a username exists multiple times in the request, then a fault message is returned.
/// Size of array of char** is 1..unbounded
   $int                                  __sizeUsername                 1;
/// Array char** of length 1..unbounded
    char**                               Username                       1;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteUsersResponse

/// "http://www.onvif.org/ver10/device/wsdl":DeleteUsersResponse is a complexType.
struct _ns8__DeleteUsersResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetUser

/// "http://www.onvif.org/ver10/device/wsdl":SetUser is a complexType.
struct _ns8__SetUser
{
/// @brief Updates the credentials for one or several users on an device. Either all change requests are processed successfully or a fault message MUST be returned. If the request contains the same username multiple times, a fault message is returned.
/// Size of array of struct ns3__User* is 1..unbounded
   $int                                  __sizeUser                     1;
/// Array struct ns3__User* of length 1..unbounded
    struct ns3__User*                    User                           1;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetUserResponse

/// "http://www.onvif.org/ver10/device/wsdl":SetUserResponse is a complexType.
struct _ns8__SetUserResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetWsdlUrl

/// "http://www.onvif.org/ver10/device/wsdl":GetWsdlUrl is a complexType.
struct _ns8__GetWsdlUrl
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetWsdlUrlResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetWsdlUrlResponse is a complexType.
struct _ns8__GetWsdlUrlResponse
{
/// Element WsdlUrl of type xs:anyURI.
    xsd__anyURI                          WsdlUrl                        1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCapabilities

/// "http://www.onvif.org/ver10/device/wsdl":GetCapabilities is a complexType.
struct _ns8__GetCapabilities
{
/// @brief List of categories to retrieve capability information on.
/// Size of array of enum ns3__CapabilityCategory* is 0..unbounded
   $int                                  __sizeCategory                 0;
/// Array enum ns3__CapabilityCategory* of length 0..unbounded
    enum ns3__CapabilityCategory*        Category                       0;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCapabilitiesResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetCapabilitiesResponse is a complexType.
struct _ns8__GetCapabilitiesResponse
{
/// @brief Capability information.
/// Element Capabilities of type "http://www.onvif.org/ver10/schema":Capabilities.
    struct ns3__Capabilities*            Capabilities                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetHostname

/// "http://www.onvif.org/ver10/device/wsdl":GetHostname is a complexType.
struct _ns8__GetHostname
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetHostnameResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetHostnameResponse is a complexType.
struct _ns8__GetHostnameResponse
{
/// @brief Contains the hostname information.
/// Element HostnameInformation of type "http://www.onvif.org/ver10/schema":HostnameInformation.
    struct ns3__HostnameInformation*     HostnameInformation            1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetHostname

/// "http://www.onvif.org/ver10/device/wsdl":SetHostname is a complexType.
struct _ns8__SetHostname
{
/// @brief The hostname to set.
/// Element Name of type xs:token.
    xsd__token                           Name                           1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetHostnameResponse

/// "http://www.onvif.org/ver10/device/wsdl":SetHostnameResponse is a complexType.
struct _ns8__SetHostnameResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetHostnameFromDHCP

/// "http://www.onvif.org/ver10/device/wsdl":SetHostnameFromDHCP is a complexType.
struct _ns8__SetHostnameFromDHCP
{
/// @brief True if the hostname shall be obtained via DHCP.
/// Element FromDHCP of type xs:boolean.
    enum xsd__boolean                    FromDHCP                       1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetHostnameFromDHCPResponse

/// "http://www.onvif.org/ver10/device/wsdl":SetHostnameFromDHCPResponse is a complexType.
struct _ns8__SetHostnameFromDHCPResponse
{
/// @brief Indicates whether or not a reboot is required after configuration updates.
/// Element RebootNeeded of type xs:boolean.
    enum xsd__boolean                    RebootNeeded                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDNS

/// "http://www.onvif.org/ver10/device/wsdl":GetDNS is a complexType.
struct _ns8__GetDNS
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDNSResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetDNSResponse is a complexType.
struct _ns8__GetDNSResponse
{
/// @brief DNS information.
/// Element DNSInformation of type "http://www.onvif.org/ver10/schema":DNSInformation.
    struct ns3__DNSInformation*          DNSInformation                 1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDNS

/// "http://www.onvif.org/ver10/device/wsdl":SetDNS is a complexType.
struct _ns8__SetDNS
{
/// @brief Indicate if the DNS address is to be retrieved using DHCP.
/// Element FromDHCP of type xs:boolean.
    enum xsd__boolean                    FromDHCP                       1;	///< Required element.
/// @brief DNS search domain.
/// Size of array of xsd__token* is 0..unbounded
   $int                                  __sizeSearchDomain             0;
/// Array xsd__token* of length 0..unbounded
    xsd__token*                          SearchDomain                   0;
/// @brief DNS address(es) set manually.
/// Size of array of struct ns3__IPAddress* is 0..unbounded
   $int                                  __sizeDNSManual                0;
/// Array struct ns3__IPAddress* of length 0..unbounded
    struct ns3__IPAddress*               DNSManual                      0;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDNSResponse

/// "http://www.onvif.org/ver10/device/wsdl":SetDNSResponse is a complexType.
struct _ns8__SetDNSResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetNTP

/// "http://www.onvif.org/ver10/device/wsdl":GetNTP is a complexType.
struct _ns8__GetNTP
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetNTPResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetNTPResponse is a complexType.
struct _ns8__GetNTPResponse
{
/// @brief NTP information.
/// Element NTPInformation of type "http://www.onvif.org/ver10/schema":NTPInformation.
    struct ns3__NTPInformation*          NTPInformation                 1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetNTP

/// "http://www.onvif.org/ver10/device/wsdl":SetNTP is a complexType.
struct _ns8__SetNTP
{
/// @brief Indicate if NTP address information is to be retrieved using DHCP.
/// Element FromDHCP of type xs:boolean.
    enum xsd__boolean                    FromDHCP                       1;	///< Required element.
/// @brief Manual NTP settings.
/// Size of array of struct ns3__NetworkHost* is 0..unbounded
   $int                                  __sizeNTPManual                0;
/// Array struct ns3__NetworkHost* of length 0..unbounded
    struct ns3__NetworkHost*             NTPManual                      0;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetNTPResponse

/// "http://www.onvif.org/ver10/device/wsdl":SetNTPResponse is a complexType.
struct _ns8__SetNTPResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDynamicDNS

/// "http://www.onvif.org/ver10/device/wsdl":GetDynamicDNS is a complexType.
struct _ns8__GetDynamicDNS
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDynamicDNSResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetDynamicDNSResponse is a complexType.
struct _ns8__GetDynamicDNSResponse
{
/// @brief Dynamic DNS information.
/// Element DynamicDNSInformation of type "http://www.onvif.org/ver10/schema":DynamicDNSInformation.
    struct ns3__DynamicDNSInformation*   DynamicDNSInformation          1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDynamicDNS

/// "http://www.onvif.org/ver10/device/wsdl":SetDynamicDNS is a complexType.
struct _ns8__SetDynamicDNS
{
/// @brief Dynamic DNS type.
/// Element Type of type "http://www.onvif.org/ver10/schema":DynamicDNSType.
    enum ns3__DynamicDNSType             Type                           1;	///< Required element.
/// @brief DNS name.
/// Element Name of type "http://www.onvif.org/ver10/schema":DNSName.
    ns3__DNSName*                        Name                           0;	///< Optional element.
/// @brief DNS record time to live.
/// Element TTL of type xs:duration.
    xsd__duration                        TTL                            0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDynamicDNSResponse

/// "http://www.onvif.org/ver10/device/wsdl":SetDynamicDNSResponse is a complexType.
struct _ns8__SetDynamicDNSResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetNetworkInterfaces

/// "http://www.onvif.org/ver10/device/wsdl":GetNetworkInterfaces is a complexType.
struct _ns8__GetNetworkInterfaces
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetNetworkInterfacesResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetNetworkInterfacesResponse is a complexType.
struct _ns8__GetNetworkInterfacesResponse
{
/// @brief List of network interfaces.
/// Size of array of struct ns3__NetworkInterface* is 1..unbounded
   $int                                  __sizeNetworkInterfaces        1;
/// Array struct ns3__NetworkInterface* of length 1..unbounded
    struct ns3__NetworkInterface*        NetworkInterfaces              1;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetNetworkInterfaces

/// "http://www.onvif.org/ver10/device/wsdl":SetNetworkInterfaces is a complexType.
struct _ns8__SetNetworkInterfaces
{
/// @brief Symbolic network interface name.
/// Element InterfaceToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  InterfaceToken                 1;	///< Required element.
/// @brief Network interface name.
/// Element NetworkInterface of type "http://www.onvif.org/ver10/schema":NetworkInterfaceSetConfiguration.
    struct ns3__NetworkInterfaceSetConfiguration*  NetworkInterface               1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetNetworkInterfacesResponse

/// "http://www.onvif.org/ver10/device/wsdl":SetNetworkInterfacesResponse is a complexType.
struct _ns8__SetNetworkInterfacesResponse
{
/// @brief Indicates whether or not a reboot is required after configuration updates.
/// Element RebootNeeded of type xs:boolean.
    enum xsd__boolean                    RebootNeeded                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetNetworkProtocols

/// "http://www.onvif.org/ver10/device/wsdl":GetNetworkProtocols is a complexType.
struct _ns8__GetNetworkProtocols
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetNetworkProtocolsResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetNetworkProtocolsResponse is a complexType.
struct _ns8__GetNetworkProtocolsResponse
{
/// @brief Contains an array of defined protocols supported by the device. There are three protocols defined; HTTP, HTTPS and RTSP. The following parameters can be retrieved for each protocol: port and enable/disable.
/// Size of array of struct ns3__NetworkProtocol* is 0..unbounded
   $int                                  __sizeNetworkProtocols         0;
/// Array struct ns3__NetworkProtocol* of length 0..unbounded
    struct ns3__NetworkProtocol*         NetworkProtocols               0;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetNetworkProtocols

/// "http://www.onvif.org/ver10/device/wsdl":SetNetworkProtocols is a complexType.
struct _ns8__SetNetworkProtocols
{
/// @brief Configures one or more defined network protocols supported by the device. There are currently three protocols defined; HTTP, HTTPS and RTSP. The following parameters can be set for each protocol: port and enable/disable.
/// Size of array of struct ns3__NetworkProtocol* is 1..unbounded
   $int                                  __sizeNetworkProtocols         1;
/// Array struct ns3__NetworkProtocol* of length 1..unbounded
    struct ns3__NetworkProtocol*         NetworkProtocols               1;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetNetworkProtocolsResponse

/// "http://www.onvif.org/ver10/device/wsdl":SetNetworkProtocolsResponse is a complexType.
struct _ns8__SetNetworkProtocolsResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetNetworkDefaultGateway

/// "http://www.onvif.org/ver10/device/wsdl":GetNetworkDefaultGateway is a complexType.
struct _ns8__GetNetworkDefaultGateway
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetNetworkDefaultGatewayResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetNetworkDefaultGatewayResponse is a complexType.
struct _ns8__GetNetworkDefaultGatewayResponse
{
/// @brief Gets the default IPv4 and IPv6 gateway settings from the device.
/// Element NetworkGateway of type "http://www.onvif.org/ver10/schema":NetworkGateway.
    struct ns3__NetworkGateway*          NetworkGateway                 1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetNetworkDefaultGateway

/// "http://www.onvif.org/ver10/device/wsdl":SetNetworkDefaultGateway is a complexType.
struct _ns8__SetNetworkDefaultGateway
{
/// @brief Sets IPv4 gateway address used as default setting.
/// Size of array of ns3__IPv4Address* is 0..unbounded
   $int                                  __sizeIPv4Address              0;
/// Array ns3__IPv4Address* of length 0..unbounded
    ns3__IPv4Address*                    IPv4Address                    0;
/// @brief Sets IPv6 gateway address used as default setting.
/// Size of array of ns3__IPv6Address* is 0..unbounded
   $int                                  __sizeIPv6Address              0;
/// Array ns3__IPv6Address* of length 0..unbounded
    ns3__IPv6Address*                    IPv6Address                    0;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetNetworkDefaultGatewayResponse

/// "http://www.onvif.org/ver10/device/wsdl":SetNetworkDefaultGatewayResponse is a complexType.
struct _ns8__SetNetworkDefaultGatewayResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetZeroConfiguration

/// "http://www.onvif.org/ver10/device/wsdl":GetZeroConfiguration is a complexType.
struct _ns8__GetZeroConfiguration
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetZeroConfigurationResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetZeroConfigurationResponse is a complexType.
struct _ns8__GetZeroConfigurationResponse
{
/// @brief Contains the zero-configuration.
/// Element ZeroConfiguration of type "http://www.onvif.org/ver10/schema":NetworkZeroConfiguration.
    struct ns3__NetworkZeroConfiguration*  ZeroConfiguration              1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetZeroConfiguration

/// "http://www.onvif.org/ver10/device/wsdl":SetZeroConfiguration is a complexType.
struct _ns8__SetZeroConfiguration
{
/// @brief Unique identifier referencing the physical interface.
/// Element InterfaceToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  InterfaceToken                 1;	///< Required element.
/// @brief Specifies if the zero-configuration should be enabled or not.
/// Element Enabled of type xs:boolean.
    enum xsd__boolean                    Enabled                        1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetZeroConfigurationResponse

/// "http://www.onvif.org/ver10/device/wsdl":SetZeroConfigurationResponse is a complexType.
struct _ns8__SetZeroConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetIPAddressFilter

/// "http://www.onvif.org/ver10/device/wsdl":GetIPAddressFilter is a complexType.
struct _ns8__GetIPAddressFilter
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetIPAddressFilterResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetIPAddressFilterResponse is a complexType.
struct _ns8__GetIPAddressFilterResponse
{
/// Element IPAddressFilter of type "http://www.onvif.org/ver10/schema":IPAddressFilter.
    struct ns3__IPAddressFilter*         IPAddressFilter                1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetIPAddressFilter

/// "http://www.onvif.org/ver10/device/wsdl":SetIPAddressFilter is a complexType.
struct _ns8__SetIPAddressFilter
{
/// Element IPAddressFilter of type "http://www.onvif.org/ver10/schema":IPAddressFilter.
    struct ns3__IPAddressFilter*         IPAddressFilter                1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetIPAddressFilterResponse

/// "http://www.onvif.org/ver10/device/wsdl":SetIPAddressFilterResponse is a complexType.
struct _ns8__SetIPAddressFilterResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":AddIPAddressFilter

/// "http://www.onvif.org/ver10/device/wsdl":AddIPAddressFilter is a complexType.
struct _ns8__AddIPAddressFilter
{
/// Element IPAddressFilter of type "http://www.onvif.org/ver10/schema":IPAddressFilter.
    struct ns3__IPAddressFilter*         IPAddressFilter                1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":AddIPAddressFilterResponse

/// "http://www.onvif.org/ver10/device/wsdl":AddIPAddressFilterResponse is a complexType.
struct _ns8__AddIPAddressFilterResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":RemoveIPAddressFilter

/// "http://www.onvif.org/ver10/device/wsdl":RemoveIPAddressFilter is a complexType.
struct _ns8__RemoveIPAddressFilter
{
/// Element IPAddressFilter of type "http://www.onvif.org/ver10/schema":IPAddressFilter.
    struct ns3__IPAddressFilter*         IPAddressFilter                1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":RemoveIPAddressFilterResponse

/// "http://www.onvif.org/ver10/device/wsdl":RemoveIPAddressFilterResponse is a complexType.
struct _ns8__RemoveIPAddressFilterResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetAccessPolicy

/// "http://www.onvif.org/ver10/device/wsdl":GetAccessPolicy is a complexType.
struct _ns8__GetAccessPolicy
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetAccessPolicyResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetAccessPolicyResponse is a complexType.
struct _ns8__GetAccessPolicyResponse
{
/// Element PolicyFile of type "http://www.onvif.org/ver10/schema":BinaryData.
    struct ns3__BinaryData*              PolicyFile                     1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetAccessPolicy

/// "http://www.onvif.org/ver10/device/wsdl":SetAccessPolicy is a complexType.
struct _ns8__SetAccessPolicy
{
/// Element PolicyFile of type "http://www.onvif.org/ver10/schema":BinaryData.
    struct ns3__BinaryData*              PolicyFile                     1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetAccessPolicyResponse

/// "http://www.onvif.org/ver10/device/wsdl":SetAccessPolicyResponse is a complexType.
struct _ns8__SetAccessPolicyResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":CreateCertificate

/// "http://www.onvif.org/ver10/device/wsdl":CreateCertificate is a complexType.
struct _ns8__CreateCertificate
{
/// @brief Certificate id.
/// Element CertificateID of type xs:token.
    xsd__token                           CertificateID                  0;	///< Optional element.
/// @brief Identification of the entity associated with the public-key.
/// Element Subject of type xs:string.
    char*                                Subject                        0;	///< Optional element.
/// @brief Certificate validity start date.
/// Element ValidNotBefore of type xs:dateTime.
    time_t*                              ValidNotBefore                 0;	///< Optional element.
/// @brief Certificate expiry start date.
/// Element ValidNotAfter of type xs:dateTime.
    time_t*                              ValidNotAfter                  0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":CreateCertificateResponse

/// "http://www.onvif.org/ver10/device/wsdl":CreateCertificateResponse is a complexType.
struct _ns8__CreateCertificateResponse
{
/// @brief base64 encoded DER representation of certificate.
/// Element NvtCertificate of type "http://www.onvif.org/ver10/schema":Certificate.
    struct ns3__Certificate*             NvtCertificate                 1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCertificates

/// "http://www.onvif.org/ver10/device/wsdl":GetCertificates is a complexType.
struct _ns8__GetCertificates
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCertificatesResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetCertificatesResponse is a complexType.
struct _ns8__GetCertificatesResponse
{
/// @brief Id and base64 encoded DER representation of all available certificates.
/// Size of array of struct ns3__Certificate* is 0..unbounded
   $int                                  __sizeNvtCertificate           0;
/// Array struct ns3__Certificate* of length 0..unbounded
    struct ns3__Certificate*             NvtCertificate                 0;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCertificatesStatus

/// "http://www.onvif.org/ver10/device/wsdl":GetCertificatesStatus is a complexType.
struct _ns8__GetCertificatesStatus
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCertificatesStatusResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetCertificatesStatusResponse is a complexType.
struct _ns8__GetCertificatesStatusResponse
{
/// @brief Indicates if a certificate is used in an optional HTTPS configuration of the device.
/// Size of array of struct ns3__CertificateStatus* is 0..unbounded
   $int                                  __sizeCertificateStatus        0;
/// Array struct ns3__CertificateStatus* of length 0..unbounded
    struct ns3__CertificateStatus*       CertificateStatus              0;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetCertificatesStatus

/// "http://www.onvif.org/ver10/device/wsdl":SetCertificatesStatus is a complexType.
struct _ns8__SetCertificatesStatus
{
/// @brief Indicates if a certificate is to be used in an optional HTTPS configuration of the device.
/// Size of array of struct ns3__CertificateStatus* is 0..unbounded
   $int                                  __sizeCertificateStatus        0;
/// Array struct ns3__CertificateStatus* of length 0..unbounded
    struct ns3__CertificateStatus*       CertificateStatus              0;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetCertificatesStatusResponse

/// "http://www.onvif.org/ver10/device/wsdl":SetCertificatesStatusResponse is a complexType.
struct _ns8__SetCertificatesStatusResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteCertificates

/// "http://www.onvif.org/ver10/device/wsdl":DeleteCertificates is a complexType.
struct _ns8__DeleteCertificates
{
/// @brief List of ids of certificates to delete.
/// Size of array of xsd__token* is 1..unbounded
   $int                                  __sizeCertificateID            1;
/// Array xsd__token* of length 1..unbounded
    xsd__token*                          CertificateID                  1;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteCertificatesResponse

/// "http://www.onvif.org/ver10/device/wsdl":DeleteCertificatesResponse is a complexType.
struct _ns8__DeleteCertificatesResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetPkcs10Request

/// "http://www.onvif.org/ver10/device/wsdl":GetPkcs10Request is a complexType.
struct _ns8__GetPkcs10Request
{
/// @brief List of ids of certificates to delete.
/// Element CertificateID of type xs:token.
    xsd__token                           CertificateID                  1;	///< Required element.
/// @brief Relative Dinstinguished Name(RDN) CommonName(CN).
/// Element Subject of type xs:string.
    char*                                Subject                        0;	///< Optional element.
/// @brief Optional base64 encoded DER attributes.
/// Element Attributes of type "http://www.onvif.org/ver10/schema":BinaryData.
    struct ns3__BinaryData*              Attributes                     0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetPkcs10RequestResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetPkcs10RequestResponse is a complexType.
struct _ns8__GetPkcs10RequestResponse
{
/// @brief base64 encoded DER representation of certificate.
/// Element Pkcs10Request of type "http://www.onvif.org/ver10/schema":BinaryData.
    struct ns3__BinaryData*              Pkcs10Request                  1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":LoadCertificates

/// "http://www.onvif.org/ver10/device/wsdl":LoadCertificates is a complexType.
struct _ns8__LoadCertificates
{
/// @brief Optional id and base64 encoded DER representation of certificate.
/// Size of array of struct ns3__Certificate* is 1..unbounded
   $int                                  __sizeNVTCertificate           1;
/// Array struct ns3__Certificate* of length 1..unbounded
    struct ns3__Certificate*             NVTCertificate                 1;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":LoadCertificatesResponse

/// "http://www.onvif.org/ver10/device/wsdl":LoadCertificatesResponse is a complexType.
struct _ns8__LoadCertificatesResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetClientCertificateMode

/// "http://www.onvif.org/ver10/device/wsdl":GetClientCertificateMode is a complexType.
struct _ns8__GetClientCertificateMode
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetClientCertificateModeResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetClientCertificateModeResponse is a complexType.
struct _ns8__GetClientCertificateModeResponse
{
/// @brief Indicates whether or not client certificates are required by device.
/// Element Enabled of type xs:boolean.
    enum xsd__boolean                    Enabled                        1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetClientCertificateMode

/// "http://www.onvif.org/ver10/device/wsdl":SetClientCertificateMode is a complexType.
struct _ns8__SetClientCertificateMode
{
/// @brief Indicates whether or not client certificates are required by device.
/// Element Enabled of type xs:boolean.
    enum xsd__boolean                    Enabled                        1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetClientCertificateModeResponse

/// "http://www.onvif.org/ver10/device/wsdl":SetClientCertificateModeResponse is a complexType.
struct _ns8__SetClientCertificateModeResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCACertificates

/// "http://www.onvif.org/ver10/device/wsdl":GetCACertificates is a complexType.
struct _ns8__GetCACertificates
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCACertificatesResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetCACertificatesResponse is a complexType.
struct _ns8__GetCACertificatesResponse
{
/// Size of array of struct ns3__Certificate* is 0..unbounded
   $int                                  __sizeCACertificate            0;
/// Array struct ns3__Certificate* of length 0..unbounded
    struct ns3__Certificate*             CACertificate                  0;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":LoadCertificateWithPrivateKey

/// "http://www.onvif.org/ver10/device/wsdl":LoadCertificateWithPrivateKey is a complexType.
struct _ns8__LoadCertificateWithPrivateKey
{
/// Size of array of struct ns3__CertificateWithPrivateKey* is 1..unbounded
   $int                                  __sizeCertificateWithPrivateKey 1;
/// Array struct ns3__CertificateWithPrivateKey* of length 1..unbounded
    struct ns3__CertificateWithPrivateKey*  CertificateWithPrivateKey      1;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":LoadCertificateWithPrivateKeyResponse

/// "http://www.onvif.org/ver10/device/wsdl":LoadCertificateWithPrivateKeyResponse is a complexType.
struct _ns8__LoadCertificateWithPrivateKeyResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCertificateInformation

/// "http://www.onvif.org/ver10/device/wsdl":GetCertificateInformation is a complexType.
struct _ns8__GetCertificateInformation
{
/// Element CertificateID of type xs:token.
    xsd__token                           CertificateID                  1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCertificateInformationResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetCertificateInformationResponse is a complexType.
struct _ns8__GetCertificateInformationResponse
{
/// Element CertificateInformation of type "http://www.onvif.org/ver10/schema":CertificateInformation.
    struct ns3__CertificateInformation*  CertificateInformation         1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":LoadCACertificates

/// "http://www.onvif.org/ver10/device/wsdl":LoadCACertificates is a complexType.
struct _ns8__LoadCACertificates
{
/// Size of array of struct ns3__Certificate* is 1..unbounded
   $int                                  __sizeCACertificate            1;
/// Array struct ns3__Certificate* of length 1..unbounded
    struct ns3__Certificate*             CACertificate                  1;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":LoadCACertificatesResponse

/// "http://www.onvif.org/ver10/device/wsdl":LoadCACertificatesResponse is a complexType.
struct _ns8__LoadCACertificatesResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":CreateDot1XConfiguration

/// "http://www.onvif.org/ver10/device/wsdl":CreateDot1XConfiguration is a complexType.
struct _ns8__CreateDot1XConfiguration
{
/// Element Dot1XConfiguration of type "http://www.onvif.org/ver10/schema":Dot1XConfiguration.
    struct ns3__Dot1XConfiguration*      Dot1XConfiguration             1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":CreateDot1XConfigurationResponse

/// "http://www.onvif.org/ver10/device/wsdl":CreateDot1XConfigurationResponse is a complexType.
struct _ns8__CreateDot1XConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDot1XConfiguration

/// "http://www.onvif.org/ver10/device/wsdl":SetDot1XConfiguration is a complexType.
struct _ns8__SetDot1XConfiguration
{
/// Element Dot1XConfiguration of type "http://www.onvif.org/ver10/schema":Dot1XConfiguration.
    struct ns3__Dot1XConfiguration*      Dot1XConfiguration             1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDot1XConfigurationResponse

/// "http://www.onvif.org/ver10/device/wsdl":SetDot1XConfigurationResponse is a complexType.
struct _ns8__SetDot1XConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDot1XConfiguration

/// "http://www.onvif.org/ver10/device/wsdl":GetDot1XConfiguration is a complexType.
struct _ns8__GetDot1XConfiguration
{
/// Element Dot1XConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  Dot1XConfigurationToken        1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDot1XConfigurationResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetDot1XConfigurationResponse is a complexType.
struct _ns8__GetDot1XConfigurationResponse
{
/// Element Dot1XConfiguration of type "http://www.onvif.org/ver10/schema":Dot1XConfiguration.
    struct ns3__Dot1XConfiguration*      Dot1XConfiguration             1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDot1XConfigurations

/// "http://www.onvif.org/ver10/device/wsdl":GetDot1XConfigurations is a complexType.
struct _ns8__GetDot1XConfigurations
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDot1XConfigurationsResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetDot1XConfigurationsResponse is a complexType.
struct _ns8__GetDot1XConfigurationsResponse
{
/// Size of array of struct ns3__Dot1XConfiguration* is 0..unbounded
   $int                                  __sizeDot1XConfiguration       0;
/// Array struct ns3__Dot1XConfiguration* of length 0..unbounded
    struct ns3__Dot1XConfiguration*      Dot1XConfiguration             0;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteDot1XConfiguration

/// "http://www.onvif.org/ver10/device/wsdl":DeleteDot1XConfiguration is a complexType.
struct _ns8__DeleteDot1XConfiguration
{
/// Size of array of ns3__ReferenceToken* is 0..unbounded
   $int                                  __sizeDot1XConfigurationToken  0;
/// Array ns3__ReferenceToken* of length 0..unbounded
    ns3__ReferenceToken*                 Dot1XConfigurationToken        0;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteDot1XConfigurationResponse

/// "http://www.onvif.org/ver10/device/wsdl":DeleteDot1XConfigurationResponse is a complexType.
struct _ns8__DeleteDot1XConfigurationResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetRelayOutputs

/// "http://www.onvif.org/ver10/device/wsdl":GetRelayOutputs is a complexType.
struct _ns8__GetRelayOutputs
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetRelayOutputsResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetRelayOutputsResponse is a complexType.
struct _ns8__GetRelayOutputsResponse
{
/// Size of array of struct ns3__RelayOutput* is 0..unbounded
   $int                                  __sizeRelayOutputs             0;
/// Array struct ns3__RelayOutput* of length 0..unbounded
    struct ns3__RelayOutput*             RelayOutputs                   0;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetRelayOutputSettings

/// "http://www.onvif.org/ver10/device/wsdl":SetRelayOutputSettings is a complexType.
struct _ns8__SetRelayOutputSettings
{
/// Element RelayOutputToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  RelayOutputToken               1;	///< Required element.
/// Element Properties of type "http://www.onvif.org/ver10/schema":RelayOutputSettings.
    struct ns3__RelayOutputSettings*     Properties                     1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetRelayOutputSettingsResponse

/// "http://www.onvif.org/ver10/device/wsdl":SetRelayOutputSettingsResponse is a complexType.
struct _ns8__SetRelayOutputSettingsResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetRelayOutputState

/// "http://www.onvif.org/ver10/device/wsdl":SetRelayOutputState is a complexType.
struct _ns8__SetRelayOutputState
{
/// Element RelayOutputToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  RelayOutputToken               1;	///< Required element.
/// Element LogicalState of type "http://www.onvif.org/ver10/schema":RelayLogicalState.
    enum ns3__RelayLogicalState          LogicalState                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetRelayOutputStateResponse

/// "http://www.onvif.org/ver10/device/wsdl":SetRelayOutputStateResponse is a complexType.
struct _ns8__SetRelayOutputStateResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SendAuxiliaryCommand

/// "http://www.onvif.org/ver10/device/wsdl":SendAuxiliaryCommand is a complexType.
struct _ns8__SendAuxiliaryCommand
{
/// Element AuxiliaryCommand of type "http://www.onvif.org/ver10/schema":AuxiliaryData.
    ns3__AuxiliaryData                   AuxiliaryCommand               1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":SendAuxiliaryCommandResponse

/// "http://www.onvif.org/ver10/device/wsdl":SendAuxiliaryCommandResponse is a complexType.
struct _ns8__SendAuxiliaryCommandResponse
{
/// Element AuxiliaryCommandResponse of type "http://www.onvif.org/ver10/schema":AuxiliaryData.
    ns3__AuxiliaryData                   AuxiliaryCommandResponse       0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDot11Capabilities

/// "http://www.onvif.org/ver10/device/wsdl":GetDot11Capabilities is a complexType.
struct _ns8__GetDot11Capabilities
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDot11CapabilitiesResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetDot11CapabilitiesResponse is a complexType.
struct _ns8__GetDot11CapabilitiesResponse
{
/// Element Capabilities of type "http://www.onvif.org/ver10/schema":Dot11Capabilities.
    struct ns3__Dot11Capabilities*       Capabilities                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDot11Status

/// "http://www.onvif.org/ver10/device/wsdl":GetDot11Status is a complexType.
struct _ns8__GetDot11Status
{
/// Element InterfaceToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  InterfaceToken                 1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDot11StatusResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetDot11StatusResponse is a complexType.
struct _ns8__GetDot11StatusResponse
{
/// Element Status of type "http://www.onvif.org/ver10/schema":Dot11Status.
    struct ns3__Dot11Status*             Status                         1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":ScanAvailableDot11Networks

/// "http://www.onvif.org/ver10/device/wsdl":ScanAvailableDot11Networks is a complexType.
struct _ns8__ScanAvailableDot11Networks
{
/// Element InterfaceToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  InterfaceToken                 1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":ScanAvailableDot11NetworksResponse

/// "http://www.onvif.org/ver10/device/wsdl":ScanAvailableDot11NetworksResponse is a complexType.
struct _ns8__ScanAvailableDot11NetworksResponse
{
/// Size of array of struct ns3__Dot11AvailableNetworks* is 0..unbounded
   $int                                  __sizeNetworks                 0;
/// Array struct ns3__Dot11AvailableNetworks* of length 0..unbounded
    struct ns3__Dot11AvailableNetworks*  Networks                       0;
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemUris

/// "http://www.onvif.org/ver10/device/wsdl":GetSystemUris is a complexType.
struct _ns8__GetSystemUris
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemUrisResponse

/// "http://www.onvif.org/ver10/device/wsdl":GetSystemUrisResponse is a complexType.
struct _ns8__GetSystemUrisResponse
{
/// Element SystemLogUris of type "http://www.onvif.org/ver10/schema":SystemLogUriList.
    struct ns3__SystemLogUriList*        SystemLogUris                  0;	///< Optional element.
/// Element SupportInfoUri of type xs:anyURI.
    xsd__anyURI                          SupportInfoUri                 0;	///< Optional element.
/// Element SystemBackupUri of type xs:anyURI.
    xsd__anyURI                          SystemBackupUri                0;	///< Optional element.
    struct _ns8__GetSystemUrisResponse_Extension
    {
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
    }                                   *Extension                      0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":StartFirmwareUpgrade

/// "http://www.onvif.org/ver10/device/wsdl":StartFirmwareUpgrade is a complexType.
struct _ns8__StartFirmwareUpgrade
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":StartFirmwareUpgradeResponse

/// "http://www.onvif.org/ver10/device/wsdl":StartFirmwareUpgradeResponse is a complexType.
struct _ns8__StartFirmwareUpgradeResponse
{
/// Element UploadUri of type xs:anyURI.
    xsd__anyURI                          UploadUri                      1;	///< Required element.
/// Element UploadDelay of type xs:duration.
    xsd__duration                        UploadDelay                    1;	///< Required element.
/// Element ExpectedDownTime of type xs:duration.
    xsd__duration                        ExpectedDownTime               1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":StartSystemRestore

/// "http://www.onvif.org/ver10/device/wsdl":StartSystemRestore is a complexType.
struct _ns8__StartSystemRestore
{
};


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":StartSystemRestoreResponse

/// "http://www.onvif.org/ver10/device/wsdl":StartSystemRestoreResponse is a complexType.
struct _ns8__StartSystemRestoreResponse
{
/// Element UploadUri of type xs:anyURI.
    xsd__anyURI                          UploadUri                      1;	///< Required element.
/// Element ExpectedDownTime of type xs:duration.
    xsd__duration                        ExpectedDownTime               1;	///< Required element.
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.onvif.org/ver10/events/wsdl                                   *
 *                                                                            *
\******************************************************************************/


/// "http://www.onvif.org/ver10/events/wsdl":Capabilities is a complexType.
struct ns9__Capabilities
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// @brief Indicates that the WS Subscription policy is supported.
/// Attribute WSSubscriptionPolicySupport of type xs:boolean.
   @enum xsd__boolean*                   WSSubscriptionPolicySupport    0;	///< Optional attribute.
/// @brief Indicates that the WS Pull Point is supported.
/// Attribute WSPullPointSupport of type xs:boolean.
   @enum xsd__boolean*                   WSPullPointSupport             0;	///< Optional attribute.
/// @brief Indicates that the WS Pausable Subscription Manager Interface is supported.
/// Attribute WSPausableSubscriptionManagerInterfaceSupport of type xs:boolean.
   @enum xsd__boolean*                   WSPausableSubscriptionManagerInterfaceSupport 0;	///< Optional attribute.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};


/// Top-level root element "http://www.onvif.org/ver10/events/wsdl":GetServiceCapabilities

/// "http://www.onvif.org/ver10/events/wsdl":GetServiceCapabilities is a complexType.
struct _ns9__GetServiceCapabilities
{
};


/// Top-level root element "http://www.onvif.org/ver10/events/wsdl":GetServiceCapabilitiesResponse

/// "http://www.onvif.org/ver10/events/wsdl":GetServiceCapabilitiesResponse is a complexType.
struct _ns9__GetServiceCapabilitiesResponse
{
/// @brief The capabilities for the event service is returned in the Capabilities element.
/// Element Capabilities of type "http://www.onvif.org/ver10/events/wsdl":Capabilities.
    struct ns9__Capabilities*            Capabilities                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver10/events/wsdl":CreatePullPointSubscription

/// "http://www.onvif.org/ver10/events/wsdl":CreatePullPointSubscription is a complexType.
struct _ns9__CreatePullPointSubscription
{
/// @brief Optional XPATH expression to select specific topics.
/// Element Filter of type "http://docs.oasis-open.org/wsn/b-2":FilterType.
    struct ns4__FilterType*              Filter                         0;	///< Optional element.
/// @brief Initial termination time.
/// Element InitialTerminationTime of type "http://docs.oasis-open.org/wsn/b-2":AbsoluteOrRelativeTimeType.
    ns4__AbsoluteOrRelativeTimeType      InitialTerminationTime         0;	///< Nullable pointer.
/// @brief Refer to <a href="http://docs.oasis-open.org/wsn/wsn-ws_base_notification-1.3-spec-os.htm">Web Services Base Notification 1.3 (WS-BaseNotification)</a>.
    struct _ns9__CreatePullPointSubscription_SubscriptionPolicy
    {
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
    }                                   *SubscriptionPolicy             0;	///< Optional element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/events/wsdl":CreatePullPointSubscriptionResponse

/// "http://www.onvif.org/ver10/events/wsdl":CreatePullPointSubscriptionResponse is a complexType.
struct _ns9__CreatePullPointSubscriptionResponse
{
/// @brief Endpoint reference of the subscription to be used for pulling the messages.
/// Element SubscriptionReference of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  SubscriptionReference          1;	///< Required element.
/// @brief Current time of the server for synchronization purposes.
/// Element reference "http://docs.oasis-open.org/wsn/b-2":CurrentTime.
    time_t                               ns4__CurrentTime               1;	///< Required element.
/// @brief Date time when the PullPoint will be shut down without further pull requests.
/// Element reference "http://docs.oasis-open.org/wsn/b-2":TerminationTime.
    time_t                               ns4__TerminationTime           1;	///< Required element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/events/wsdl":PullMessages

/// "http://www.onvif.org/ver10/events/wsdl":PullMessages is a complexType.
struct _ns9__PullMessages
{
/// @brief Maximum time to block until this method returns.
/// Element Timeout of type xs:duration.
    xsd__duration                        Timeout                        1;	///< Required element.
/// @brief Upper limit for the number of messages to return at once. A server implementation may decide to return less messages.
/// Element MessageLimit of type xs:int.
    int                                  MessageLimit                   1;	///< Required element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/events/wsdl":PullMessagesResponse

/// "http://www.onvif.org/ver10/events/wsdl":PullMessagesResponse is a complexType.
struct _ns9__PullMessagesResponse
{
/// @brief The date and time when the messages have been delivered by the web server to the client.
/// Element CurrentTime of type xs:dateTime.
    time_t                               CurrentTime                    1;	///< Required element.
/// @brief Date time when the PullPoint will be shut down without further pull requests.
/// Element TerminationTime of type xs:dateTime.
    time_t                               TerminationTime                1;	///< Required element.
/// @brief List of messages. This list shall be empty in case of a timeout.
/// Size of the dynamic array of struct ns4__NotificationMessageHolderType* is 0..unbounded
   $int                                  __sizeNotificationMessage      0;
/// Array struct ns4__NotificationMessageHolderType* of length 0..unbounded
    struct ns4__NotificationMessageHolderType*  ns4__NotificationMessage       0;
};


/// Top-level root element "http://www.onvif.org/ver10/events/wsdl":PullMessagesFaultResponse

/// "http://www.onvif.org/ver10/events/wsdl":PullMessagesFaultResponse is a complexType.
struct _ns9__PullMessagesFaultResponse
{
/// @brief Maximum timeout supported by the device.
/// Element MaxTimeout of type xs:duration.
    xsd__duration                        MaxTimeout                     1;	///< Required element.
/// @brief Maximum message limit supported by the device.
/// Element MaxMessageLimit of type xs:int.
    int                                  MaxMessageLimit                1;	///< Required element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};


/// Top-level root element "http://www.onvif.org/ver10/events/wsdl":SetSynchronizationPoint

/// "http://www.onvif.org/ver10/events/wsdl":SetSynchronizationPoint is a complexType.
struct _ns9__SetSynchronizationPoint
{
};


/// Top-level root element "http://www.onvif.org/ver10/events/wsdl":SetSynchronizationPointResponse

/// "http://www.onvif.org/ver10/events/wsdl":SetSynchronizationPointResponse is a complexType.
struct _ns9__SetSynchronizationPointResponse
{
};


/// Top-level root element "http://www.onvif.org/ver10/events/wsdl":GetEventProperties

/// "http://www.onvif.org/ver10/events/wsdl":GetEventProperties is a complexType.
struct _ns9__GetEventProperties
{
};


/// Top-level root element "http://www.onvif.org/ver10/events/wsdl":GetEventPropertiesResponse

/// "http://www.onvif.org/ver10/events/wsdl":GetEventPropertiesResponse is a complexType.
struct _ns9__GetEventPropertiesResponse
{
/// @brief List of topic namespaces supported.
/// Size of array of xsd__anyURI* is 1..unbounded
   $int                                  __sizeTopicNamespaceLocation   1;
/// Array xsd__anyURI* of length 1..unbounded
    xsd__anyURI*                         TopicNamespaceLocation         1;
/// @brief True when topicset is fixed for all times.
/// Element reference "http://docs.oasis-open.org/wsn/b-2":FixedTopicSet.
    enum xsd__boolean                    ns4__FixedTopicSet             1;	///< Required element.
/// @brief Set of topics supported.
/// Element reference "http://docs.oasis-open.org/wsn/t-1":TopicSet.
    struct ns7__TopicSetType*            ns7__TopicSet                  1;	///< Required element.
/// @brief Defines the XPath expression syntax supported for matching topic expressions. <br/> The following TopicExpressionDialects are mandatory for an ONVIF compliant device (see Section 15.7.3): <ul type="disc"> <li>http://docs.oasis-open.org/wsn/t-1/TopicExpression/Concrete</li> <li>http://www.onvif.org/ver10/tev/topicExpression/ConcreteSet.</li> </ul>
/// Size of the dynamic array of xsd__anyURI* is 1..unbounded
   $int                                  __sizeTopicExpressionDialect   1;
/// Array xsd__anyURI* of length 1..unbounded
    xsd__anyURI*                         ns4__TopicExpressionDialect    1;
/// @brief Defines the XPath function set supported for message content filtering.<br/> The following MessageContentFilterDialects are mandatory for an ONVIF compliant device(see Section 15.5.5): <ul type="disc"> <li>http://www.onvif.org/ver10/tev/messageContentFilter/ItemFilter.</li> </ul>
/// Size of array of xsd__anyURI* is 1..unbounded
   $int                                  __sizeMessageContentFilterDialect 1;
/// Array xsd__anyURI* of length 1..unbounded
    xsd__anyURI*                         MessageContentFilterDialect    1;
/// @brief Optional ProducerPropertiesDialects. Refer to <a href="http://docs.oasis-open.org/wsn/wsn-ws_base_notification-1.3-spec-os.htm">Web Services Base Notification 1.3 (WS-BaseNotification)</a> for advanced filtering.
/// Size of array of xsd__anyURI* is 0..unbounded
   $int                                  __sizeProducerPropertiesFilterDialect 0;
/// Array xsd__anyURI* of length 0..unbounded
    xsd__anyURI*                         ProducerPropertiesFilterDialect 0;
/// @brief The Message Content Description Language, introduced in Section 15.5.4, allows referencing of vendor-specific types. In order to ease the integration of such types into a client application, the GetEventPropertiesResponse shall list all URI locations to schema files whose types are used in the description of notifications, with MessageContentSchemaLocation elements.<br/> This list shall at least contain the URI of the ONVIF schema file.
/// Size of array of xsd__anyURI* is 1..unbounded
   $int                                  __sizeMessageContentSchemaLocation 1;
/// Array xsd__anyURI* of length 1..unbounded
    xsd__anyURI*                         MessageContentSchemaLocation   1;
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://docs.oasis-open.org/wsrf/rw-2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://docs.oasis-open.org/wsrf/r-2                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.onvif.org/ver20/imaging/wsdl                                  *
 *                                                                            *
\******************************************************************************/


/// "http://www.onvif.org/ver20/imaging/wsdl":Capabilities is a complexType.
struct ns12__Capabilities
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};


/// Top-level root element "http://www.onvif.org/ver20/imaging/wsdl":GetServiceCapabilities

/// "http://www.onvif.org/ver20/imaging/wsdl":GetServiceCapabilities is a complexType.
struct _ns12__GetServiceCapabilities
{
};


/// Top-level root element "http://www.onvif.org/ver20/imaging/wsdl":GetServiceCapabilitiesResponse

/// "http://www.onvif.org/ver20/imaging/wsdl":GetServiceCapabilitiesResponse is a complexType.
struct _ns12__GetServiceCapabilitiesResponse
{
/// @brief The capabilities for the imaging service is returned in the Capabilities element.
/// Element Capabilities of type "http://www.onvif.org/ver20/imaging/wsdl":Capabilities.
    struct ns12__Capabilities*           Capabilities                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/imaging/wsdl":GetImagingSettings

/// "http://www.onvif.org/ver20/imaging/wsdl":GetImagingSettings is a complexType.
struct _ns12__GetImagingSettings
{
/// @brief Reference token to the VideoSource for which the ImagingSettings.
/// Element VideoSourceToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  VideoSourceToken               1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/imaging/wsdl":GetImagingSettingsResponse

/// "http://www.onvif.org/ver20/imaging/wsdl":GetImagingSettingsResponse is a complexType.
struct _ns12__GetImagingSettingsResponse
{
/// @brief ImagingSettings for the VideoSource that was requested.
/// Element ImagingSettings of type "http://www.onvif.org/ver10/schema":ImagingSettings20.
    struct ns3__ImagingSettings20*       ImagingSettings                1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/imaging/wsdl":SetImagingSettings

/// "http://www.onvif.org/ver20/imaging/wsdl":SetImagingSettings is a complexType.
struct _ns12__SetImagingSettings
{
/// Element VideoSourceToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  VideoSourceToken               1;	///< Required element.
/// Element ImagingSettings of type "http://www.onvif.org/ver10/schema":ImagingSettings20.
    struct ns3__ImagingSettings20*       ImagingSettings                1;	///< Required element.
/// Element ForcePersistence  of type xs:boolean.
    enum xsd__boolean*                   ForcePersistence_x0020         0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver20/imaging/wsdl":SetImagingSettingsResponse

/// "http://www.onvif.org/ver20/imaging/wsdl":SetImagingSettingsResponse is a complexType.
struct _ns12__SetImagingSettingsResponse
{
};


/// Top-level root element "http://www.onvif.org/ver20/imaging/wsdl":GetOptions

/// "http://www.onvif.org/ver20/imaging/wsdl":GetOptions is a complexType.
struct _ns12__GetOptions
{
/// @brief Reference token to the VideoSource for which the imaging parameter options are requested.
/// Element VideoSourceToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  VideoSourceToken               1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/imaging/wsdl":GetOptionsResponse

/// "http://www.onvif.org/ver20/imaging/wsdl":GetOptionsResponse is a complexType.
struct _ns12__GetOptionsResponse
{
/// @brief Valid ranges for the imaging parameters that are categorized as device specific.
/// Element ImagingOptions of type "http://www.onvif.org/ver10/schema":ImagingOptions20.
    struct ns3__ImagingOptions20*        ImagingOptions                 1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/imaging/wsdl":Move

/// "http://www.onvif.org/ver20/imaging/wsdl":Move is a complexType.
struct _ns12__Move
{
/// @brief Reference to the VideoSource for the requested move (focus) operation.
/// Element VideoSourceToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  VideoSourceToken               1;	///< Required element.
/// @brief Content of the requested move (focus) operation.
/// Element Focus of type "http://www.onvif.org/ver10/schema":FocusMove.
    struct ns3__FocusMove*               Focus                          1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/imaging/wsdl":MoveResponse

/// "http://www.onvif.org/ver20/imaging/wsdl":MoveResponse is a complexType.
struct _ns12__MoveResponse
{
};


/// Top-level root element "http://www.onvif.org/ver20/imaging/wsdl":GetMoveOptions

/// "http://www.onvif.org/ver20/imaging/wsdl":GetMoveOptions is a complexType.
struct _ns12__GetMoveOptions
{
/// @brief Reference token to the VideoSource for the requested move options.
/// Element VideoSourceToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  VideoSourceToken               1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/imaging/wsdl":GetMoveOptionsResponse

/// "http://www.onvif.org/ver20/imaging/wsdl":GetMoveOptionsResponse is a complexType.
struct _ns12__GetMoveOptionsResponse
{
/// @brief Valid ranges for the focus lens move options.
/// Element MoveOptions of type "http://www.onvif.org/ver10/schema":MoveOptions20.
    struct ns3__MoveOptions20*           MoveOptions                    1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/imaging/wsdl":Stop

/// "http://www.onvif.org/ver20/imaging/wsdl":Stop is a complexType.
struct _ns12__Stop
{
/// @brief Reference token to the VideoSource where the focus movement should be stopped.
/// Element VideoSourceToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  VideoSourceToken               1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/imaging/wsdl":StopResponse

/// "http://www.onvif.org/ver20/imaging/wsdl":StopResponse is a complexType.
struct _ns12__StopResponse
{
};


/// Top-level root element "http://www.onvif.org/ver20/imaging/wsdl":GetStatus

/// "http://www.onvif.org/ver20/imaging/wsdl":GetStatus is a complexType.
struct _ns12__GetStatus
{
/// @brief Reference token to the VideoSource where the imaging status should be requested.
/// Element VideoSourceToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  VideoSourceToken               1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/imaging/wsdl":GetStatusResponse

/// "http://www.onvif.org/ver20/imaging/wsdl":GetStatusResponse is a complexType.
struct _ns12__GetStatusResponse
{
/// @brief Requested imaging status.
/// Element Status of type "http://www.onvif.org/ver10/schema":ImagingStatus20.
    struct ns3__ImagingStatus20*         Status                         1;	///< Required element.
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.onvif.org/ver20/ptz/wsdl                                      *
 *                                                                            *
\******************************************************************************/


/// "http://www.onvif.org/ver20/ptz/wsdl":Capabilities is a complexType.
struct ns13__Capabilities
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":GetServiceCapabilities

/// "http://www.onvif.org/ver20/ptz/wsdl":GetServiceCapabilities is a complexType.
struct _ns13__GetServiceCapabilities
{
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":GetServiceCapabilitiesResponse

/// "http://www.onvif.org/ver20/ptz/wsdl":GetServiceCapabilitiesResponse is a complexType.
struct _ns13__GetServiceCapabilitiesResponse
{
/// @brief The capabilities for the PTZ service is returned in the Capabilities element.
/// Element Capabilities of type "http://www.onvif.org/ver20/ptz/wsdl":Capabilities.
    struct ns13__Capabilities*           Capabilities                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":GetNodes

/// "http://www.onvif.org/ver20/ptz/wsdl":GetNodes is a complexType.
struct _ns13__GetNodes
{
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":GetNodesResponse

/// "http://www.onvif.org/ver20/ptz/wsdl":GetNodesResponse is a complexType.
struct _ns13__GetNodesResponse
{
/// @brief A list of the existing PTZ Nodes on the NVT.
/// Size of array of struct ns3__PTZNode* is 0..unbounded
   $int                                  __sizePTZNode                  0;
/// Array struct ns3__PTZNode* of length 0..unbounded
    struct ns3__PTZNode*                 PTZNode                        0;
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":GetNode

/// "http://www.onvif.org/ver20/ptz/wsdl":GetNode is a complexType.
struct _ns13__GetNode
{
/// @brief Token of the requested PTZNode.
/// Element NodeToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  NodeToken                      1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":GetNodeResponse

/// "http://www.onvif.org/ver20/ptz/wsdl":GetNodeResponse is a complexType.
struct _ns13__GetNodeResponse
{
/// @brief A requested PTZNode.
/// Element PTZNode of type "http://www.onvif.org/ver10/schema":PTZNode.
    struct ns3__PTZNode*                 PTZNode                        1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":GetConfigurations

/// "http://www.onvif.org/ver20/ptz/wsdl":GetConfigurations is a complexType.
struct _ns13__GetConfigurations
{
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":GetConfigurationsResponse

/// "http://www.onvif.org/ver20/ptz/wsdl":GetConfigurationsResponse is a complexType.
struct _ns13__GetConfigurationsResponse
{
/// @brief A list of all existing PTZConfigurations on the NVT.
/// Size of array of struct ns3__PTZConfiguration* is 0..unbounded
   $int                                  __sizePTZConfiguration         0;
/// Array struct ns3__PTZConfiguration* of length 0..unbounded
    struct ns3__PTZConfiguration*        PTZConfiguration               0;
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":GetConfiguration

/// "http://www.onvif.org/ver20/ptz/wsdl":GetConfiguration is a complexType.
struct _ns13__GetConfiguration
{
/// @brief Token of the requested PTZConfiguration.
/// Element PTZConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  PTZConfigurationToken          1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":GetConfigurationResponse

/// "http://www.onvif.org/ver20/ptz/wsdl":GetConfigurationResponse is a complexType.
struct _ns13__GetConfigurationResponse
{
/// @brief A requested PTZConfiguration.
/// Element PTZConfiguration of type "http://www.onvif.org/ver10/schema":PTZConfiguration.
    struct ns3__PTZConfiguration*        PTZConfiguration               1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":SetConfiguration

/// "http://www.onvif.org/ver20/ptz/wsdl":SetConfiguration is a complexType.
struct _ns13__SetConfiguration
{
/// @brief
/// Element PTZConfiguration of type "http://www.onvif.org/ver10/schema":PTZConfiguration.
    struct ns3__PTZConfiguration*        PTZConfiguration               1;	///< Required element.
/// @brief Flag that makes configuration persistent. Example: User wants the configuration to exist after reboot.
/// Element ForcePersistence of type xs:boolean.
    enum xsd__boolean                    ForcePersistence               1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":SetConfigurationResponse

/// "http://www.onvif.org/ver20/ptz/wsdl":SetConfigurationResponse is a complexType.
struct _ns13__SetConfigurationResponse
{
/// SEQUENCE OF ELEMENTS <xs:sequence minOccurs="0" maxOccurs="1">
   $int                                  __size_SetConfigurationResponse_sequence 0;
    struct __ns13__SetConfigurationResponse_sequence
    {
    }                                   *__SetConfigurationResponse_sequence;
//  END OF SEQUENCE
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":GetConfigurationOptions

/// "http://www.onvif.org/ver20/ptz/wsdl":GetConfigurationOptions is a complexType.
struct _ns13__GetConfigurationOptions
{
/// @brief Token of an existing configuration that the options are intended for.
/// Element ConfigurationToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ConfigurationToken             1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":GetConfigurationOptionsResponse

/// "http://www.onvif.org/ver20/ptz/wsdl":GetConfigurationOptionsResponse is a complexType.
struct _ns13__GetConfigurationOptionsResponse
{
/// @brief The requested PTZ configuration options.
/// Element PTZConfigurationOptions of type "http://www.onvif.org/ver10/schema":PTZConfigurationOptions.
    struct ns3__PTZConfigurationOptions*  PTZConfigurationOptions        1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":SendAuxiliaryCommand

/// "http://www.onvif.org/ver20/ptz/wsdl":SendAuxiliaryCommand is a complexType.
struct _ns13__SendAuxiliaryCommand
{
/// @brief A reference to the MediaProfile where the operation should take place.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
/// @brief The Auxiliary request data.
/// Element AuxiliaryData of type "http://www.onvif.org/ver10/schema":AuxiliaryData.
    ns3__AuxiliaryData                   AuxiliaryData                  1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":SendAuxiliaryCommandResponse

/// "http://www.onvif.org/ver20/ptz/wsdl":SendAuxiliaryCommandResponse is a complexType.
struct _ns13__SendAuxiliaryCommandResponse
{
/// @brief The response contains the auxiliary response.
/// Element AuxiliaryResponse of type "http://www.onvif.org/ver10/schema":AuxiliaryData.
    ns3__AuxiliaryData                   AuxiliaryResponse              1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":GetPresets

/// "http://www.onvif.org/ver20/ptz/wsdl":GetPresets is a complexType.
struct _ns13__GetPresets
{
/// @brief A reference to the MediaProfile where the operation should take place.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":GetPresetsResponse

/// "http://www.onvif.org/ver20/ptz/wsdl":GetPresetsResponse is a complexType.
struct _ns13__GetPresetsResponse
{
/// @brief A list of presets which are available for the requested MediaProfile.
/// Size of array of struct ns3__PTZPreset* is 0..unbounded
   $int                                  __sizePreset                   0;
/// Array struct ns3__PTZPreset* of length 0..unbounded
    struct ns3__PTZPreset*               Preset                         0;
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":SetPreset

/// "http://www.onvif.org/ver20/ptz/wsdl":SetPreset is a complexType.
struct _ns13__SetPreset
{
/// @brief A reference to the MediaProfile where the operation should take place.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
/// @brief A requested preset name.
/// Element PresetName of type xs:string.
    char*                                PresetName                     0;	///< Optional element.
/// @brief A requested preset token.
/// Element PresetToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  PresetToken                    0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":SetPresetResponse

/// "http://www.onvif.org/ver20/ptz/wsdl":SetPresetResponse is a complexType.
struct _ns13__SetPresetResponse
{
/// @brief A token to the Preset which has been set.
/// Element PresetToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  PresetToken                    1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":RemovePreset

/// "http://www.onvif.org/ver20/ptz/wsdl":RemovePreset is a complexType.
struct _ns13__RemovePreset
{
/// @brief A reference to the MediaProfile where the operation should take place.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
/// @brief A requested preset token.
/// Element PresetToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  PresetToken                    1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":RemovePresetResponse

/// "http://www.onvif.org/ver20/ptz/wsdl":RemovePresetResponse is a complexType.
struct _ns13__RemovePresetResponse
{
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":GotoPreset

/// "http://www.onvif.org/ver20/ptz/wsdl":GotoPreset is a complexType.
struct _ns13__GotoPreset
{
/// @brief A reference to the MediaProfile where the operation should take place.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
/// @brief A requested preset token.
/// Element PresetToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  PresetToken                    1;	///< Required element.
/// @brief A requested speed.The speed parameter can only be specified when Speed Spaces are available for the PTZ Node.
/// Element Speed of type "http://www.onvif.org/ver10/schema":PTZSpeed.
    struct ns3__PTZSpeed*                Speed                          0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":GotoPresetResponse

/// "http://www.onvif.org/ver20/ptz/wsdl":GotoPresetResponse is a complexType.
struct _ns13__GotoPresetResponse
{
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":GetStatus

/// "http://www.onvif.org/ver20/ptz/wsdl":GetStatus is a complexType.
struct _ns13__GetStatus
{
/// @brief A reference to the MediaProfile where the PTZStatus should be requested.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":GetStatusResponse

/// "http://www.onvif.org/ver20/ptz/wsdl":GetStatusResponse is a complexType.
struct _ns13__GetStatusResponse
{
/// @brief The PTZStatus for the requested MediaProfile.
/// Element PTZStatus of type "http://www.onvif.org/ver10/schema":PTZStatus.
    struct ns3__PTZStatus*               PTZStatus                      1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":GotoHomePosition

/// "http://www.onvif.org/ver20/ptz/wsdl":GotoHomePosition is a complexType.
struct _ns13__GotoHomePosition
{
/// @brief A reference to the MediaProfile where the operation should take place.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
/// @brief A requested speed.The speed parameter can only be specified when Speed Spaces are available for the PTZ Node.
/// Element Speed of type "http://www.onvif.org/ver10/schema":PTZSpeed.
    struct ns3__PTZSpeed*                Speed                          0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":GotoHomePositionResponse

/// "http://www.onvif.org/ver20/ptz/wsdl":GotoHomePositionResponse is a complexType.
struct _ns13__GotoHomePositionResponse
{
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":SetHomePosition

/// "http://www.onvif.org/ver20/ptz/wsdl":SetHomePosition is a complexType.
struct _ns13__SetHomePosition
{
/// @brief A reference to the MediaProfile where the home position should be set.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":SetHomePositionResponse

/// "http://www.onvif.org/ver20/ptz/wsdl":SetHomePositionResponse is a complexType.
struct _ns13__SetHomePositionResponse
{
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":ContinuousMove

/// "http://www.onvif.org/ver20/ptz/wsdl":ContinuousMove is a complexType.
struct _ns13__ContinuousMove
{
/// @brief A reference to the MediaProfile.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
/// @brief A Velocity vector specifying the velocity of pan, tilt and zoom.
/// Element Velocity of type "http://www.onvif.org/ver10/schema":PTZSpeed.
    struct ns3__PTZSpeed*                Velocity                       1;	///< Required element.
/// @brief An optional Timeout parameter.
/// Element Timeout of type xs:duration.
    xsd__duration                        Timeout                        0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":ContinuousMoveResponse

/// "http://www.onvif.org/ver20/ptz/wsdl":ContinuousMoveResponse is a complexType.
struct _ns13__ContinuousMoveResponse
{
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":RelativeMove

/// "http://www.onvif.org/ver20/ptz/wsdl":RelativeMove is a complexType.
struct _ns13__RelativeMove
{
/// @brief A reference to the MediaProfile.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
/// @brief A positional Translation relative to the current position
/// Element Translation of type "http://www.onvif.org/ver10/schema":PTZVector.
    struct ns3__PTZVector*               Translation                    1;	///< Required element.
/// @brief An optional Speed parameter.
/// Element Speed of type "http://www.onvif.org/ver10/schema":PTZSpeed.
    struct ns3__PTZSpeed*                Speed                          0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":RelativeMoveResponse

/// "http://www.onvif.org/ver20/ptz/wsdl":RelativeMoveResponse is a complexType.
struct _ns13__RelativeMoveResponse
{
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":AbsoluteMove

/// "http://www.onvif.org/ver20/ptz/wsdl":AbsoluteMove is a complexType.
struct _ns13__AbsoluteMove
{
/// @brief A reference to the MediaProfile.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
/// @brief A Position vector specifying the absolute target position.
/// Element Position of type "http://www.onvif.org/ver10/schema":PTZVector.
    struct ns3__PTZVector*               Position                       1;	///< Required element.
/// @brief An optional Speed.
/// Element Speed of type "http://www.onvif.org/ver10/schema":PTZSpeed.
    struct ns3__PTZSpeed*                Speed                          0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":AbsoluteMoveResponse

/// "http://www.onvif.org/ver20/ptz/wsdl":AbsoluteMoveResponse is a complexType.
struct _ns13__AbsoluteMoveResponse
{
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":Stop

/// "http://www.onvif.org/ver20/ptz/wsdl":Stop is a complexType.
struct _ns13__Stop
{
/// @brief A reference to the MediaProfile that indicate what should be stopped.
/// Element ProfileToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  ProfileToken                   1;	///< Required element.
/// @brief Set true when we want to stop ongoing pan and tilt movements.If PanTilt arguments are not present, this command stops these movements.
/// Element PanTilt of type xs:boolean.
    enum xsd__boolean*                   PanTilt                        0;	///< Optional element.
/// @brief Set true when we want to stop ongoing zoom movement.If Zoom arguments are not present, this command stops ongoing zoom movement.
/// Element Zoom of type xs:boolean.
    enum xsd__boolean*                   Zoom                           0;	///< Optional element.
};


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":StopResponse

/// "http://www.onvif.org/ver20/ptz/wsdl":StopResponse is a complexType.
struct _ns13__StopResponse
{
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.w3.org/2005/08/addressing                                     *
 *                                                                            *
\******************************************************************************/


/// "http://www.w3.org/2005/08/addressing":EndpointReferenceType is a complexType.
struct ns14__EndpointReferenceType
{
/// Element Address of type "http://www.w3.org/2005/08/addressing":AttributedURIType.
    struct ns14__AttributedURIType*      Address                        1;	///< Required element.
/// Element reference "http://www.w3.org/2005/08/addressing":ReferenceParameters.
    struct ns14__ReferenceParametersType*  ReferenceParameters            0;	///< Optional element.
/// Element reference "http://www.w3.org/2005/08/addressing":Metadata.
    struct ns14__MetadataType*           Metadata                       0;	///< Optional element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.w3.org/2005/08/addressing":ReferenceParametersType is a complexType.
struct ns14__ReferenceParametersType
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.w3.org/2005/08/addressing":MetadataType is a complexType.
struct ns14__MetadataType
{
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.w3.org/2005/08/addressing":ProblemActionType is a complexType.
struct ns14__ProblemActionType
{
/// Element reference "http://www.w3.org/2005/08/addressing":Action.
    struct ns14__AttributedURIType*      Action                         0;	///< Optional element.
/// Element SoapAction of type xs:anyURI.
    xsd__anyURI                          SoapAction                     0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":VideoSource is a complexType with complexContent extension of "http://www.onvif.org/ver10/schema":DeviceEntity.
/// @brief Representation of a physical video input.
struct ns3__VideoSource
{
/// INHERITED FROM ns3__DeviceEntity:
/// @brief Unique identifier referencing the physical entity.
/// Attribute token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @ns3__ReferenceToken                  token                          1;	///< Required attribute.
//  END OF INHERITED FROM ns3__DeviceEntity
/// @brief Frame rate in frames per second.
/// Element Framerate of type xs:float.
    float                                Framerate                      1;	///< Required element.
/// @brief Horizontal and vertical resolution
/// Element Resolution of type "http://www.onvif.org/ver10/schema":VideoResolution.
    struct ns3__VideoResolution*         Resolution                     1;	///< Required element.
/// @brief Optional configuration of the image sensor.
/// Element Imaging of type "http://www.onvif.org/ver10/schema":ImagingSettings.
    struct ns3__ImagingSettings*         Imaging                        0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":VideoSourceExtension.
    struct ns3__VideoSourceExtension*    Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":AudioSource is a complexType with complexContent extension of "http://www.onvif.org/ver10/schema":DeviceEntity.
/// @brief Representation of a physical audio input.
struct ns3__AudioSource
{
/// INHERITED FROM ns3__DeviceEntity:
/// @brief Unique identifier referencing the physical entity.
/// Attribute token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @ns3__ReferenceToken                  token                          1;	///< Required attribute.
//  END OF INHERITED FROM ns3__DeviceEntity
/// @brief number of available audio channels. (1: mono, 2: stereo)
/// Element Channels of type xs:int.
    int                                  Channels                       1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":VideoSourceConfiguration is a complexType with complexContent extension of "http://www.onvif.org/ver10/schema":ConfigurationEntity.
struct ns3__VideoSourceConfiguration
{
/// INHERITED FROM ns3__ConfigurationEntity:
/// @brief User readable name. Length up to 64 characters.
/// Element Name of type "http://www.onvif.org/ver10/schema":Name.
    ns3__Name                            Name                           1;	///< Required element.
/// @brief Number of internal references currently using this configuration. <br/>This parameter is read-only and cannot be changed by a set request. <br/>For example the value increases if the configuration is added to a media profile or attached to a PaneConfiguration.
/// Element UseCount of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// @brief Token that uniquely refernces this configuration. Length up to 64 characters.
/// Attribute token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @ns3__ReferenceToken                  token                          1;	///< Required attribute.
//  END OF INHERITED FROM ns3__ConfigurationEntity
/// @brief Reference to the physical input.
/// Element SourceToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  SourceToken                    1;	///< Required element.
/// @brief Rectangle specifying the Video capturing area. The capturing area shall not be larger than the whole Video source area.
/// Element Bounds of type "http://www.onvif.org/ver10/schema":IntRectangle.
    struct ns3__IntRectangle*            Bounds                         1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":VideoEncoderConfiguration is a complexType with complexContent extension of "http://www.onvif.org/ver10/schema":ConfigurationEntity.
struct ns3__VideoEncoderConfiguration
{
/// INHERITED FROM ns3__ConfigurationEntity:
/// @brief User readable name. Length up to 64 characters.
/// Element Name of type "http://www.onvif.org/ver10/schema":Name.
    ns3__Name                            Name                           1;	///< Required element.
/// @brief Number of internal references currently using this configuration. <br/>This parameter is read-only and cannot be changed by a set request. <br/>For example the value increases if the configuration is added to a media profile or attached to a PaneConfiguration.
/// Element UseCount of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// @brief Token that uniquely refernces this configuration. Length up to 64 characters.
/// Attribute token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @ns3__ReferenceToken                  token                          1;	///< Required attribute.
//  END OF INHERITED FROM ns3__ConfigurationEntity
/// @brief Used video codec, either Jpeg, H.264 or Mpeg4
/// Element Encoding of type "http://www.onvif.org/ver10/schema":VideoEncoding.
    enum ns3__VideoEncoding              Encoding                       1;	///< Required element.
/// @brief Configured video resolution
/// Element Resolution of type "http://www.onvif.org/ver10/schema":VideoResolution.
    struct ns3__VideoResolution*         Resolution                     1;	///< Required element.
/// @brief Relative value for the video quantizers and the quality of the video. A high value within supported quality range means higher quality
/// Element Quality of type xs:float.
    float                                Quality                        1;	///< Required element.
/// @brief Optional element to configure rate control related parameters.
/// Element RateControl of type "http://www.onvif.org/ver10/schema":VideoRateControl.
    struct ns3__VideoRateControl*        RateControl                    0;	///< Optional element.
/// @brief Optional element to configure Mpeg4 related parameters.
/// Element MPEG4 of type "http://www.onvif.org/ver10/schema":Mpeg4Configuration.
    struct ns3__Mpeg4Configuration*      MPEG4                          0;	///< Optional element.
/// @brief Optional element to configure H.264 related parameters.
/// Element H264 of type "http://www.onvif.org/ver10/schema":H264Configuration.
    struct ns3__H264Configuration*       H264                           0;	///< Optional element.
/// @brief Defines the multicast settings that could be used for video streaming.
/// Element Multicast of type "http://www.onvif.org/ver10/schema":MulticastConfiguration.
    struct ns3__MulticastConfiguration*  Multicast                      1;	///< Required element.
/// @brief The rtsp session timeout for the related video stream
/// Element SessionTimeout of type xs:duration.
    xsd__duration                        SessionTimeout                 1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":JpegOptions2 is a complexType with complexContent extension of "http://www.onvif.org/ver10/schema":JpegOptions.
struct ns3__JpegOptions2
{
/// INHERITED FROM ns3__JpegOptions:
/// @brief List of supported image sizes.
/// Size of array of struct ns3__VideoResolution* is 1..unbounded
   $int                                  __sizeResolutionsAvailable     1;
/// Array struct ns3__VideoResolution* of length 1..unbounded
    struct ns3__VideoResolution*         ResolutionsAvailable           1;
/// @brief Supported frame rate in fps (frames per second).
/// Element FrameRateRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                FrameRateRange                 1;	///< Required element.
/// @brief Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
/// Element EncodingIntervalRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                EncodingIntervalRange          1;	///< Required element.
//  END OF INHERITED FROM ns3__JpegOptions
/// @brief Supported range of encoded bitrate in kbps.
/// Element BitrateRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                BitrateRange                   1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":Mpeg4Options2 is a complexType with complexContent extension of "http://www.onvif.org/ver10/schema":Mpeg4Options.
struct ns3__Mpeg4Options2
{
/// INHERITED FROM ns3__Mpeg4Options:
/// @brief List of supported image sizes.
/// Size of array of struct ns3__VideoResolution* is 1..unbounded
   $int                                  __sizeResolutionsAvailable     1;
/// Array struct ns3__VideoResolution* of length 1..unbounded
    struct ns3__VideoResolution*         ResolutionsAvailable           1;
/// @brief Supported group of Video frames length. This value typically corresponds to the I-Frame distance.
/// Element GovLengthRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                GovLengthRange                 1;	///< Required element.
/// @brief Supported frame rate in fps (frames per second).
/// Element FrameRateRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                FrameRateRange                 1;	///< Required element.
/// @brief Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
/// Element EncodingIntervalRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                EncodingIntervalRange          1;	///< Required element.
/// @brief List of supported MPEG-4 profiles.
/// Size of array of enum ns3__Mpeg4Profile* is 1..unbounded
   $int                                  __sizeMpeg4ProfilesSupported   1;
/// Array enum ns3__Mpeg4Profile* of length 1..unbounded
    enum ns3__Mpeg4Profile*              Mpeg4ProfilesSupported         1;
//  END OF INHERITED FROM ns3__Mpeg4Options
/// @brief Supported range of encoded bitrate in kbps.
/// Element BitrateRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                BitrateRange                   1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":H264Options2 is a complexType with complexContent extension of "http://www.onvif.org/ver10/schema":H264Options.
struct ns3__H264Options2
{
/// INHERITED FROM ns3__H264Options:
/// @brief List of supported image sizes.
/// Size of array of struct ns3__VideoResolution* is 1..unbounded
   $int                                  __sizeResolutionsAvailable     1;
/// Array struct ns3__VideoResolution* of length 1..unbounded
    struct ns3__VideoResolution*         ResolutionsAvailable           1;
/// @brief Supported group of Video frames length. This value typically corresponds to the I-Frame distance.
/// Element GovLengthRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                GovLengthRange                 1;	///< Required element.
/// @brief Supported frame rate in fps (frames per second).
/// Element FrameRateRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                FrameRateRange                 1;	///< Required element.
/// @brief Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
/// Element EncodingIntervalRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                EncodingIntervalRange          1;	///< Required element.
/// @brief List of supported H.264 profiles.
/// Size of array of enum ns3__H264Profile* is 1..unbounded
   $int                                  __sizeH264ProfilesSupported    1;
/// Array enum ns3__H264Profile* of length 1..unbounded
    enum ns3__H264Profile*               H264ProfilesSupported          1;
//  END OF INHERITED FROM ns3__H264Options
/// @brief Supported range of encoded bitrate in kbps.
/// Element BitrateRange of type "http://www.onvif.org/ver10/schema":IntRange.
    struct ns3__IntRange*                BitrateRange                   1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":AudioSourceConfiguration is a complexType with complexContent extension of "http://www.onvif.org/ver10/schema":ConfigurationEntity.
struct ns3__AudioSourceConfiguration
{
/// INHERITED FROM ns3__ConfigurationEntity:
/// @brief User readable name. Length up to 64 characters.
/// Element Name of type "http://www.onvif.org/ver10/schema":Name.
    ns3__Name                            Name                           1;	///< Required element.
/// @brief Number of internal references currently using this configuration. <br/>This parameter is read-only and cannot be changed by a set request. <br/>For example the value increases if the configuration is added to a media profile or attached to a PaneConfiguration.
/// Element UseCount of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// @brief Token that uniquely refernces this configuration. Length up to 64 characters.
/// Attribute token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @ns3__ReferenceToken                  token                          1;	///< Required attribute.
//  END OF INHERITED FROM ns3__ConfigurationEntity
/// @brief Token of the Audio Source the configuration applies to
/// Element SourceToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  SourceToken                    1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":AudioEncoderConfiguration is a complexType with complexContent extension of "http://www.onvif.org/ver10/schema":ConfigurationEntity.
struct ns3__AudioEncoderConfiguration
{
/// INHERITED FROM ns3__ConfigurationEntity:
/// @brief User readable name. Length up to 64 characters.
/// Element Name of type "http://www.onvif.org/ver10/schema":Name.
    ns3__Name                            Name                           1;	///< Required element.
/// @brief Number of internal references currently using this configuration. <br/>This parameter is read-only and cannot be changed by a set request. <br/>For example the value increases if the configuration is added to a media profile or attached to a PaneConfiguration.
/// Element UseCount of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// @brief Token that uniquely refernces this configuration. Length up to 64 characters.
/// Attribute token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @ns3__ReferenceToken                  token                          1;	///< Required attribute.
//  END OF INHERITED FROM ns3__ConfigurationEntity
/// @brief Audio codec used for encoding the audio input (either G.711, G.726 or AAC)
/// Element Encoding of type "http://www.onvif.org/ver10/schema":AudioEncoding.
    enum ns3__AudioEncoding              Encoding                       1;	///< Required element.
/// @brief The output bitrate in kbps.
/// Element Bitrate of type xs:int.
    int                                  Bitrate                        1;	///< Required element.
/// @brief The output sample rate in kHz.
/// Element SampleRate of type xs:int.
    int                                  SampleRate                     1;	///< Required element.
/// @brief Defines the multicast settings that could be used for video streaming.
/// Element Multicast of type "http://www.onvif.org/ver10/schema":MulticastConfiguration.
    struct ns3__MulticastConfiguration*  Multicast                      1;	///< Required element.
/// @brief The rtsp session timeout for the related audio stream
/// Element SessionTimeout of type xs:duration.
    xsd__duration                        SessionTimeout                 1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":VideoAnalyticsConfiguration is a complexType with complexContent extension of "http://www.onvif.org/ver10/schema":ConfigurationEntity.
struct ns3__VideoAnalyticsConfiguration
{
/// INHERITED FROM ns3__ConfigurationEntity:
/// @brief User readable name. Length up to 64 characters.
/// Element Name of type "http://www.onvif.org/ver10/schema":Name.
    ns3__Name                            Name                           1;	///< Required element.
/// @brief Number of internal references currently using this configuration. <br/>This parameter is read-only and cannot be changed by a set request. <br/>For example the value increases if the configuration is added to a media profile or attached to a PaneConfiguration.
/// Element UseCount of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// @brief Token that uniquely refernces this configuration. Length up to 64 characters.
/// Attribute token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @ns3__ReferenceToken                  token                          1;	///< Required attribute.
//  END OF INHERITED FROM ns3__ConfigurationEntity
/// Element AnalyticsEngineConfiguration of type "http://www.onvif.org/ver10/schema":AnalyticsEngineConfiguration.
    struct ns3__AnalyticsEngineConfiguration*  AnalyticsEngineConfiguration   1;	///< Required element.
/// Element RuleEngineConfiguration of type "http://www.onvif.org/ver10/schema":RuleEngineConfiguration.
    struct ns3__RuleEngineConfiguration*  RuleEngineConfiguration        1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":MetadataConfiguration is a complexType with complexContent extension of "http://www.onvif.org/ver10/schema":ConfigurationEntity.
struct ns3__MetadataConfiguration
{
/// INHERITED FROM ns3__ConfigurationEntity:
/// @brief User readable name. Length up to 64 characters.
/// Element Name of type "http://www.onvif.org/ver10/schema":Name.
    ns3__Name                            Name                           1;	///< Required element.
/// @brief Number of internal references currently using this configuration. <br/>This parameter is read-only and cannot be changed by a set request. <br/>For example the value increases if the configuration is added to a media profile or attached to a PaneConfiguration.
/// Element UseCount of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// @brief Token that uniquely refernces this configuration. Length up to 64 characters.
/// Attribute token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @ns3__ReferenceToken                  token                          1;	///< Required attribute.
//  END OF INHERITED FROM ns3__ConfigurationEntity
/// @brief optional element to configure which PTZ related data is to include in the metadata stream
/// Element PTZStatus of type "http://www.onvif.org/ver10/schema":PTZFilter.
    struct ns3__PTZFilter*               PTZStatus                      0;	///< Optional element.
/// @brief Optional element to configure the streaming of events. A client might be interested in receiving all, none or some of the events produced by the device:<ul> <li>To get all events: Include the Events element but do not include a filter.</li> <li>To get no events: Do not include the Events element.</li> <li>To get only some events: Include the Events element and include a filter in the element.</li></ul>
/// Element Events of type "http://www.onvif.org/ver10/schema":EventSubscription.
    struct ns3__EventSubscription*       Events                         0;	///< Optional element.
/// @brief Defines if data to include from the analytics engine part shall be included in the stream
/// Element Analytics of type xs:boolean.
    enum xsd__boolean*                   Analytics                      0;	///< Optional element.
/// @brief Defines the multicast settings that could be used for video streaming.
/// Element Multicast of type "http://www.onvif.org/ver10/schema":MulticastConfiguration.
    struct ns3__MulticastConfiguration*  Multicast                      1;	///< Required element.
/// @brief The rtsp session timeout for the related audio stream
/// Element SessionTimeout of type xs:duration.
    xsd__duration                        SessionTimeout                 1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":VideoOutput is a complexType with complexContent extension of "http://www.onvif.org/ver10/schema":DeviceEntity.
/// @brief Representation of a physical video outputs.
struct ns3__VideoOutput
{
/// INHERITED FROM ns3__DeviceEntity:
/// @brief Unique identifier referencing the physical entity.
/// Attribute token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @ns3__ReferenceToken                  token                          1;	///< Required attribute.
//  END OF INHERITED FROM ns3__DeviceEntity
/// Element Layout of type "http://www.onvif.org/ver10/schema":Layout.
    struct ns3__Layout*                  Layout                         1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":VideoOutputConfiguration is a complexType with complexContent extension of "http://www.onvif.org/ver10/schema":ConfigurationEntity.
struct ns3__VideoOutputConfiguration
{
/// INHERITED FROM ns3__ConfigurationEntity:
/// @brief User readable name. Length up to 64 characters.
/// Element Name of type "http://www.onvif.org/ver10/schema":Name.
    ns3__Name                            Name                           1;	///< Required element.
/// @brief Number of internal references currently using this configuration. <br/>This parameter is read-only and cannot be changed by a set request. <br/>For example the value increases if the configuration is added to a media profile or attached to a PaneConfiguration.
/// Element UseCount of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// @brief Token that uniquely refernces this configuration. Length up to 64 characters.
/// Attribute token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @ns3__ReferenceToken                  token                          1;	///< Required attribute.
//  END OF INHERITED FROM ns3__ConfigurationEntity
/// @brief Token of the Video Output the configuration applies to
/// Element OutputToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  OutputToken                    1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":AudioOutput is a complexType with complexContent extension of "http://www.onvif.org/ver10/schema":DeviceEntity.
/// @brief Representation of a physical audio outputs.
struct ns3__AudioOutput
{
/// INHERITED FROM ns3__DeviceEntity:
/// @brief Unique identifier referencing the physical entity.
/// Attribute token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @ns3__ReferenceToken                  token                          1;	///< Required attribute.
//  END OF INHERITED FROM ns3__DeviceEntity
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":AudioOutputConfiguration is a complexType with complexContent extension of "http://www.onvif.org/ver10/schema":ConfigurationEntity.
struct ns3__AudioOutputConfiguration
{
/// INHERITED FROM ns3__ConfigurationEntity:
/// @brief User readable name. Length up to 64 characters.
/// Element Name of type "http://www.onvif.org/ver10/schema":Name.
    ns3__Name                            Name                           1;	///< Required element.
/// @brief Number of internal references currently using this configuration. <br/>This parameter is read-only and cannot be changed by a set request. <br/>For example the value increases if the configuration is added to a media profile or attached to a PaneConfiguration.
/// Element UseCount of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// @brief Token that uniquely refernces this configuration. Length up to 64 characters.
/// Attribute token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @ns3__ReferenceToken                  token                          1;	///< Required attribute.
//  END OF INHERITED FROM ns3__ConfigurationEntity
/// @brief Token of the phsycial Audio output.
/// Element OutputToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  OutputToken                    1;	///< Required element.
/// @brief An audio channel MAY support different types of audio transmission. While for full duplex operation no special handling is required, in half duplex operation the transmission direction needs to be switched. The optional SendPrimacy parameter inside the AudioOutputConfiguration indicates which direction is currently active. An NVC can switch between different modes by setting the AudioOutputConfiguration.<br/> The following modes for the Send-Primacy are defined:<ul> <li>www.onvif.org/ver20/HalfDuplex/Server The server is allowed to send audio data to the client. The client shall not send audio data via the backchannel to the NVT in this mode.</li> <li>www.onvif.org/ver20/HalfDuplex/Client The client is allowed to send audio data via the backchannel to the server. The NVT shall not send audio data to the client in this mode.</li> <li>www.onvif.org/ver20/HalfDuplex/Auto It is up to the device how to deal with sending and receiving audio data.</li></ul> Acoustic echo cancellation is out of ONVIF scope.
/// Element SendPrimacy of type xs:anyURI.
    xsd__anyURI                          SendPrimacy                    0;	///< Optional element.
/// @brief Volume setting of the output. The applicable range is defined via the option AudioOutputOptions.OutputLevelRange.
/// Element OutputLevel of type xs:int.
    int                                  OutputLevel                    1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":AudioDecoderConfiguration is a complexType with complexContent extension of "http://www.onvif.org/ver10/schema":ConfigurationEntity.
/// @brief The Audio Decoder Configuration does not contain any that parameter to configure the decoding .A decoder shall decode every data it receives (according to its capabilities).
struct ns3__AudioDecoderConfiguration
{
/// INHERITED FROM ns3__ConfigurationEntity:
/// @brief User readable name. Length up to 64 characters.
/// Element Name of type "http://www.onvif.org/ver10/schema":Name.
    ns3__Name                            Name                           1;	///< Required element.
/// @brief Number of internal references currently using this configuration. <br/>This parameter is read-only and cannot be changed by a set request. <br/>For example the value increases if the configuration is added to a media profile or attached to a PaneConfiguration.
/// Element UseCount of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// @brief Token that uniquely refernces this configuration. Length up to 64 characters.
/// Attribute token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @ns3__ReferenceToken                  token                          1;	///< Required attribute.
//  END OF INHERITED FROM ns3__ConfigurationEntity
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":NetworkInterface is a complexType with complexContent extension of "http://www.onvif.org/ver10/schema":DeviceEntity.
struct ns3__NetworkInterface
{
/// INHERITED FROM ns3__DeviceEntity:
/// @brief Unique identifier referencing the physical entity.
/// Attribute token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @ns3__ReferenceToken                  token                          1;	///< Required attribute.
//  END OF INHERITED FROM ns3__DeviceEntity
/// @brief Indicates whether or not an interface is enabled.
/// Element Enabled of type xs:boolean.
    enum xsd__boolean                    Enabled                        1;	///< Required element.
/// @brief Network interface information
/// Element Info of type "http://www.onvif.org/ver10/schema":NetworkInterfaceInfo.
    struct ns3__NetworkInterfaceInfo*    Info                           0;	///< Optional element.
/// @brief Link configuration.
/// Element Link of type "http://www.onvif.org/ver10/schema":NetworkInterfaceLink.
    struct ns3__NetworkInterfaceLink*    Link                           0;	///< Optional element.
/// @brief IPv4 network interface configuration.
/// Element IPv4 of type "http://www.onvif.org/ver10/schema":IPv4NetworkInterface.
    struct ns3__IPv4NetworkInterface*    IPv4                           0;	///< Optional element.
/// @brief IPv6 network interface configuration.
/// Element IPv6 of type "http://www.onvif.org/ver10/schema":IPv6NetworkInterface.
    struct ns3__IPv6NetworkInterface*    IPv6                           0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":NetworkInterfaceExtension.
    struct ns3__NetworkInterfaceExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":CertificateUsage is a complexType with simpleContent.
struct ns3__CertificateUsage
{
/// __item wraps 'xs:string' simpleContent.
    char*                                __item                        ;
/// Attribute Critical of type xs:boolean.
   @enum xsd__boolean                    Critical                       1;	///< Required attribute.
};

/// "http://www.onvif.org/ver10/schema":RelayOutput is a complexType with complexContent extension of "http://www.onvif.org/ver10/schema":DeviceEntity.
struct ns3__RelayOutput
{
/// INHERITED FROM ns3__DeviceEntity:
/// @brief Unique identifier referencing the physical entity.
/// Attribute token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @ns3__ReferenceToken                  token                          1;	///< Required attribute.
//  END OF INHERITED FROM ns3__DeviceEntity
/// Element Properties of type "http://www.onvif.org/ver10/schema":RelayOutputSettings.
    struct ns3__RelayOutputSettings*     Properties                     1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":PTZNode is a complexType with complexContent extension of "http://www.onvif.org/ver10/schema":DeviceEntity.
struct ns3__PTZNode
{
/// INHERITED FROM ns3__DeviceEntity:
/// @brief Unique identifier referencing the physical entity.
/// Attribute token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @ns3__ReferenceToken                  token                          1;	///< Required attribute.
//  END OF INHERITED FROM ns3__DeviceEntity
/// @brief A unique identifier that is used to reference PTZ Nodes.
/// Element Name of type "http://www.onvif.org/ver10/schema":Name.
    ns3__Name                            Name                           0;	///< Optional element.
/// @brief A list of Coordinate Systems available for the PTZ Node. For each Coordinate System, the PTZ Node MUST specify its allowed range.
/// Element SupportedPTZSpaces of type "http://www.onvif.org/ver10/schema":PTZSpaces.
    struct ns3__PTZSpaces*               SupportedPTZSpaces             1;	///< Required element.
/// @brief All preset operations MUST be available for this PTZ Node if one preset is supported.
/// Element MaximumNumberOfPresets of type xs:int.
    int                                  MaximumNumberOfPresets         1;	///< Required element.
/// @brief A boolean operator specifying the availability of a home position. If set to true, the Home Position Operations MUST be available for this PTZ Node.
/// Element HomeSupported of type xs:boolean.
    enum xsd__boolean                    HomeSupported                  1;	///< Required element.
/// @brief A list of supported Auxiliary commands. If the list is not empty, the Auxiliary Operations MUST be available for this PTZ Node.
/// Size of array of ns3__AuxiliaryData* is 0..unbounded
   $int                                  __sizeAuxiliaryCommands        0;
/// Array ns3__AuxiliaryData* of length 0..unbounded
    ns3__AuxiliaryData*                  AuxiliaryCommands              0;
/// Element Extension of type "http://www.onvif.org/ver10/schema":PTZNodeExtension.
    struct ns3__PTZNodeExtension*        Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":PTZConfiguration is a complexType with complexContent extension of "http://www.onvif.org/ver10/schema":ConfigurationEntity.
struct ns3__PTZConfiguration
{
/// INHERITED FROM ns3__ConfigurationEntity:
/// @brief User readable name. Length up to 64 characters.
/// Element Name of type "http://www.onvif.org/ver10/schema":Name.
    ns3__Name                            Name                           1;	///< Required element.
/// @brief Number of internal references currently using this configuration. <br/>This parameter is read-only and cannot be changed by a set request. <br/>For example the value increases if the configuration is added to a media profile or attached to a PaneConfiguration.
/// Element UseCount of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// @brief Token that uniquely refernces this configuration. Length up to 64 characters.
/// Attribute token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @ns3__ReferenceToken                  token                          1;	///< Required attribute.
//  END OF INHERITED FROM ns3__ConfigurationEntity
/// @brief A mandatory reference to the PTZ Node that the PTZ Configuration belongs to.
/// Element NodeToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  NodeToken                      1;	///< Required element.
/// @brief If the PTZ Node supports absolute Pan/Tilt movements, it shall specify one Absolute Pan/Tilt Position Space as default.
/// Element DefaultAbsolutePantTiltPositionSpace of type xs:anyURI.
    xsd__anyURI                          DefaultAbsolutePantTiltPositionSpace 0;	///< Optional element.
/// @brief If the PTZ Node supports absolute zoom movements, it shall specify one Absolute Zoom Position Space as default.
/// Element DefaultAbsoluteZoomPositionSpace of type xs:anyURI.
    xsd__anyURI                          DefaultAbsoluteZoomPositionSpace 0;	///< Optional element.
/// @brief If the PTZ Node supports relative Pan/Tilt movements, it shall specify one RelativePan/Tilt Translation Space as default.
/// Element DefaultRelativePanTiltTranslationSpace of type xs:anyURI.
    xsd__anyURI                          DefaultRelativePanTiltTranslationSpace 0;	///< Optional element.
/// @brief If the PTZ Node supports relative zoom movements, it shall specify one Relative Zoom Translation Space as default.
/// Element DefaultRelativeZoomTranslationSpace of type xs:anyURI.
    xsd__anyURI                          DefaultRelativeZoomTranslationSpace 0;	///< Optional element.
/// @brief If the PTZ Node supports continuous Pan/Tilt movements, it shall specify one Continuous Pan/Tilt Velocity Space as default.
/// Element DefaultContinuousPanTiltVelocitySpace of type xs:anyURI.
    xsd__anyURI                          DefaultContinuousPanTiltVelocitySpace 0;	///< Optional element.
/// @brief If the PTZ Node supports continuous zoom movements, it shall specify one Continuous Zoom Velocity Space as default.
/// Element DefaultContinuousZoomVelocitySpace of type xs:anyURI.
    xsd__anyURI                          DefaultContinuousZoomVelocitySpace 0;	///< Optional element.
/// @brief If the PTZ Node supports absolute or relative PTZ movements, it shall specify corresponding default Pan/Tilt and Zoom speeds.
/// Element DefaultPTZSpeed of type "http://www.onvif.org/ver10/schema":PTZSpeed.
    struct ns3__PTZSpeed*                DefaultPTZSpeed                0;	///< Optional element.
/// @brief If the PTZ Node supports continuous movements, it shall specify a default timeout, after which the movement stops.
/// Element DefaultPTZTimeout of type xs:duration.
    xsd__duration                        DefaultPTZTimeout              0;	///< Optional element.
/// @brief The Pan/Tilt limits element should be present for a PTZ Node that supports an absolute Pan/Tilt. If the element is present it signals the support for configurable Pan/Tilt limits. If limits are enabled, the Pan/Tilt movements shall always stay within the specified range. The Pan/Tilt limits are disabled by setting the limits to INF or +INF.
/// Element PanTiltLimits of type "http://www.onvif.org/ver10/schema":PanTiltLimits.
    struct ns3__PanTiltLimits*           PanTiltLimits                  0;	///< Optional element.
/// @brief The Zoom limits element should be present for a PTZ Node that supports absolute zoom. If the element is present it signals the supports for configurable Zoom limits. If limits are enabled the zoom movements shall always stay within the specified range. The Zoom limits are disabled by settings the limits to -INF and +INF.
/// Element ZoomLimits of type "http://www.onvif.org/ver10/schema":ZoomLimits.
    struct ns3__ZoomLimits*              ZoomLimits                     0;	///< Optional element.
/// @brief
/// Element Extension of type "http://www.onvif.org/ver10/schema":PTZConfigurationExtension.
    struct ns3__PTZConfigurationExtension*  Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":Object is a complexType with complexContent extension of "http://www.onvif.org/ver10/schema":ObjectId.
struct ns3__Object
{
/// INHERITED FROM ns3__ObjectId:
/// Attribute ObjectId of type xs:integer.
   @xsd__integer                         ObjectId                       0;	///< Optional attribute.
//  END OF INHERITED FROM ns3__ObjectId
/// Element Appearance of type "http://www.onvif.org/ver10/schema":Appearance.
    struct ns3__Appearance*              Appearance                     0;	///< Optional element.
/// Element Behaviour of type "http://www.onvif.org/ver10/schema":Behaviour.
    struct ns3__Behaviour*               Behaviour                      0;	///< Optional element.
/// Element Extension of type "http://www.onvif.org/ver10/schema":ObjectExtension.
    struct ns3__ObjectExtension*         Extension                      0;	///< Optional element.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":EventFilter is a complexType with complexContent extension of "http://docs.oasis-open.org/wsn/b-2":FilterType.
struct ns3__EventFilter
{
/// INHERITED FROM ns4__FilterType:
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
//  END OF INHERITED FROM ns4__FilterType
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":AnalyticsEngine is a complexType with complexContent extension of "http://www.onvif.org/ver10/schema":ConfigurationEntity.
struct ns3__AnalyticsEngine
{
/// INHERITED FROM ns3__ConfigurationEntity:
/// @brief User readable name. Length up to 64 characters.
/// Element Name of type "http://www.onvif.org/ver10/schema":Name.
    ns3__Name                            Name                           1;	///< Required element.
/// @brief Number of internal references currently using this configuration. <br/>This parameter is read-only and cannot be changed by a set request. <br/>For example the value increases if the configuration is added to a media profile or attached to a PaneConfiguration.
/// Element UseCount of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// @brief Token that uniquely refernces this configuration. Length up to 64 characters.
/// Attribute token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @ns3__ReferenceToken                  token                          1;	///< Required attribute.
//  END OF INHERITED FROM ns3__ConfigurationEntity
/// Element AnalyticsEngineConfiguration of type "http://www.onvif.org/ver10/schema":AnalyticsDeviceEngineConfiguration.
    struct ns3__AnalyticsDeviceEngineConfiguration*  AnalyticsEngineConfiguration   1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":AnalyticsEngineInput is a complexType with complexContent extension of "http://www.onvif.org/ver10/schema":ConfigurationEntity.
struct ns3__AnalyticsEngineInput
{
/// INHERITED FROM ns3__ConfigurationEntity:
/// @brief User readable name. Length up to 64 characters.
/// Element Name of type "http://www.onvif.org/ver10/schema":Name.
    ns3__Name                            Name                           1;	///< Required element.
/// @brief Number of internal references currently using this configuration. <br/>This parameter is read-only and cannot be changed by a set request. <br/>For example the value increases if the configuration is added to a media profile or attached to a PaneConfiguration.
/// Element UseCount of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// @brief Token that uniquely refernces this configuration. Length up to 64 characters.
/// Attribute token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @ns3__ReferenceToken                  token                          1;	///< Required attribute.
//  END OF INHERITED FROM ns3__ConfigurationEntity
/// Element SourceIdentification of type "http://www.onvif.org/ver10/schema":SourceIdentification.
    struct ns3__SourceIdentification*    SourceIdentification           1;	///< Required element.
/// Element VideoInput of type "http://www.onvif.org/ver10/schema":VideoEncoderConfiguration.
    struct ns3__VideoEncoderConfiguration*  VideoInput                     1;	///< Required element.
/// Element MetadataInput of type "http://www.onvif.org/ver10/schema":MetadataInput.
    struct ns3__MetadataInput*           MetadataInput                  1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.onvif.org/ver10/schema":AnalyticsEngineControl is a complexType with complexContent extension of "http://www.onvif.org/ver10/schema":ConfigurationEntity.
struct ns3__AnalyticsEngineControl
{
/// INHERITED FROM ns3__ConfigurationEntity:
/// @brief User readable name. Length up to 64 characters.
/// Element Name of type "http://www.onvif.org/ver10/schema":Name.
    ns3__Name                            Name                           1;	///< Required element.
/// @brief Number of internal references currently using this configuration. <br/>This parameter is read-only and cannot be changed by a set request. <br/>For example the value increases if the configuration is added to a media profile or attached to a PaneConfiguration.
/// Element UseCount of type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// @brief Token that uniquely refernces this configuration. Length up to 64 characters.
/// Attribute token of type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @ns3__ReferenceToken                  token                          1;	///< Required attribute.
//  END OF INHERITED FROM ns3__ConfigurationEntity
/// @brief Token of the analytics engine (AnalyticsEngine) being controlled.
/// Element EngineToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  EngineToken                    1;	///< Required element.
/// @brief Token of the analytics engine configuration (VideoAnalyticsConfiguration) in effect.
/// Element EngineConfigToken of type "http://www.onvif.org/ver10/schema":ReferenceToken.
    ns3__ReferenceToken                  EngineConfigToken              1;	///< Required element.
/// @brief Tokens of the input (AnalyticsEngineInput) configuration applied.
/// Size of array of ns3__ReferenceToken* is 1..unbounded
   $int                                  __sizeInputToken               1;
/// Array ns3__ReferenceToken* of length 1..unbounded
    ns3__ReferenceToken*                 InputToken                     1;
/// @brief Tokens of the receiver providing media input data. The order of ReceiverToken shall exactly match the order of InputToken.
/// Size of array of ns3__ReferenceToken* is 1..unbounded
   $int                                  __sizeReceiverToken            1;
/// Array ns3__ReferenceToken* of length 1..unbounded
    ns3__ReferenceToken*                 ReceiverToken                  1;
/// Element Multicast of type "http://www.onvif.org/ver10/schema":MulticastConfiguration.
    struct ns3__MulticastConfiguration*  Multicast                      0;	///< Optional element.
/// Element Subscription of type "http://www.onvif.org/ver10/schema":Config.
    struct ns3__Config*                  Subscription                   1;	///< Required element.
/// Element Mode of type "http://www.onvif.org/ver10/schema":ModeOfOperation.
    enum ns3__ModeOfOperation            Mode                           1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://docs.oasis-open.org/wsn/b-2":SubscribeCreationFailedFaultType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
struct ns4__SubscribeCreationFailedFaultType
{
/// INHERITED FROM ns6__BaseFaultType:
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Timestamp of type xs:dateTime.
    time_t                               ns6__Timestamp                 1;	///< Required element.
/// Element Originator of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  ns6__Originator                0;	///< Optional element.
    struct _ns4__SubscribeCreationFailedFaultType_ErrorCode
    {
/// Attribute dialect of type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ns6__ErrorCode                 0;	///< Optional element.
/// Size of Description array is 0..unbounded
   $int                                  __sizeDescription              0;
    struct _ns4__SubscribeCreationFailedFaultType_Description
    {
/// __item wraps 'xs:string' simpleContent.
    char*                                __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang                           xml__lang                      0;	///< Optional attribute.
    }                                   *ns6__Description               0;
    struct _ns4__SubscribeCreationFailedFaultType_FaultCause
    {
/// TODO: <any namespace="##other" minOccurs="1" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *ns6__FaultCause                0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns6__BaseFaultType
};

/// "http://docs.oasis-open.org/wsn/b-2":InvalidFilterFaultType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
struct ns4__InvalidFilterFaultType
{
/// INHERITED FROM ns6__BaseFaultType:
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Timestamp of type xs:dateTime.
    time_t                               ns6__Timestamp                 1;	///< Required element.
/// Element Originator of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  ns6__Originator                0;	///< Optional element.
    struct _ns4__InvalidFilterFaultType_ErrorCode
    {
/// Attribute dialect of type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ns6__ErrorCode                 0;	///< Optional element.
/// Size of Description array is 0..unbounded
   $int                                  __sizeDescription              0;
    struct _ns4__InvalidFilterFaultType_Description
    {
/// __item wraps 'xs:string' simpleContent.
    char*                                __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang                           xml__lang                      0;	///< Optional attribute.
    }                                   *ns6__Description               0;
    struct _ns4__InvalidFilterFaultType_FaultCause
    {
/// TODO: <any namespace="##other" minOccurs="1" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *ns6__FaultCause                0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns6__BaseFaultType
/// Size of array of _QName* is 1..unbounded
   $int                                  __sizeUnknownFilter            1;
/// Array _QName* of length 1..unbounded
    _QName*                              UnknownFilter                  1;
};

/// "http://docs.oasis-open.org/wsn/b-2":TopicExpressionDialectUnknownFaultType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
struct ns4__TopicExpressionDialectUnknownFaultType
{
/// INHERITED FROM ns6__BaseFaultType:
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Timestamp of type xs:dateTime.
    time_t                               ns6__Timestamp                 1;	///< Required element.
/// Element Originator of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  ns6__Originator                0;	///< Optional element.
    struct _ns4__TopicExpressionDialectUnknownFaultType_ErrorCode
    {
/// Attribute dialect of type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ns6__ErrorCode                 0;	///< Optional element.
/// Size of Description array is 0..unbounded
   $int                                  __sizeDescription              0;
    struct _ns4__TopicExpressionDialectUnknownFaultType_Description
    {
/// __item wraps 'xs:string' simpleContent.
    char*                                __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang                           xml__lang                      0;	///< Optional attribute.
    }                                   *ns6__Description               0;
    struct _ns4__TopicExpressionDialectUnknownFaultType_FaultCause
    {
/// TODO: <any namespace="##other" minOccurs="1" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *ns6__FaultCause                0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns6__BaseFaultType
};

/// "http://docs.oasis-open.org/wsn/b-2":InvalidTopicExpressionFaultType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
struct ns4__InvalidTopicExpressionFaultType
{
/// INHERITED FROM ns6__BaseFaultType:
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Timestamp of type xs:dateTime.
    time_t                               ns6__Timestamp                 1;	///< Required element.
/// Element Originator of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  ns6__Originator                0;	///< Optional element.
    struct _ns4__InvalidTopicExpressionFaultType_ErrorCode
    {
/// Attribute dialect of type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ns6__ErrorCode                 0;	///< Optional element.
/// Size of Description array is 0..unbounded
   $int                                  __sizeDescription              0;
    struct _ns4__InvalidTopicExpressionFaultType_Description
    {
/// __item wraps 'xs:string' simpleContent.
    char*                                __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang                           xml__lang                      0;	///< Optional attribute.
    }                                   *ns6__Description               0;
    struct _ns4__InvalidTopicExpressionFaultType_FaultCause
    {
/// TODO: <any namespace="##other" minOccurs="1" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *ns6__FaultCause                0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns6__BaseFaultType
};

/// "http://docs.oasis-open.org/wsn/b-2":TopicNotSupportedFaultType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
struct ns4__TopicNotSupportedFaultType
{
/// INHERITED FROM ns6__BaseFaultType:
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Timestamp of type xs:dateTime.
    time_t                               ns6__Timestamp                 1;	///< Required element.
/// Element Originator of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  ns6__Originator                0;	///< Optional element.
    struct _ns4__TopicNotSupportedFaultType_ErrorCode
    {
/// Attribute dialect of type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ns6__ErrorCode                 0;	///< Optional element.
/// Size of Description array is 0..unbounded
   $int                                  __sizeDescription              0;
    struct _ns4__TopicNotSupportedFaultType_Description
    {
/// __item wraps 'xs:string' simpleContent.
    char*                                __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang                           xml__lang                      0;	///< Optional attribute.
    }                                   *ns6__Description               0;
    struct _ns4__TopicNotSupportedFaultType_FaultCause
    {
/// TODO: <any namespace="##other" minOccurs="1" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *ns6__FaultCause                0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns6__BaseFaultType
};

/// "http://docs.oasis-open.org/wsn/b-2":MultipleTopicsSpecifiedFaultType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
struct ns4__MultipleTopicsSpecifiedFaultType
{
/// INHERITED FROM ns6__BaseFaultType:
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Timestamp of type xs:dateTime.
    time_t                               ns6__Timestamp                 1;	///< Required element.
/// Element Originator of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  ns6__Originator                0;	///< Optional element.
    struct _ns4__MultipleTopicsSpecifiedFaultType_ErrorCode
    {
/// Attribute dialect of type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ns6__ErrorCode                 0;	///< Optional element.
/// Size of Description array is 0..unbounded
   $int                                  __sizeDescription              0;
    struct _ns4__MultipleTopicsSpecifiedFaultType_Description
    {
/// __item wraps 'xs:string' simpleContent.
    char*                                __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang                           xml__lang                      0;	///< Optional attribute.
    }                                   *ns6__Description               0;
    struct _ns4__MultipleTopicsSpecifiedFaultType_FaultCause
    {
/// TODO: <any namespace="##other" minOccurs="1" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *ns6__FaultCause                0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns6__BaseFaultType
};

/// "http://docs.oasis-open.org/wsn/b-2":InvalidProducerPropertiesExpressionFaultType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
struct ns4__InvalidProducerPropertiesExpressionFaultType
{
/// INHERITED FROM ns6__BaseFaultType:
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Timestamp of type xs:dateTime.
    time_t                               ns6__Timestamp                 1;	///< Required element.
/// Element Originator of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  ns6__Originator                0;	///< Optional element.
    struct _ns4__InvalidProducerPropertiesExpressionFaultType_ErrorCode
    {
/// Attribute dialect of type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ns6__ErrorCode                 0;	///< Optional element.
/// Size of Description array is 0..unbounded
   $int                                  __sizeDescription              0;
    struct _ns4__InvalidProducerPropertiesExpressionFaultType_Description
    {
/// __item wraps 'xs:string' simpleContent.
    char*                                __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang                           xml__lang                      0;	///< Optional attribute.
    }                                   *ns6__Description               0;
    struct _ns4__InvalidProducerPropertiesExpressionFaultType_FaultCause
    {
/// TODO: <any namespace="##other" minOccurs="1" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *ns6__FaultCause                0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns6__BaseFaultType
};

/// "http://docs.oasis-open.org/wsn/b-2":InvalidMessageContentExpressionFaultType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
struct ns4__InvalidMessageContentExpressionFaultType
{
/// INHERITED FROM ns6__BaseFaultType:
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Timestamp of type xs:dateTime.
    time_t                               ns6__Timestamp                 1;	///< Required element.
/// Element Originator of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  ns6__Originator                0;	///< Optional element.
    struct _ns4__InvalidMessageContentExpressionFaultType_ErrorCode
    {
/// Attribute dialect of type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ns6__ErrorCode                 0;	///< Optional element.
/// Size of Description array is 0..unbounded
   $int                                  __sizeDescription              0;
    struct _ns4__InvalidMessageContentExpressionFaultType_Description
    {
/// __item wraps 'xs:string' simpleContent.
    char*                                __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang                           xml__lang                      0;	///< Optional attribute.
    }                                   *ns6__Description               0;
    struct _ns4__InvalidMessageContentExpressionFaultType_FaultCause
    {
/// TODO: <any namespace="##other" minOccurs="1" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *ns6__FaultCause                0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns6__BaseFaultType
};

/// "http://docs.oasis-open.org/wsn/b-2":UnrecognizedPolicyRequestFaultType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
struct ns4__UnrecognizedPolicyRequestFaultType
{
/// INHERITED FROM ns6__BaseFaultType:
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Timestamp of type xs:dateTime.
    time_t                               ns6__Timestamp                 1;	///< Required element.
/// Element Originator of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  ns6__Originator                0;	///< Optional element.
    struct _ns4__UnrecognizedPolicyRequestFaultType_ErrorCode
    {
/// Attribute dialect of type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ns6__ErrorCode                 0;	///< Optional element.
/// Size of Description array is 0..unbounded
   $int                                  __sizeDescription              0;
    struct _ns4__UnrecognizedPolicyRequestFaultType_Description
    {
/// __item wraps 'xs:string' simpleContent.
    char*                                __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang                           xml__lang                      0;	///< Optional attribute.
    }                                   *ns6__Description               0;
    struct _ns4__UnrecognizedPolicyRequestFaultType_FaultCause
    {
/// TODO: <any namespace="##other" minOccurs="1" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *ns6__FaultCause                0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns6__BaseFaultType
/// Size of array of _QName* is 0..unbounded
   $int                                  __sizeUnrecognizedPolicy       0;
/// Array _QName* of length 0..unbounded
    _QName*                              UnrecognizedPolicy             0;
};

/// "http://docs.oasis-open.org/wsn/b-2":UnsupportedPolicyRequestFaultType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
struct ns4__UnsupportedPolicyRequestFaultType
{
/// INHERITED FROM ns6__BaseFaultType:
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Timestamp of type xs:dateTime.
    time_t                               ns6__Timestamp                 1;	///< Required element.
/// Element Originator of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  ns6__Originator                0;	///< Optional element.
    struct _ns4__UnsupportedPolicyRequestFaultType_ErrorCode
    {
/// Attribute dialect of type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ns6__ErrorCode                 0;	///< Optional element.
/// Size of Description array is 0..unbounded
   $int                                  __sizeDescription              0;
    struct _ns4__UnsupportedPolicyRequestFaultType_Description
    {
/// __item wraps 'xs:string' simpleContent.
    char*                                __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang                           xml__lang                      0;	///< Optional attribute.
    }                                   *ns6__Description               0;
    struct _ns4__UnsupportedPolicyRequestFaultType_FaultCause
    {
/// TODO: <any namespace="##other" minOccurs="1" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *ns6__FaultCause                0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns6__BaseFaultType
/// Size of array of _QName* is 0..unbounded
   $int                                  __sizeUnsupportedPolicy        0;
/// Array _QName* of length 0..unbounded
    _QName*                              UnsupportedPolicy              0;
};

/// "http://docs.oasis-open.org/wsn/b-2":NotifyMessageNotSupportedFaultType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
struct ns4__NotifyMessageNotSupportedFaultType
{
/// INHERITED FROM ns6__BaseFaultType:
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Timestamp of type xs:dateTime.
    time_t                               ns6__Timestamp                 1;	///< Required element.
/// Element Originator of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  ns6__Originator                0;	///< Optional element.
    struct _ns4__NotifyMessageNotSupportedFaultType_ErrorCode
    {
/// Attribute dialect of type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ns6__ErrorCode                 0;	///< Optional element.
/// Size of Description array is 0..unbounded
   $int                                  __sizeDescription              0;
    struct _ns4__NotifyMessageNotSupportedFaultType_Description
    {
/// __item wraps 'xs:string' simpleContent.
    char*                                __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang                           xml__lang                      0;	///< Optional attribute.
    }                                   *ns6__Description               0;
    struct _ns4__NotifyMessageNotSupportedFaultType_FaultCause
    {
/// TODO: <any namespace="##other" minOccurs="1" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *ns6__FaultCause                0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns6__BaseFaultType
};

/// "http://docs.oasis-open.org/wsn/b-2":UnacceptableInitialTerminationTimeFaultType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
struct ns4__UnacceptableInitialTerminationTimeFaultType
{
/// INHERITED FROM ns6__BaseFaultType:
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Timestamp of type xs:dateTime.
    time_t                               ns6__Timestamp                 1;	///< Required element.
/// Element Originator of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  ns6__Originator                0;	///< Optional element.
    struct _ns4__UnacceptableInitialTerminationTimeFaultType_ErrorCode
    {
/// Attribute dialect of type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ns6__ErrorCode                 0;	///< Optional element.
/// Size of Description array is 0..unbounded
   $int                                  __sizeDescription              0;
    struct _ns4__UnacceptableInitialTerminationTimeFaultType_Description
    {
/// __item wraps 'xs:string' simpleContent.
    char*                                __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang                           xml__lang                      0;	///< Optional attribute.
    }                                   *ns6__Description               0;
    struct _ns4__UnacceptableInitialTerminationTimeFaultType_FaultCause
    {
/// TODO: <any namespace="##other" minOccurs="1" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *ns6__FaultCause                0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns6__BaseFaultType
/// Element MinimumTime of type xs:dateTime.
    time_t                               MinimumTime                    1;	///< Required element.
/// Element MaximumTime of type xs:dateTime.
    time_t*                              MaximumTime                    0;	///< Optional element.
};

/// "http://docs.oasis-open.org/wsn/b-2":NoCurrentMessageOnTopicFaultType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
struct ns4__NoCurrentMessageOnTopicFaultType
{
/// INHERITED FROM ns6__BaseFaultType:
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Timestamp of type xs:dateTime.
    time_t                               ns6__Timestamp                 1;	///< Required element.
/// Element Originator of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  ns6__Originator                0;	///< Optional element.
    struct _ns4__NoCurrentMessageOnTopicFaultType_ErrorCode
    {
/// Attribute dialect of type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ns6__ErrorCode                 0;	///< Optional element.
/// Size of Description array is 0..unbounded
   $int                                  __sizeDescription              0;
    struct _ns4__NoCurrentMessageOnTopicFaultType_Description
    {
/// __item wraps 'xs:string' simpleContent.
    char*                                __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang                           xml__lang                      0;	///< Optional attribute.
    }                                   *ns6__Description               0;
    struct _ns4__NoCurrentMessageOnTopicFaultType_FaultCause
    {
/// TODO: <any namespace="##other" minOccurs="1" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *ns6__FaultCause                0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns6__BaseFaultType
};

/// "http://docs.oasis-open.org/wsn/b-2":UnableToGetMessagesFaultType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
struct ns4__UnableToGetMessagesFaultType
{
/// INHERITED FROM ns6__BaseFaultType:
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Timestamp of type xs:dateTime.
    time_t                               ns6__Timestamp                 1;	///< Required element.
/// Element Originator of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  ns6__Originator                0;	///< Optional element.
    struct _ns4__UnableToGetMessagesFaultType_ErrorCode
    {
/// Attribute dialect of type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ns6__ErrorCode                 0;	///< Optional element.
/// Size of Description array is 0..unbounded
   $int                                  __sizeDescription              0;
    struct _ns4__UnableToGetMessagesFaultType_Description
    {
/// __item wraps 'xs:string' simpleContent.
    char*                                __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang                           xml__lang                      0;	///< Optional attribute.
    }                                   *ns6__Description               0;
    struct _ns4__UnableToGetMessagesFaultType_FaultCause
    {
/// TODO: <any namespace="##other" minOccurs="1" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *ns6__FaultCause                0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns6__BaseFaultType
};

/// "http://docs.oasis-open.org/wsn/b-2":UnableToDestroyPullPointFaultType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
struct ns4__UnableToDestroyPullPointFaultType
{
/// INHERITED FROM ns6__BaseFaultType:
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Timestamp of type xs:dateTime.
    time_t                               ns6__Timestamp                 1;	///< Required element.
/// Element Originator of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  ns6__Originator                0;	///< Optional element.
    struct _ns4__UnableToDestroyPullPointFaultType_ErrorCode
    {
/// Attribute dialect of type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ns6__ErrorCode                 0;	///< Optional element.
/// Size of Description array is 0..unbounded
   $int                                  __sizeDescription              0;
    struct _ns4__UnableToDestroyPullPointFaultType_Description
    {
/// __item wraps 'xs:string' simpleContent.
    char*                                __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang                           xml__lang                      0;	///< Optional attribute.
    }                                   *ns6__Description               0;
    struct _ns4__UnableToDestroyPullPointFaultType_FaultCause
    {
/// TODO: <any namespace="##other" minOccurs="1" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *ns6__FaultCause                0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns6__BaseFaultType
};

/// "http://docs.oasis-open.org/wsn/b-2":UnableToCreatePullPointFaultType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
struct ns4__UnableToCreatePullPointFaultType
{
/// INHERITED FROM ns6__BaseFaultType:
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Timestamp of type xs:dateTime.
    time_t                               ns6__Timestamp                 1;	///< Required element.
/// Element Originator of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  ns6__Originator                0;	///< Optional element.
    struct _ns4__UnableToCreatePullPointFaultType_ErrorCode
    {
/// Attribute dialect of type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ns6__ErrorCode                 0;	///< Optional element.
/// Size of Description array is 0..unbounded
   $int                                  __sizeDescription              0;
    struct _ns4__UnableToCreatePullPointFaultType_Description
    {
/// __item wraps 'xs:string' simpleContent.
    char*                                __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang                           xml__lang                      0;	///< Optional attribute.
    }                                   *ns6__Description               0;
    struct _ns4__UnableToCreatePullPointFaultType_FaultCause
    {
/// TODO: <any namespace="##other" minOccurs="1" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *ns6__FaultCause                0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns6__BaseFaultType
};

/// "http://docs.oasis-open.org/wsn/b-2":UnacceptableTerminationTimeFaultType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
struct ns4__UnacceptableTerminationTimeFaultType
{
/// INHERITED FROM ns6__BaseFaultType:
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Timestamp of type xs:dateTime.
    time_t                               ns6__Timestamp                 1;	///< Required element.
/// Element Originator of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  ns6__Originator                0;	///< Optional element.
    struct _ns4__UnacceptableTerminationTimeFaultType_ErrorCode
    {
/// Attribute dialect of type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ns6__ErrorCode                 0;	///< Optional element.
/// Size of Description array is 0..unbounded
   $int                                  __sizeDescription              0;
    struct _ns4__UnacceptableTerminationTimeFaultType_Description
    {
/// __item wraps 'xs:string' simpleContent.
    char*                                __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang                           xml__lang                      0;	///< Optional attribute.
    }                                   *ns6__Description               0;
    struct _ns4__UnacceptableTerminationTimeFaultType_FaultCause
    {
/// TODO: <any namespace="##other" minOccurs="1" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *ns6__FaultCause                0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns6__BaseFaultType
/// Element MinimumTime of type xs:dateTime.
    time_t                               MinimumTime                    1;	///< Required element.
/// Element MaximumTime of type xs:dateTime.
    time_t*                              MaximumTime                    0;	///< Optional element.
};

/// "http://docs.oasis-open.org/wsn/b-2":UnableToDestroySubscriptionFaultType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
struct ns4__UnableToDestroySubscriptionFaultType
{
/// INHERITED FROM ns6__BaseFaultType:
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Timestamp of type xs:dateTime.
    time_t                               ns6__Timestamp                 1;	///< Required element.
/// Element Originator of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  ns6__Originator                0;	///< Optional element.
    struct _ns4__UnableToDestroySubscriptionFaultType_ErrorCode
    {
/// Attribute dialect of type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ns6__ErrorCode                 0;	///< Optional element.
/// Size of Description array is 0..unbounded
   $int                                  __sizeDescription              0;
    struct _ns4__UnableToDestroySubscriptionFaultType_Description
    {
/// __item wraps 'xs:string' simpleContent.
    char*                                __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang                           xml__lang                      0;	///< Optional attribute.
    }                                   *ns6__Description               0;
    struct _ns4__UnableToDestroySubscriptionFaultType_FaultCause
    {
/// TODO: <any namespace="##other" minOccurs="1" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *ns6__FaultCause                0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns6__BaseFaultType
};

/// "http://docs.oasis-open.org/wsn/b-2":PauseFailedFaultType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
struct ns4__PauseFailedFaultType
{
/// INHERITED FROM ns6__BaseFaultType:
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Timestamp of type xs:dateTime.
    time_t                               ns6__Timestamp                 1;	///< Required element.
/// Element Originator of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  ns6__Originator                0;	///< Optional element.
    struct _ns4__PauseFailedFaultType_ErrorCode
    {
/// Attribute dialect of type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ns6__ErrorCode                 0;	///< Optional element.
/// Size of Description array is 0..unbounded
   $int                                  __sizeDescription              0;
    struct _ns4__PauseFailedFaultType_Description
    {
/// __item wraps 'xs:string' simpleContent.
    char*                                __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang                           xml__lang                      0;	///< Optional attribute.
    }                                   *ns6__Description               0;
    struct _ns4__PauseFailedFaultType_FaultCause
    {
/// TODO: <any namespace="##other" minOccurs="1" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *ns6__FaultCause                0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns6__BaseFaultType
};

/// "http://docs.oasis-open.org/wsn/b-2":ResumeFailedFaultType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
struct ns4__ResumeFailedFaultType
{
/// INHERITED FROM ns6__BaseFaultType:
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Timestamp of type xs:dateTime.
    time_t                               ns6__Timestamp                 1;	///< Required element.
/// Element Originator of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  ns6__Originator                0;	///< Optional element.
    struct _ns4__ResumeFailedFaultType_ErrorCode
    {
/// Attribute dialect of type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ns6__ErrorCode                 0;	///< Optional element.
/// Size of Description array is 0..unbounded
   $int                                  __sizeDescription              0;
    struct _ns4__ResumeFailedFaultType_Description
    {
/// __item wraps 'xs:string' simpleContent.
    char*                                __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang                           xml__lang                      0;	///< Optional attribute.
    }                                   *ns6__Description               0;
    struct _ns4__ResumeFailedFaultType_FaultCause
    {
/// TODO: <any namespace="##other" minOccurs="1" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *ns6__FaultCause                0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns6__BaseFaultType
};

/// "http://docs.oasis-open.org/wsn/t-1":TopicNamespaceType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsn/t-1":ExtensibleDocumented.
struct ns7__TopicNamespaceType
{
/// INHERITED FROM ns7__ExtensibleDocumented:
/// Element documentation of type "http://docs.oasis-open.org/wsn/t-1":Documentation.
    struct ns7__Documentation*           documentation                  0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns7__ExtensibleDocumented
/// Size of Topic array is 0..unbounded
   $int                                  __sizeTopic                    0;
    struct _ns7__TopicNamespaceType_Topic
    {
/// INHERITED FROM ns7__ExtensibleDocumented:
/// Element documentation of type "http://docs.oasis-open.org/wsn/t-1":Documentation.
    struct ns7__Documentation*           documentation                  0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns7__ExtensibleDocumented
/// INHERITED FROM ns7__TopicType:
/// Element MessagePattern of type "http://docs.oasis-open.org/wsn/t-1":QueryExpressionType.
    struct ns7__QueryExpressionType*     MessagePattern                 0;	///< Optional element.
/// Size of array of struct ns7__TopicType* is 0..unbounded
   $int                                  __sizeTopic                    0;
/// Array struct ns7__TopicType* of length 0..unbounded
    struct ns7__TopicType*               Topic                          0;
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Attribute name of type xs:NCName.
   @xsd__NCName                          name                           1;	///< Required attribute.
@    char*                                                              
                                        *messageTypes                   0;	///< Optional attribute.
/// Attribute final of type xs:boolean.
   @enum xsd__boolean                    final                          0;	///< Default value="false".
//  END OF INHERITED FROM ns7__TopicType
/// Attribute parent of type "http://docs.oasis-open.org/wsn/t-1":ConcreteTopicExpression.
   @ns7__ConcreteTopicExpression*        parent                         0;	///< Optional attribute.
    }                                   *Topic                          0;
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Attribute name of type xs:NCName.
   @xsd__NCName                          name                           0;	///< Optional attribute.
/// Attribute targetNamespace of type xs:anyURI.
   @xsd__anyURI                          targetNamespace                1;	///< Required attribute.
/// Attribute final of type xs:boolean.
   @enum xsd__boolean                    final                          0;	///< Default value="false".
};

/// "http://docs.oasis-open.org/wsn/t-1":TopicType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsn/t-1":ExtensibleDocumented.
struct ns7__TopicType
{
/// INHERITED FROM ns7__ExtensibleDocumented:
/// Element documentation of type "http://docs.oasis-open.org/wsn/t-1":Documentation.
    struct ns7__Documentation*           documentation                  0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns7__ExtensibleDocumented
/// Element MessagePattern of type "http://docs.oasis-open.org/wsn/t-1":QueryExpressionType.
    struct ns7__QueryExpressionType*     MessagePattern                 0;	///< Optional element.
/// Size of array of struct ns7__TopicType* is 0..unbounded
   $int                                  __sizeTopic                    0;
/// Array struct ns7__TopicType* of length 0..unbounded
    struct ns7__TopicType*               Topic                          0;
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Attribute name of type xs:NCName.
   @xsd__NCName                          name                           1;	///< Required attribute.
@    char*                                                              
                                        *messageTypes                   0;	///< Optional attribute.
/// Attribute final of type xs:boolean.
   @enum xsd__boolean                    final                          0;	///< Default value="false".
};

/// "http://docs.oasis-open.org/wsn/t-1":TopicSetType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsn/t-1":ExtensibleDocumented.
struct ns7__TopicSetType
{
/// INHERITED FROM ns7__ExtensibleDocumented:
/// Element documentation of type "http://docs.oasis-open.org/wsn/t-1":Documentation.
    struct ns7__Documentation*           documentation                  0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns7__ExtensibleDocumented
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
};

/// "http://docs.oasis-open.org/wsrf/r-2":ResourceUnknownFaultType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
struct ns11__ResourceUnknownFaultType
{
/// INHERITED FROM ns6__BaseFaultType:
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Timestamp of type xs:dateTime.
    time_t                               ns6__Timestamp                 1;	///< Required element.
/// Element Originator of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  ns6__Originator                0;	///< Optional element.
    struct _ns11__ResourceUnknownFaultType_ErrorCode
    {
/// Attribute dialect of type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ns6__ErrorCode                 0;	///< Optional element.
/// Size of Description array is 0..unbounded
   $int                                  __sizeDescription              0;
    struct _ns11__ResourceUnknownFaultType_Description
    {
/// __item wraps 'xs:string' simpleContent.
    char*                                __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang                           xml__lang                      0;	///< Optional attribute.
    }                                   *ns6__Description               0;
    struct _ns11__ResourceUnknownFaultType_FaultCause
    {
/// TODO: <any namespace="##other" minOccurs="1" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *ns6__FaultCause                0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns6__BaseFaultType
};

/// "http://docs.oasis-open.org/wsrf/r-2":ResourceUnavailableFaultType is a complexType with complexContent extension of "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
struct ns11__ResourceUnavailableFaultType
{
/// INHERITED FROM ns6__BaseFaultType:
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Element Timestamp of type xs:dateTime.
    time_t                               ns6__Timestamp                 1;	///< Required element.
/// Element Originator of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    struct ns14__EndpointReferenceType*  ns6__Originator                0;	///< Optional element.
    struct _ns11__ResourceUnavailableFaultType_ErrorCode
    {
/// Attribute dialect of type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ns6__ErrorCode                 0;	///< Optional element.
/// Size of Description array is 0..unbounded
   $int                                  __sizeDescription              0;
    struct _ns11__ResourceUnavailableFaultType_Description
    {
/// __item wraps 'xs:string' simpleContent.
    char*                                __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang                           xml__lang                      0;	///< Optional attribute.
    }                                   *ns6__Description               0;
    struct _ns11__ResourceUnavailableFaultType_FaultCause
    {
/// TODO: <any namespace="##other" minOccurs="1" maxOccurs="1">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *ns6__FaultCause                0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM ns6__BaseFaultType
};

/// "http://www.w3.org/2005/08/addressing":RelatesToType is a complexType with simpleContent.
struct ns14__RelatesToType
{
/// __item wraps 'xs:anyURI' simpleContent.
    xsd__anyURI                          __item                        ;
/// Attribute RelationshipType of type "http://www.w3.org/2005/08/addressing":RelationshipTypeOpenEnum.
   @ns14__RelationshipTypeOpenEnum       RelationshipType               0;	///< Default value="http://www.w3.org/2005/08/addressing/reply".
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.w3.org/2005/08/addressing":AttributedURIType is a complexType with simpleContent.
struct ns14__AttributedURIType
{
/// __item wraps 'xs:anyURI' simpleContent.
    xsd__anyURI                          __item                        ;
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.w3.org/2005/08/addressing":AttributedUnsignedLongType is a complexType with simpleContent.
struct ns14__AttributedUnsignedLongType
{
/// __item wraps 'xs:unsignedLong' simpleContent.
    ULONG64                              __item                        ;
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://www.w3.org/2005/08/addressing":AttributedQNameType is a complexType with simpleContent.
struct ns14__AttributedQNameType
{
/// __item wraps 'xs:QName' simpleContent.
    _QName                               __item                        ;
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.onvif.org/ver10/deviceIO/wsdl                                 *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://www.onvif.org/ver10/deviceIO/wsdl":Capabilities of type "http://www.onvif.org/ver10/deviceIO/wsdl":Capabilities.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.onvif.org/ver10/deviceIO/wsdl                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.onvif.org/ver10/media/wsdl                                    *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://www.onvif.org/ver10/media/wsdl":Capabilities of type "http://www.onvif.org/ver10/media/wsdl":Capabilities.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.onvif.org/ver10/media/wsdl                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.onvif.org/ver10/schema                                        *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://www.onvif.org/ver10/schema":VideoSourceConfiguration of type "http://www.onvif.org/ver10/schema":VideoSourceConfiguration.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://www.onvif.org/ver10/schema":AudioSourceConfiguration of type "http://www.onvif.org/ver10/schema":AudioSourceConfiguration.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://www.onvif.org/ver10/schema":VideoEncoderConfiguration of type "http://www.onvif.org/ver10/schema":VideoEncoderConfiguration.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://www.onvif.org/ver10/schema":AudioEncoderConfiguration of type "http://www.onvif.org/ver10/schema":AudioEncoderConfiguration.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://www.onvif.org/ver10/schema":VideoAnalyticsConfiguration of type "http://www.onvif.org/ver10/schema":VideoAnalyticsConfiguration.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://www.onvif.org/ver10/schema":PTZConfiguration of type "http://www.onvif.org/ver10/schema":PTZConfiguration.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://www.onvif.org/ver10/schema":MetadataConfiguration of type "http://www.onvif.org/ver10/schema":MetadataConfiguration.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://www.onvif.org/ver10/schema":AudioOutputConfiguration of type "http://www.onvif.org/ver10/schema":AudioOutputConfiguration.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://www.onvif.org/ver10/schema":AudioDecoderConfiguration of type "http://www.onvif.org/ver10/schema":AudioDecoderConfiguration.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://www.onvif.org/ver10/schema":Polygon of type "http://www.onvif.org/ver10/schema":Polygon.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://www.onvif.org/ver10/schema":Polyline of type "http://www.onvif.org/ver10/schema":Polyline.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://www.onvif.org/ver10/schema":MetadataStream of type "http://www.onvif.org/ver10/schema":MetadataStream.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.onvif.org/ver10/schema                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://docs.oasis-open.org/wsn/b-2                                       *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":TopicExpression of type "http://docs.oasis-open.org/wsn/b-2":TopicExpressionType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":FixedTopicSet of type xs:boolean.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":TopicExpressionDialect of type xs:anyURI.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":ConsumerReference of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":Filter of type "http://docs.oasis-open.org/wsn/b-2":FilterType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":SubscriptionPolicy of type "http://docs.oasis-open.org/wsn/b-2":SubscriptionPolicyType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":CreationTime of type xs:dateTime.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":SubscriptionReference of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":Topic of type "http://docs.oasis-open.org/wsn/b-2":TopicExpressionType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":ProducerReference of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":NotificationMessage of type "http://docs.oasis-open.org/wsn/b-2":NotificationMessageHolderType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":CurrentTime of type xs:dateTime.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":TerminationTime of type xs:dateTime.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":ProducerProperties of type "http://docs.oasis-open.org/wsn/b-2":QueryExpressionType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":MessageContent of type "http://docs.oasis-open.org/wsn/b-2":QueryExpressionType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":SubscribeCreationFailedFault of type "http://docs.oasis-open.org/wsn/b-2":SubscribeCreationFailedFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":InvalidFilterFault of type "http://docs.oasis-open.org/wsn/b-2":InvalidFilterFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":TopicExpressionDialectUnknownFault of type "http://docs.oasis-open.org/wsn/b-2":TopicExpressionDialectUnknownFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":InvalidTopicExpressionFault of type "http://docs.oasis-open.org/wsn/b-2":InvalidTopicExpressionFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":TopicNotSupportedFault of type "http://docs.oasis-open.org/wsn/b-2":TopicNotSupportedFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":MultipleTopicsSpecifiedFault of type "http://docs.oasis-open.org/wsn/b-2":MultipleTopicsSpecifiedFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":InvalidProducerPropertiesExpressionFault of type "http://docs.oasis-open.org/wsn/b-2":InvalidProducerPropertiesExpressionFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":InvalidMessageContentExpressionFault of type "http://docs.oasis-open.org/wsn/b-2":InvalidMessageContentExpressionFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnrecognizedPolicyRequestFault of type "http://docs.oasis-open.org/wsn/b-2":UnrecognizedPolicyRequestFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnsupportedPolicyRequestFault of type "http://docs.oasis-open.org/wsn/b-2":UnsupportedPolicyRequestFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":NotifyMessageNotSupportedFault of type "http://docs.oasis-open.org/wsn/b-2":NotifyMessageNotSupportedFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnacceptableInitialTerminationTimeFault of type "http://docs.oasis-open.org/wsn/b-2":UnacceptableInitialTerminationTimeFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":NoCurrentMessageOnTopicFault of type "http://docs.oasis-open.org/wsn/b-2":NoCurrentMessageOnTopicFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnableToGetMessagesFault of type "http://docs.oasis-open.org/wsn/b-2":UnableToGetMessagesFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnableToDestroyPullPointFault of type "http://docs.oasis-open.org/wsn/b-2":UnableToDestroyPullPointFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnableToCreatePullPointFault of type "http://docs.oasis-open.org/wsn/b-2":UnableToCreatePullPointFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnacceptableTerminationTimeFault of type "http://docs.oasis-open.org/wsn/b-2":UnacceptableTerminationTimeFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnableToDestroySubscriptionFault of type "http://docs.oasis-open.org/wsn/b-2":UnableToDestroySubscriptionFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":PauseFailedFault of type "http://docs.oasis-open.org/wsn/b-2":PauseFailedFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/b-2":ResumeFailedFault of type "http://docs.oasis-open.org/wsn/b-2":ResumeFailedFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://docs.oasis-open.org/wsn/b-2                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.w3.org/2004/08/xop/include                                    *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://www.w3.org/2004/08/xop/include":Include of type "http://www.w3.org/2004/08/xop/include":Include.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.w3.org/2004/08/xop/include                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://docs.oasis-open.org/wsrf/bf-2                                     *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://docs.oasis-open.org/wsrf/bf-2":BaseFault of type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://docs.oasis-open.org/wsrf/bf-2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://docs.oasis-open.org/wsn/t-1                                       *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://docs.oasis-open.org/wsn/t-1":TopicNamespace of type "http://docs.oasis-open.org/wsn/t-1":TopicNamespaceType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsn/t-1":TopicSet of type "http://docs.oasis-open.org/wsn/t-1":TopicSetType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://docs.oasis-open.org/wsn/t-1                                       *
 *                                                                            *
\******************************************************************************/


/// Top-level attribute "http://docs.oasis-open.org/wsn/t-1":topicNamespaceLocation of simpleType xs:anyURI.
/// Note: use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/// Top-level attribute "http://docs.oasis-open.org/wsn/t-1":topic of simpleType xs:boolean.
/// Note: use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.onvif.org/ver10/device/wsdl                                   *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://www.onvif.org/ver10/device/wsdl":Capabilities of type "http://www.onvif.org/ver10/device/wsdl":DeviceServiceCapabilities.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.onvif.org/ver10/device/wsdl                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.onvif.org/ver10/events/wsdl                                   *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://www.onvif.org/ver10/events/wsdl":Capabilities of type "http://www.onvif.org/ver10/events/wsdl":Capabilities.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.onvif.org/ver10/events/wsdl                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://docs.oasis-open.org/wsrf/rw-2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://docs.oasis-open.org/wsrf/rw-2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://docs.oasis-open.org/wsrf/r-2                                      *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://docs.oasis-open.org/wsrf/r-2":ResourceUnknownFault of type "http://docs.oasis-open.org/wsrf/r-2":ResourceUnknownFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://docs.oasis-open.org/wsrf/r-2":ResourceUnavailableFault of type "http://docs.oasis-open.org/wsrf/r-2":ResourceUnavailableFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://docs.oasis-open.org/wsrf/r-2                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.onvif.org/ver20/imaging/wsdl                                  *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://www.onvif.org/ver20/imaging/wsdl":Capabilities of type "http://www.onvif.org/ver20/imaging/wsdl":Capabilities.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.onvif.org/ver20/imaging/wsdl                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.onvif.org/ver20/ptz/wsdl                                      *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://www.onvif.org/ver20/ptz/wsdl":Capabilities of type "http://www.onvif.org/ver20/ptz/wsdl":Capabilities.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.onvif.org/ver20/ptz/wsdl                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.w3.org/2005/08/addressing                                     *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://www.w3.org/2005/08/addressing":EndpointReference of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://www.w3.org/2005/08/addressing":ReferenceParameters of type "http://www.w3.org/2005/08/addressing":ReferenceParametersType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://www.w3.org/2005/08/addressing":Metadata of type "http://www.w3.org/2005/08/addressing":MetadataType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://www.w3.org/2005/08/addressing":MessageID of type "http://www.w3.org/2005/08/addressing":AttributedURIType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://www.w3.org/2005/08/addressing":RelatesTo of type "http://www.w3.org/2005/08/addressing":RelatesToType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://www.w3.org/2005/08/addressing":ReplyTo of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://www.w3.org/2005/08/addressing":From of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://www.w3.org/2005/08/addressing":FaultTo of type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://www.w3.org/2005/08/addressing":To of type "http://www.w3.org/2005/08/addressing":AttributedURIType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://www.w3.org/2005/08/addressing":Action of type "http://www.w3.org/2005/08/addressing":AttributedURIType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://www.w3.org/2005/08/addressing":RetryAfter of type "http://www.w3.org/2005/08/addressing":AttributedUnsignedLongType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://www.w3.org/2005/08/addressing":ProblemHeaderQName of type "http://www.w3.org/2005/08/addressing":AttributedQNameType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://www.w3.org/2005/08/addressing":ProblemIRI of type "http://www.w3.org/2005/08/addressing":AttributedURIType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://www.w3.org/2005/08/addressing":ProblemAction of type "http://www.w3.org/2005/08/addressing":ProblemActionType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.w3.org/2005/08/addressing                                     *
 *                                                                            *
\******************************************************************************/


/// Top-level attribute "http://www.w3.org/2005/08/addressing":IsReferenceParameter of simpleType xs:boolean.
/// Note: use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	DeviceIOBinding 
//gsoap ns1  service type:	DeviceIOPort 
//gsoap ns1  service namespace:	http://www.onvif.org/ver10/deviceIO/wsdl 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns12 service name:	ImagingBinding 
//gsoap ns12 service type:	ImagingPort 
//gsoap ns12 service namespace:	http://www.onvif.org/ver20/imaging/wsdl 
//gsoap ns12 service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns13 service name:	PTZBinding 
//gsoap ns13 service type:	PTZ 
//gsoap ns13 service namespace:	http://www.onvif.org/ver20/ptz/wsdl 
//gsoap ns13 service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns16 service name:	PullPointSubscriptionBinding 
//gsoap ns16 service type:	PullPointSubscription 
//gsoap ns16 service namespace:	http://www.onvif.org/ver10/events/wsdl/PullPointSubscriptionBinding 
//gsoap ns16 service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns17 service name:	EventBinding 
//gsoap ns17 service type:	EventPortType 
//gsoap ns17 service namespace:	http://www.onvif.org/ver10/events/wsdl/EventBinding 
//gsoap ns17 service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns18 service name:	SubscriptionManagerBinding 
//gsoap ns18 service type:	SubscriptionManager 
//gsoap ns18 service namespace:	http://www.onvif.org/ver10/events/wsdl/SubscriptionManagerBinding 
//gsoap ns18 service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns19 service name:	NotificationProducerBinding 
//gsoap ns19 service type:	NotificationProducer 
//gsoap ns19 service namespace:	http://www.onvif.org/ver10/events/wsdl/NotificationProducerBinding 
//gsoap ns19 service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns2  service name:	MediaBinding 
//gsoap ns2  service type:	Media 
//gsoap ns2  service namespace:	http://www.onvif.org/ver10/media/wsdl 
//gsoap ns2  service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns20 service name:	NotificationConsumerBinding 
//gsoap ns20 service type:	NotificationConsumer 
//gsoap ns20 service namespace:	http://www.onvif.org/ver10/events/wsdl/NotificationConsumerBinding 
//gsoap ns20 service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns21 service name:	PullPointBinding 
//gsoap ns21 service type:	PullPoint 
//gsoap ns21 service namespace:	http://www.onvif.org/ver10/events/wsdl/PullPointBinding 
//gsoap ns21 service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns22 service name:	CreatePullPointBinding 
//gsoap ns22 service type:	CreatePullPoint 
//gsoap ns22 service namespace:	http://www.onvif.org/ver10/events/wsdl/CreatePullPointBinding 
//gsoap ns22 service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns23 service name:	PausableSubscriptionManagerBinding 
//gsoap ns23 service type:	PausableSubscriptionManager 
//gsoap ns23 service namespace:	http://www.onvif.org/ver10/events/wsdl/PausableSubscriptionManagerBinding 
//gsoap ns23 service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns8  service name:	DeviceBinding 
//gsoap ns8  service type:	Device 
//gsoap ns8  service namespace:	http://www.onvif.org/ver10/device/wsdl 
//gsoap ns8  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref DeviceIOBinding

  - @ref ImagingBinding

  - @ref PTZBinding

  - @ref PullPointSubscriptionBinding

  - @ref EventBinding

  - @ref SubscriptionManagerBinding

  - @ref NotificationProducerBinding

  - @ref MediaBinding

  - @ref NotificationConsumerBinding

  - @ref PullPointBinding

  - @ref CreatePullPointBinding

  - @ref PausableSubscriptionManagerBinding

  - @ref DeviceBinding

@section Service_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page DeviceIOBinding Binding "DeviceIOBinding"

@section DeviceIOBinding_operations Operations of Binding  "DeviceIOBinding"

  - @ref __ns1__GetServiceCapabilities

  - @ref __ns1__GetAudioSources

  - @ref __ns1__GetAudioOutputs

  - @ref __ns1__GetVideoSources

  - @ref __ns1__GetVideoOutputs

  - @ref __ns1__GetVideoSourceConfiguration

  - @ref __ns1__GetVideoOutputConfiguration

  - @ref __ns1__GetAudioSourceConfiguration

  - @ref __ns1__GetAudioOutputConfiguration

  - @ref __ns1__SetVideoSourceConfiguration

  - @ref __ns1__SetVideoOutputConfiguration

  - @ref __ns1__SetAudioSourceConfiguration

  - @ref __ns1__SetAudioOutputConfiguration

  - @ref __ns1__GetVideoSourceConfigurationOptions

  - @ref __ns1__GetVideoOutputConfigurationOptions

  - @ref __ns1__GetAudioSourceConfigurationOptions

  - @ref __ns1__GetAudioOutputConfigurationOptions

  - @ref __ns1__GetRelayOutputs

  - @ref __ns1__SetRelayOutputSettings

  - @ref __ns1__SetRelayOutputState

@section DeviceIOBinding_ports Endpoints of Binding  "DeviceIOBinding"

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page ImagingBinding Binding "ImagingBinding"

@section ImagingBinding_operations Operations of Binding  "ImagingBinding"

  - @ref __ns12__GetServiceCapabilities

  - @ref __ns12__GetImagingSettings

  - @ref __ns12__SetImagingSettings

  - @ref __ns12__GetOptions

  - @ref __ns12__Move

  - @ref __ns12__Stop

  - @ref __ns12__GetStatus

  - @ref __ns12__GetMoveOptions

@section ImagingBinding_ports Endpoints of Binding  "ImagingBinding"

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page PTZBinding Binding "PTZBinding"

@section PTZBinding_operations Operations of Binding  "PTZBinding"

  - @ref __ns13__GetServiceCapabilities

  - @ref __ns13__GetConfigurations

  - @ref __ns13__GetPresets

  - @ref __ns13__SetPreset

  - @ref __ns13__RemovePreset

  - @ref __ns13__GotoPreset

  - @ref __ns13__GetStatus

  - @ref __ns13__GetConfiguration

  - @ref __ns13__GetNodes

  - @ref __ns13__GetNode

  - @ref __ns13__SetConfiguration

  - @ref __ns13__GetConfigurationOptions

  - @ref __ns13__GotoHomePosition

  - @ref __ns13__SetHomePosition

  - @ref __ns13__ContinuousMove

  - @ref __ns13__RelativeMove

  - @ref __ns13__SendAuxiliaryCommand

  - @ref __ns13__AbsoluteMove

  - @ref __ns13__Stop

@section PTZBinding_ports Endpoints of Binding  "PTZBinding"

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page PullPointSubscriptionBinding Binding "PullPointSubscriptionBinding"

@section PullPointSubscriptionBinding_operations Operations of Binding  "PullPointSubscriptionBinding"

  - @ref __ns16__PullMessages

  - @ref __ns16__SetSynchronizationPoint

@section PullPointSubscriptionBinding_ports Endpoints of Binding  "PullPointSubscriptionBinding"

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page EventBinding Binding "EventBinding"

@section EventBinding_operations Operations of Binding  "EventBinding"

  - @ref __ns17__GetServiceCapabilities

  - @ref __ns17__CreatePullPointSubscription

  - @ref __ns17__GetEventProperties

@section EventBinding_ports Endpoints of Binding  "EventBinding"

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page SubscriptionManagerBinding Binding "SubscriptionManagerBinding"

@section SubscriptionManagerBinding_operations Operations of Binding  "SubscriptionManagerBinding"

  - @ref __ns18__Renew

  - @ref __ns18__Unsubscribe

@section SubscriptionManagerBinding_ports Endpoints of Binding  "SubscriptionManagerBinding"

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page NotificationProducerBinding Binding "NotificationProducerBinding"

@section NotificationProducerBinding_operations Operations of Binding  "NotificationProducerBinding"

  - @ref __ns19__Subscribe

  - @ref __ns19__GetCurrentMessage

@section NotificationProducerBinding_ports Endpoints of Binding  "NotificationProducerBinding"

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page MediaBinding Binding "MediaBinding"

@section MediaBinding_operations Operations of Binding  "MediaBinding"

  - @ref __ns2__GetVideoSources

  - @ref __ns2__GetAudioSources

  - @ref __ns2__GetAudioOutputs

  - @ref __ns2__CreateProfile

  - @ref __ns2__GetProfile

  - @ref __ns2__GetProfiles

  - @ref __ns2__AddVideoEncoderConfiguration

  - @ref __ns2__AddVideoSourceConfiguration

  - @ref __ns2__AddAudioEncoderConfiguration

  - @ref __ns2__AddAudioSourceConfiguration

  - @ref __ns2__AddPTZConfiguration

  - @ref __ns2__AddVideoAnalyticsConfiguration

  - @ref __ns2__AddMetadataConfiguration

  - @ref __ns2__AddAudioOutputConfiguration

  - @ref __ns2__AddAudioDecoderConfiguration

  - @ref __ns2__RemoveVideoEncoderConfiguration

  - @ref __ns2__RemoveVideoSourceConfiguration

  - @ref __ns2__RemoveAudioEncoderConfiguration

  - @ref __ns2__RemoveAudioSourceConfiguration

  - @ref __ns2__RemovePTZConfiguration

  - @ref __ns2__RemoveVideoAnalyticsConfiguration

  - @ref __ns2__RemoveMetadataConfiguration

  - @ref __ns2__RemoveAudioOutputConfiguration

  - @ref __ns2__RemoveAudioDecoderConfiguration

  - @ref __ns2__DeleteProfile

  - @ref __ns2__GetVideoSourceConfigurations

  - @ref __ns2__GetVideoEncoderConfigurations

  - @ref __ns2__GetAudioSourceConfigurations

  - @ref __ns2__GetAudioEncoderConfigurations

  - @ref __ns2__GetVideoAnalyticsConfigurations

  - @ref __ns2__GetMetadataConfigurations

  - @ref __ns2__GetAudioOutputConfigurations

  - @ref __ns2__GetAudioDecoderConfigurations

  - @ref __ns2__GetVideoSourceConfiguration

  - @ref __ns2__GetVideoEncoderConfiguration

  - @ref __ns2__GetAudioSourceConfiguration

  - @ref __ns2__GetAudioEncoderConfiguration

  - @ref __ns2__GetVideoAnalyticsConfiguration

  - @ref __ns2__GetMetadataConfiguration

  - @ref __ns2__GetAudioOutputConfiguration

  - @ref __ns2__GetAudioDecoderConfiguration

  - @ref __ns2__GetCompatibleVideoEncoderConfigurations

  - @ref __ns2__GetCompatibleVideoSourceConfigurations

  - @ref __ns2__GetCompatibleAudioEncoderConfigurations

  - @ref __ns2__GetCompatibleAudioSourceConfigurations

  - @ref __ns2__GetCompatibleVideoAnalyticsConfigurations

  - @ref __ns2__GetCompatibleMetadataConfigurations

  - @ref __ns2__GetCompatibleAudioOutputConfigurations

  - @ref __ns2__GetCompatibleAudioDecoderConfigurations

  - @ref __ns2__SetVideoSourceConfiguration

  - @ref __ns2__SetVideoEncoderConfiguration

  - @ref __ns2__SetAudioSourceConfiguration

  - @ref __ns2__SetAudioEncoderConfiguration

  - @ref __ns2__SetVideoAnalyticsConfiguration

  - @ref __ns2__SetMetadataConfiguration

  - @ref __ns2__SetAudioOutputConfiguration

  - @ref __ns2__SetAudioDecoderConfiguration

  - @ref __ns2__GetVideoSourceConfigurationOptions

  - @ref __ns2__GetVideoEncoderConfigurationOptions

  - @ref __ns2__GetAudioSourceConfigurationOptions

  - @ref __ns2__GetAudioEncoderConfigurationOptions

  - @ref __ns2__GetMetadataConfigurationOptions

  - @ref __ns2__GetAudioOutputConfigurationOptions

  - @ref __ns2__GetAudioDecoderConfigurationOptions

  - @ref __ns2__GetGuaranteedNumberOfVideoEncoderInstances

  - @ref __ns2__GetStreamUri

  - @ref __ns2__StartMulticastStreaming

  - @ref __ns2__StopMulticastStreaming

  - @ref __ns2__SetSynchronizationPoint

  - @ref __ns2__GetSnapshotUri

  - @ref __ns2__GetServiceCapabilities

  - @ref __ns2__GetVideoSources_

  - @ref __ns2__GetAudioSources_

  - @ref __ns2__GetAudioOutputs_

  - @ref __ns2__CreateProfile_

  - @ref __ns2__GetProfile_

  - @ref __ns2__GetProfiles_

  - @ref __ns2__AddVideoEncoderConfiguration_

  - @ref __ns2__AddVideoSourceConfiguration_

  - @ref __ns2__AddAudioEncoderConfiguration_

  - @ref __ns2__AddAudioSourceConfiguration_

  - @ref __ns2__AddPTZConfiguration_

  - @ref __ns2__AddVideoAnalyticsConfiguration_

  - @ref __ns2__AddMetadataConfiguration_

  - @ref __ns2__AddAudioOutputConfiguration_

  - @ref __ns2__AddAudioDecoderConfiguration_

  - @ref __ns2__RemoveVideoEncoderConfiguration_

  - @ref __ns2__RemoveVideoSourceConfiguration_

  - @ref __ns2__RemoveAudioEncoderConfiguration_

  - @ref __ns2__RemoveAudioSourceConfiguration_

  - @ref __ns2__RemovePTZConfiguration_

  - @ref __ns2__RemoveVideoAnalyticsConfiguration_

  - @ref __ns2__RemoveMetadataConfiguration_

  - @ref __ns2__RemoveAudioOutputConfiguration_

  - @ref __ns2__RemoveAudioDecoderConfiguration_

  - @ref __ns2__DeleteProfile_

  - @ref __ns2__GetVideoSourceConfigurations_

  - @ref __ns2__GetVideoEncoderConfigurations_

  - @ref __ns2__GetAudioSourceConfigurations_

  - @ref __ns2__GetAudioEncoderConfigurations_

  - @ref __ns2__GetVideoAnalyticsConfigurations_

  - @ref __ns2__GetMetadataConfigurations_

  - @ref __ns2__GetAudioOutputConfigurations_

  - @ref __ns2__GetAudioDecoderConfigurations_

  - @ref __ns2__GetVideoSourceConfiguration_

  - @ref __ns2__GetVideoEncoderConfiguration_

  - @ref __ns2__GetAudioSourceConfiguration_

  - @ref __ns2__GetAudioEncoderConfiguration_

  - @ref __ns2__GetVideoAnalyticsConfiguration_

  - @ref __ns2__GetMetadataConfiguration_

  - @ref __ns2__GetAudioOutputConfiguration_

  - @ref __ns2__GetAudioDecoderConfiguration_

  - @ref __ns2__GetCompatibleVideoEncoderConfigurations_

  - @ref __ns2__GetCompatibleVideoSourceConfigurations_

  - @ref __ns2__GetCompatibleAudioEncoderConfigurations_

  - @ref __ns2__GetCompatibleAudioSourceConfigurations_

  - @ref __ns2__GetCompatibleVideoAnalyticsConfigurations_

  - @ref __ns2__GetCompatibleMetadataConfigurations_

  - @ref __ns2__GetCompatibleAudioOutputConfigurations_

  - @ref __ns2__GetCompatibleAudioDecoderConfigurations_

  - @ref __ns2__SetVideoSourceConfiguration_

  - @ref __ns2__SetVideoEncoderConfiguration_

  - @ref __ns2__SetAudioSourceConfiguration_

  - @ref __ns2__SetAudioEncoderConfiguration_

  - @ref __ns2__SetVideoAnalyticsConfiguration_

  - @ref __ns2__SetMetadataConfiguration_

  - @ref __ns2__SetAudioOutputConfiguration_

  - @ref __ns2__SetAudioDecoderConfiguration_

  - @ref __ns2__GetVideoSourceConfigurationOptions_

  - @ref __ns2__GetVideoEncoderConfigurationOptions_

  - @ref __ns2__GetAudioSourceConfigurationOptions_

  - @ref __ns2__GetAudioEncoderConfigurationOptions_

  - @ref __ns2__GetMetadataConfigurationOptions_

  - @ref __ns2__GetAudioOutputConfigurationOptions_

  - @ref __ns2__GetAudioDecoderConfigurationOptions_

  - @ref __ns2__GetGuaranteedNumberOfVideoEncoderInstances_

  - @ref __ns2__GetStreamUri_

  - @ref __ns2__StartMulticastStreaming_

  - @ref __ns2__StopMulticastStreaming_

  - @ref __ns2__SetSynchronizationPoint_

  - @ref __ns2__GetSnapshotUri_

@section MediaBinding_ports Endpoints of Binding  "MediaBinding"

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page NotificationConsumerBinding Binding "NotificationConsumerBinding"

@section NotificationConsumerBinding_operations Operations of Binding  "NotificationConsumerBinding"

  - @ref __ns20__Notify

@section NotificationConsumerBinding_ports Endpoints of Binding  "NotificationConsumerBinding"

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page PullPointBinding Binding "PullPointBinding"

@section PullPointBinding_operations Operations of Binding  "PullPointBinding"

  - @ref __ns21__GetMessages

  - @ref __ns21__DestroyPullPoint

  - @ref __ns21__Notify

@section PullPointBinding_ports Endpoints of Binding  "PullPointBinding"

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page CreatePullPointBinding Binding "CreatePullPointBinding"

@section CreatePullPointBinding_operations Operations of Binding  "CreatePullPointBinding"

  - @ref __ns22__CreatePullPoint

@section CreatePullPointBinding_ports Endpoints of Binding  "CreatePullPointBinding"

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page PausableSubscriptionManagerBinding Binding "PausableSubscriptionManagerBinding"

@section PausableSubscriptionManagerBinding_operations Operations of Binding  "PausableSubscriptionManagerBinding"

  - @ref __ns23__Renew

  - @ref __ns23__Unsubscribe

  - @ref __ns23__PauseSubscription

  - @ref __ns23__ResumeSubscription

@section PausableSubscriptionManagerBinding_ports Endpoints of Binding  "PausableSubscriptionManagerBinding"

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page DeviceBinding Binding "DeviceBinding"

@section DeviceBinding_operations Operations of Binding  "DeviceBinding"

  - @ref __ns8__GetDeviceInformation

  - @ref __ns8__SetSystemDateAndTime

  - @ref __ns8__GetSystemDateAndTime

  - @ref __ns8__SetSystemFactoryDefault

  - @ref __ns8__UpgradeSystemFirmware

  - @ref __ns8__SystemReboot

  - @ref __ns8__RestoreSystem

  - @ref __ns8__GetSystemBackup

  - @ref __ns8__GetSystemLog

  - @ref __ns8__GetSystemSupportInformation

  - @ref __ns8__GetScopes

  - @ref __ns8__SetScopes

  - @ref __ns8__AddScopes

  - @ref __ns8__RemoveScopes

  - @ref __ns8__GetDiscoveryMode

  - @ref __ns8__SetDiscoveryMode

  - @ref __ns8__GetRemoteDiscoveryMode

  - @ref __ns8__SetRemoteDiscoveryMode

  - @ref __ns8__GetDPAddresses

  - @ref __ns8__GetEndpointReference

  - @ref __ns8__GetRemoteUser

  - @ref __ns8__SetRemoteUser

  - @ref __ns8__GetUsers

  - @ref __ns8__CreateUsers

  - @ref __ns8__DeleteUsers

  - @ref __ns8__SetUser

  - @ref __ns8__GetWsdlUrl

  - @ref __ns8__GetCapabilities

  - @ref __ns8__SetDPAddresses

  - @ref __ns8__GetHostname

  - @ref __ns8__SetHostname

  - @ref __ns8__GetDNS

  - @ref __ns8__SetDNS

  - @ref __ns8__GetNTP

  - @ref __ns8__SetNTP

  - @ref __ns8__GetDynamicDNS

  - @ref __ns8__SetDynamicDNS

  - @ref __ns8__GetNetworkInterfaces

  - @ref __ns8__SetNetworkInterfaces

  - @ref __ns8__GetNetworkProtocols

  - @ref __ns8__SetNetworkProtocols

  - @ref __ns8__GetNetworkDefaultGateway

  - @ref __ns8__SetNetworkDefaultGateway

  - @ref __ns8__GetZeroConfiguration

  - @ref __ns8__SetZeroConfiguration

  - @ref __ns8__GetIPAddressFilter

  - @ref __ns8__SetIPAddressFilter

  - @ref __ns8__AddIPAddressFilter

  - @ref __ns8__RemoveIPAddressFilter

  - @ref __ns8__GetAccessPolicy

  - @ref __ns8__SetAccessPolicy

  - @ref __ns8__CreateCertificate

  - @ref __ns8__GetCertificates

  - @ref __ns8__GetCertificatesStatus

  - @ref __ns8__SetCertificatesStatus

  - @ref __ns8__DeleteCertificates

  - @ref __ns8__GetPkcs10Request

  - @ref __ns8__LoadCertificates

  - @ref __ns8__GetClientCertificateMode

  - @ref __ns8__SetClientCertificateMode

  - @ref __ns8__GetRelayOutputs

  - @ref __ns8__SetRelayOutputSettings

  - @ref __ns8__SetRelayOutputState

  - @ref __ns8__SendAuxiliaryCommand

  - @ref __ns8__GetCACertificates

  - @ref __ns8__LoadCertificateWithPrivateKey

  - @ref __ns8__GetCertificateInformation

  - @ref __ns8__LoadCACertificates

  - @ref __ns8__CreateDot1XConfiguration

  - @ref __ns8__SetDot1XConfiguration

  - @ref __ns8__GetDot1XConfiguration

  - @ref __ns8__GetDot1XConfigurations

  - @ref __ns8__DeleteDot1XConfiguration

  - @ref __ns8__GetDot11Capabilities

  - @ref __ns8__GetDot11Status

  - @ref __ns8__ScanAvailableDot11Networks

  - @ref __ns8__GetSystemUris

  - @ref __ns8__StartFirmwareUpgrade

  - @ref __ns8__StartSystemRestore

  - @ref __ns8__GetServices

  - @ref __ns8__GetServiceCapabilities

  - @ref __ns8__GetDeviceInformation_

  - @ref __ns8__SetSystemDateAndTime_

  - @ref __ns8__GetSystemDateAndTime_

  - @ref __ns8__SetSystemFactoryDefault_

  - @ref __ns8__UpgradeSystemFirmware_

  - @ref __ns8__SystemReboot_

  - @ref __ns8__RestoreSystem_

  - @ref __ns8__GetSystemBackup_

  - @ref __ns8__GetSystemLog_

  - @ref __ns8__GetSystemSupportInformation_

  - @ref __ns8__GetScopes_

  - @ref __ns8__SetScopes_

  - @ref __ns8__AddScopes_

  - @ref __ns8__RemoveScopes_

  - @ref __ns8__GetDiscoveryMode_

  - @ref __ns8__SetDiscoveryMode_

  - @ref __ns8__GetRemoteDiscoveryMode_

  - @ref __ns8__SetRemoteDiscoveryMode_

  - @ref __ns8__GetDPAddresses_

  - @ref __ns8__GetEndpointReference_

  - @ref __ns8__GetRemoteUser_

  - @ref __ns8__SetRemoteUser_

  - @ref __ns8__GetUsers_

  - @ref __ns8__CreateUsers_

  - @ref __ns8__DeleteUsers_

  - @ref __ns8__SetUser_

  - @ref __ns8__GetWsdlUrl_

  - @ref __ns8__GetCapabilities_

  - @ref __ns8__SetDPAddresses_

  - @ref __ns8__GetHostname_

  - @ref __ns8__SetHostname_

  - @ref __ns8__SetHostnameFromDHCP

  - @ref __ns8__GetDNS_

  - @ref __ns8__SetDNS_

  - @ref __ns8__GetNTP_

  - @ref __ns8__SetNTP_

  - @ref __ns8__GetDynamicDNS_

  - @ref __ns8__SetDynamicDNS_

  - @ref __ns8__GetNetworkInterfaces_

  - @ref __ns8__SetNetworkInterfaces_

  - @ref __ns8__GetNetworkProtocols_

  - @ref __ns8__SetNetworkProtocols_

  - @ref __ns8__GetNetworkDefaultGateway_

  - @ref __ns8__SetNetworkDefaultGateway_

  - @ref __ns8__GetZeroConfiguration_

  - @ref __ns8__SetZeroConfiguration_

  - @ref __ns8__GetIPAddressFilter_

  - @ref __ns8__SetIPAddressFilter_

  - @ref __ns8__AddIPAddressFilter_

  - @ref __ns8__RemoveIPAddressFilter_

  - @ref __ns8__GetAccessPolicy_

  - @ref __ns8__SetAccessPolicy_

  - @ref __ns8__CreateCertificate_

  - @ref __ns8__GetCertificates_

  - @ref __ns8__GetCertificatesStatus_

  - @ref __ns8__SetCertificatesStatus_

  - @ref __ns8__DeleteCertificates_

  - @ref __ns8__GetPkcs10Request_

  - @ref __ns8__LoadCertificates_

  - @ref __ns8__GetClientCertificateMode_

  - @ref __ns8__SetClientCertificateMode_

  - @ref __ns8__GetRelayOutputs_

  - @ref __ns8__SetRelayOutputSettings_

  - @ref __ns8__SetRelayOutputState_

  - @ref __ns8__SendAuxiliaryCommand_

  - @ref __ns8__GetCACertificates_

  - @ref __ns8__LoadCertificateWithPrivateKey_

  - @ref __ns8__GetCertificateInformation_

  - @ref __ns8__LoadCACertificates_

  - @ref __ns8__CreateDot1XConfiguration_

  - @ref __ns8__SetDot1XConfiguration_

  - @ref __ns8__GetDot1XConfiguration_

  - @ref __ns8__GetDot1XConfigurations_

  - @ref __ns8__DeleteDot1XConfiguration_

  - @ref __ns8__GetDot11Capabilities_

  - @ref __ns8__GetDot11Status_

  - @ref __ns8__ScanAvailableDot11Networks_

  - @ref __ns8__GetSystemUris_

  - @ref __ns8__StartFirmwareUpgrade_

  - @ref __ns8__StartSystemRestore_

@section DeviceBinding_ports Endpoints of Binding  "DeviceBinding"

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * SOAP Fault Detail                                                          *
 *                                                                            *
\******************************************************************************/

/**

The SOAP Fault is part of the gSOAP context and its content is accessed
through the soap.fault->detail variable (SOAP 1.1) or the
soap.fault->SOAP_ENV__Detail variable (SOAP 1.2).
Use option -j to omit.

*/
struct SOAP_ENV__Detail
{
// xsd:anyAttribute omitted: to parse attribute content of the Detail element into DOM anyAttribute, use wsdl2h option -d.
    _XML                                 __any                         ;	///< Catch any element content in XML string.
    struct _ns9__PullMessagesFaultResponse*  ns9__PullMessagesFaultResponse;
///< SOAP Fault element ""http://www.onvif.org/ver10/events/wsdl":PullMessagesFaultResponse" part "parameters"
    struct ns4__InvalidFilterFaultType*  ns4__InvalidFilterFault       ;
///< SOAP Fault element ""http://docs.oasis-open.org/wsn/b-2":InvalidFilterFault" part "InvalidFilterFault"
    struct ns4__InvalidMessageContentExpressionFaultType*  ns4__InvalidMessageContentExpressionFault;
///< SOAP Fault element ""http://docs.oasis-open.org/wsn/b-2":InvalidMessageContentExpressionFault" part "InvalidMessageContentExpressionFault"
    struct ns4__InvalidProducerPropertiesExpressionFaultType*  ns4__InvalidProducerPropertiesExpressionFault;
///< SOAP Fault element ""http://docs.oasis-open.org/wsn/b-2":InvalidProducerPropertiesExpressionFault" part "InvalidProducerPropertiesExpressionFault"
    struct ns4__InvalidTopicExpressionFaultType*  ns4__InvalidTopicExpressionFault;
///< SOAP Fault element ""http://docs.oasis-open.org/wsn/b-2":InvalidTopicExpressionFault" part "InvalidTopicExpressionFault"
    struct ns4__NotifyMessageNotSupportedFaultType*  ns4__NotifyMessageNotSupportedFault;
///< SOAP Fault element ""http://docs.oasis-open.org/wsn/b-2":NotifyMessageNotSupportedFault" part "NotifyMessageNotSupportedFault"
    struct ns11__ResourceUnknownFaultType*  ns11__ResourceUnknownFault    ;
///< SOAP Fault element ""http://docs.oasis-open.org/wsrf/r-2":ResourceUnknownFault" part "ResourceUnknownFault"
    struct ns4__SubscribeCreationFailedFaultType*  ns4__SubscribeCreationFailedFault;
///< SOAP Fault element ""http://docs.oasis-open.org/wsn/b-2":SubscribeCreationFailedFault" part "SubscribeCreationFailedFault"
    struct ns4__TopicExpressionDialectUnknownFaultType*  ns4__TopicExpressionDialectUnknownFault;
///< SOAP Fault element ""http://docs.oasis-open.org/wsn/b-2":TopicExpressionDialectUnknownFault" part "TopicExpressionDialectUnknownFault"
    struct ns4__TopicNotSupportedFaultType*  ns4__TopicNotSupportedFault   ;
///< SOAP Fault element ""http://docs.oasis-open.org/wsn/b-2":TopicNotSupportedFault" part "TopicNotSupportedFault"
    struct ns4__UnacceptableInitialTerminationTimeFaultType*  ns4__UnacceptableInitialTerminationTimeFault;
///< SOAP Fault element ""http://docs.oasis-open.org/wsn/b-2":UnacceptableInitialTerminationTimeFault" part "UnacceptableInitialTerminationTimeFault"
    struct ns4__UnrecognizedPolicyRequestFaultType*  ns4__UnrecognizedPolicyRequestFault;
///< SOAP Fault element ""http://docs.oasis-open.org/wsn/b-2":UnrecognizedPolicyRequestFault" part "UnrecognizedPolicyRequestFault"
    struct ns4__UnsupportedPolicyRequestFaultType*  ns4__UnsupportedPolicyRequestFault;
///< SOAP Fault element ""http://docs.oasis-open.org/wsn/b-2":UnsupportedPolicyRequestFault" part "UnsupportedPolicyRequestFault"
    int                                  __type                        ;	///< set to SOAP_TYPE_X for a serializable type X
    void                                *fault                         ;	///< points to serializable object X or NULL
};

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   DeviceIOBinding                                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetServiceCapabilities                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetServiceCapabilities" of service binding "DeviceIOBinding"

/**

Operation details:

Returns the capabilities of the device IO service. The result is returned in a typed
answer.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/deviceio/wsdl/GetServiceCapabilities"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetServiceCapabilities(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns1__GetServiceCapabilities* ns1__GetServiceCapabilities,
    // response parameters:
    struct _ns1__GetServiceCapabilitiesResponse* ns1__GetServiceCapabilitiesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetServiceCapabilities(
    struct soap *soap,
    // request parameters:
    struct _ns1__GetServiceCapabilities* ns1__GetServiceCapabilities,
    // response parameters:
    struct _ns1__GetServiceCapabilitiesResponse* ns1__GetServiceCapabilitiesResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	GetServiceCapabilities document
//gsoap ns1  service method-encoding:	GetServiceCapabilities literal
//gsoap ns1  service method-action:	GetServiceCapabilities http://www.onvif.org/ver10/deviceio/wsdl/GetServiceCapabilities
int __ns1__GetServiceCapabilities(
    struct _ns1__GetServiceCapabilities* ns1__GetServiceCapabilities,	///< Request parameter
    struct _ns1__GetServiceCapabilitiesResponse* ns1__GetServiceCapabilitiesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAudioSources                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetAudioSources" of service binding "DeviceIOBinding"

/**

Operation details:

List all available audio sources for the device. The device that has one or more
audio sources shall support the listing of available audio inputs through the GetAudioSources
command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/deviceio/wsdl/GetAudioSources"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAudioSources(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioSources*       ns2__GetAudioSources,
    // response parameters:
    struct _ns2__GetAudioSourcesResponse* ns2__GetAudioSourcesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAudioSources(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioSources*       ns2__GetAudioSources,
    // response parameters:
    struct _ns2__GetAudioSourcesResponse* ns2__GetAudioSourcesResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	GetAudioSources document
//gsoap ns1  service method-encoding:	GetAudioSources literal
//gsoap ns1  service method-action:	GetAudioSources http://www.onvif.org/ver10/deviceio/wsdl/GetAudioSources
int __ns1__GetAudioSources(
    struct _ns2__GetAudioSources*       ns2__GetAudioSources,	///< Request parameter
    struct _ns2__GetAudioSourcesResponse* ns2__GetAudioSourcesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAudioOutputs                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetAudioOutputs" of service binding "DeviceIOBinding"

/**

Operation details:

List all available audio outputs of a device. A device that has one ore more physical
audio outputs shall support listing of available audio outputs through the GetAudioOutputs
command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/deviceio/wsdl/GetAudioOutputs"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAudioOutputs(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioOutputs*       ns2__GetAudioOutputs,
    // response parameters:
    struct _ns2__GetAudioOutputsResponse* ns2__GetAudioOutputsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAudioOutputs(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioOutputs*       ns2__GetAudioOutputs,
    // response parameters:
    struct _ns2__GetAudioOutputsResponse* ns2__GetAudioOutputsResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	GetAudioOutputs document
//gsoap ns1  service method-encoding:	GetAudioOutputs literal
//gsoap ns1  service method-action:	GetAudioOutputs http://www.onvif.org/ver10/deviceio/wsdl/GetAudioOutputs
int __ns1__GetAudioOutputs(
    struct _ns2__GetAudioOutputs*       ns2__GetAudioOutputs,	///< Request parameter
    struct _ns2__GetAudioOutputsResponse* ns2__GetAudioOutputsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetVideoSources                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetVideoSources" of service binding "DeviceIOBinding"

/**

Operation details:

List all available video sources for the device. The device that has one or more
video inputs shall support the listing of available video sources through the GetVideoSources
command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/deviceio/wsdl/GetVideoSources"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetVideoSources(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetVideoSources*       ns2__GetVideoSources,
    // response parameters:
    struct _ns2__GetVideoSourcesResponse* ns2__GetVideoSourcesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetVideoSources(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetVideoSources*       ns2__GetVideoSources,
    // response parameters:
    struct _ns2__GetVideoSourcesResponse* ns2__GetVideoSourcesResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	GetVideoSources document
//gsoap ns1  service method-encoding:	GetVideoSources literal
//gsoap ns1  service method-action:	GetVideoSources http://www.onvif.org/ver10/deviceio/wsdl/GetVideoSources
int __ns1__GetVideoSources(
    struct _ns2__GetVideoSources*       ns2__GetVideoSources,	///< Request parameter
    struct _ns2__GetVideoSourcesResponse* ns2__GetVideoSourcesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetVideoOutputs                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetVideoOutputs" of service binding "DeviceIOBinding"

/**

Operation details:

List all available video outputs of a device. A device that has one or more physical
video outputs shall support listing of available video outputs through the GetVideoOutputs
command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/deviceio/wsdl/GetVideoOutputs"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetVideoOutputs(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns1__GetVideoOutputs*       ns1__GetVideoOutputs,
    // response parameters:
    struct _ns1__GetVideoOutputsResponse* ns1__GetVideoOutputsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetVideoOutputs(
    struct soap *soap,
    // request parameters:
    struct _ns1__GetVideoOutputs*       ns1__GetVideoOutputs,
    // response parameters:
    struct _ns1__GetVideoOutputsResponse* ns1__GetVideoOutputsResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	GetVideoOutputs document
//gsoap ns1  service method-encoding:	GetVideoOutputs literal
//gsoap ns1  service method-action:	GetVideoOutputs http://www.onvif.org/ver10/deviceio/wsdl/GetVideoOutputs
int __ns1__GetVideoOutputs(
    struct _ns1__GetVideoOutputs*       ns1__GetVideoOutputs,	///< Request parameter
    struct _ns1__GetVideoOutputsResponse* ns1__GetVideoOutputsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetVideoSourceConfiguration                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetVideoSourceConfiguration" of service binding "DeviceIOBinding"

/**

Operation details:

Get the video source configurations of a VideoSource. A device with one or more
video sources shall support the GetVideoSourceConfigurations command..

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/deviceio/wsdl/GetVideoSourceConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetVideoSourceConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns1__GetVideoSourceConfiguration* ns1__GetVideoSourceConfiguration,
    // response parameters:
    struct _ns1__GetVideoSourceConfigurationResponse* ns1__GetVideoSourceConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetVideoSourceConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns1__GetVideoSourceConfiguration* ns1__GetVideoSourceConfiguration,
    // response parameters:
    struct _ns1__GetVideoSourceConfigurationResponse* ns1__GetVideoSourceConfigurationResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	GetVideoSourceConfiguration document
//gsoap ns1  service method-encoding:	GetVideoSourceConfiguration literal
//gsoap ns1  service method-action:	GetVideoSourceConfiguration http://www.onvif.org/ver10/deviceio/wsdl/GetVideoSourceConfiguration
int __ns1__GetVideoSourceConfiguration(
    struct _ns1__GetVideoSourceConfiguration* ns1__GetVideoSourceConfiguration,	///< Request parameter
    struct _ns1__GetVideoSourceConfigurationResponse* ns1__GetVideoSourceConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetVideoOutputConfiguration                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetVideoOutputConfiguration" of service binding "DeviceIOBinding"

/**

Operation details:

Get the configuration of a Video Output. A device that has one or more Video Outputs
shall support the retrieval of the VideoOutputConfiguration through this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/deviceio/wsdl/GetVideoOutputConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetVideoOutputConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns1__GetVideoOutputConfiguration* ns1__GetVideoOutputConfiguration,
    // response parameters:
    struct _ns1__GetVideoOutputConfigurationResponse* ns1__GetVideoOutputConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetVideoOutputConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns1__GetVideoOutputConfiguration* ns1__GetVideoOutputConfiguration,
    // response parameters:
    struct _ns1__GetVideoOutputConfigurationResponse* ns1__GetVideoOutputConfigurationResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	GetVideoOutputConfiguration document
//gsoap ns1  service method-encoding:	GetVideoOutputConfiguration literal
//gsoap ns1  service method-action:	GetVideoOutputConfiguration http://www.onvif.org/ver10/deviceio/wsdl/GetVideoOutputConfiguration
int __ns1__GetVideoOutputConfiguration(
    struct _ns1__GetVideoOutputConfiguration* ns1__GetVideoOutputConfiguration,	///< Request parameter
    struct _ns1__GetVideoOutputConfigurationResponse* ns1__GetVideoOutputConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAudioSourceConfiguration                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetAudioSourceConfiguration" of service binding "DeviceIOBinding"

/**

Operation details:

List the configuration of an Audio Input. A device with one or more audio inputs
shall support the GetAudioSourceConfiguration command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/deviceio/wsdl/GetAudioSourceConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAudioSourceConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns1__GetAudioSourceConfiguration* ns1__GetAudioSourceConfiguration,
    // response parameters:
    struct _ns1__GetAudioSourceConfigurationResponse* ns1__GetAudioSourceConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAudioSourceConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns1__GetAudioSourceConfiguration* ns1__GetAudioSourceConfiguration,
    // response parameters:
    struct _ns1__GetAudioSourceConfigurationResponse* ns1__GetAudioSourceConfigurationResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	GetAudioSourceConfiguration document
//gsoap ns1  service method-encoding:	GetAudioSourceConfiguration literal
//gsoap ns1  service method-action:	GetAudioSourceConfiguration http://www.onvif.org/ver10/deviceio/wsdl/GetAudioSourceConfiguration
int __ns1__GetAudioSourceConfiguration(
    struct _ns1__GetAudioSourceConfiguration* ns1__GetAudioSourceConfiguration,	///< Request parameter
    struct _ns1__GetAudioSourceConfigurationResponse* ns1__GetAudioSourceConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAudioOutputConfiguration                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetAudioOutputConfiguration" of service binding "DeviceIOBinding"

/**

Operation details:

Request the current configuration of a physical Audio output. A device that has
one or more AudioOutputs shall support the retrieval of the AudioOutputConfiguration
through this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/deviceio/wsdl/GetAudioOutputConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAudioOutputConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns1__GetAudioOutputConfiguration* ns1__GetAudioOutputConfiguration,
    // response parameters:
    struct _ns1__GetAudioOutputConfigurationResponse* ns1__GetAudioOutputConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAudioOutputConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns1__GetAudioOutputConfiguration* ns1__GetAudioOutputConfiguration,
    // response parameters:
    struct _ns1__GetAudioOutputConfigurationResponse* ns1__GetAudioOutputConfigurationResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	GetAudioOutputConfiguration document
//gsoap ns1  service method-encoding:	GetAudioOutputConfiguration literal
//gsoap ns1  service method-action:	GetAudioOutputConfiguration http://www.onvif.org/ver10/deviceio/wsdl/GetAudioOutputConfiguration
int __ns1__GetAudioOutputConfiguration(
    struct _ns1__GetAudioOutputConfiguration* ns1__GetAudioOutputConfiguration,	///< Request parameter
    struct _ns1__GetAudioOutputConfigurationResponse* ns1__GetAudioOutputConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetVideoSourceConfiguration                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetVideoSourceConfiguration" of service binding "DeviceIOBinding"

/**

Operation details:

Modify a video input configuration. A device that has one or more video sources
shall support the setting of the VideoSourceConfiguration through this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/deviceio/wsdl/SetVideoSourceConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetVideoSourceConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns1__SetVideoSourceConfiguration* ns1__SetVideoSourceConfiguration,
    // response parameters:
    struct _ns1__SetVideoSourceConfigurationResponse* ns1__SetVideoSourceConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetVideoSourceConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns1__SetVideoSourceConfiguration* ns1__SetVideoSourceConfiguration,
    // response parameters:
    struct _ns1__SetVideoSourceConfigurationResponse* ns1__SetVideoSourceConfigurationResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	SetVideoSourceConfiguration document
//gsoap ns1  service method-encoding:	SetVideoSourceConfiguration literal
//gsoap ns1  service method-action:	SetVideoSourceConfiguration http://www.onvif.org/ver10/deviceio/wsdl/SetVideoSourceConfiguration
int __ns1__SetVideoSourceConfiguration(
    struct _ns1__SetVideoSourceConfiguration* ns1__SetVideoSourceConfiguration,	///< Request parameter
    struct _ns1__SetVideoSourceConfigurationResponse* ns1__SetVideoSourceConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetVideoOutputConfiguration                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetVideoOutputConfiguration" of service binding "DeviceIOBinding"

/**

Operation details:

Modify a video output configuration. A device that has one or more video outputs
shall support the setting of its video output configuration through this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/deviceio/wsdl/SetVideoOutputConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetVideoOutputConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns1__SetVideoOutputConfiguration* ns1__SetVideoOutputConfiguration,
    // response parameters:
    struct _ns1__SetVideoOutputConfigurationResponse* ns1__SetVideoOutputConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetVideoOutputConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns1__SetVideoOutputConfiguration* ns1__SetVideoOutputConfiguration,
    // response parameters:
    struct _ns1__SetVideoOutputConfigurationResponse* ns1__SetVideoOutputConfigurationResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	SetVideoOutputConfiguration document
//gsoap ns1  service method-encoding:	SetVideoOutputConfiguration literal
//gsoap ns1  service method-action:	SetVideoOutputConfiguration http://www.onvif.org/ver10/deviceio/wsdl/SetVideoOutputConfiguration
int __ns1__SetVideoOutputConfiguration(
    struct _ns1__SetVideoOutputConfiguration* ns1__SetVideoOutputConfiguration,	///< Request parameter
    struct _ns1__SetVideoOutputConfigurationResponse* ns1__SetVideoOutputConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetAudioSourceConfiguration                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetAudioSourceConfiguration" of service binding "DeviceIOBinding"

/**

Operation details:

Modify an audio source configuration. A device that has a one or more audio sources
shall support the setting of the AudioSourceConfiguration through this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/deviceio/wsdl/SetAudioSourceConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetAudioSourceConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns1__SetAudioSourceConfiguration* ns1__SetAudioSourceConfiguration,
    // response parameters:
    struct _ns1__SetAudioSourceConfigurationResponse* ns1__SetAudioSourceConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetAudioSourceConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns1__SetAudioSourceConfiguration* ns1__SetAudioSourceConfiguration,
    // response parameters:
    struct _ns1__SetAudioSourceConfigurationResponse* ns1__SetAudioSourceConfigurationResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	SetAudioSourceConfiguration document
//gsoap ns1  service method-encoding:	SetAudioSourceConfiguration literal
//gsoap ns1  service method-action:	SetAudioSourceConfiguration http://www.onvif.org/ver10/deviceio/wsdl/SetAudioSourceConfiguration
int __ns1__SetAudioSourceConfiguration(
    struct _ns1__SetAudioSourceConfiguration* ns1__SetAudioSourceConfiguration,	///< Request parameter
    struct _ns1__SetAudioSourceConfigurationResponse* ns1__SetAudioSourceConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetAudioOutputConfiguration                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetAudioOutputConfiguration" of service binding "DeviceIOBinding"

/**

Operation details:

Modify an audio output configuration. A device that has one ore more audio outputs
shall support the setting of the AudioOutputConfiguration through this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/deviceio/wsdl/SetAudioOutputConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetAudioOutputConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns1__SetAudioOutputConfiguration* ns1__SetAudioOutputConfiguration,
    // response parameters:
    struct _ns1__SetAudioOutputConfigurationResponse* ns1__SetAudioOutputConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetAudioOutputConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns1__SetAudioOutputConfiguration* ns1__SetAudioOutputConfiguration,
    // response parameters:
    struct _ns1__SetAudioOutputConfigurationResponse* ns1__SetAudioOutputConfigurationResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	SetAudioOutputConfiguration document
//gsoap ns1  service method-encoding:	SetAudioOutputConfiguration literal
//gsoap ns1  service method-action:	SetAudioOutputConfiguration http://www.onvif.org/ver10/deviceio/wsdl/SetAudioOutputConfiguration
int __ns1__SetAudioOutputConfiguration(
    struct _ns1__SetAudioOutputConfiguration* ns1__SetAudioOutputConfiguration,	///< Request parameter
    struct _ns1__SetAudioOutputConfigurationResponse* ns1__SetAudioOutputConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetVideoSourceConfigurationOptions                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetVideoSourceConfigurationOptions" of service binding "DeviceIOBinding"

/**

Operation details:

Request the VideoSourceConfigurationOptions of a VideoSource. A device with one
or more video sources shall support this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/deviceio/wsdl/GetVideoSourceConfigurationOptions"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetVideoSourceConfigurationOptions(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns1__GetVideoSourceConfigurationOptions* ns1__GetVideoSourceConfigurationOptions,
    // response parameters:
    struct _ns1__GetVideoSourceConfigurationOptionsResponse* ns1__GetVideoSourceConfigurationOptionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetVideoSourceConfigurationOptions(
    struct soap *soap,
    // request parameters:
    struct _ns1__GetVideoSourceConfigurationOptions* ns1__GetVideoSourceConfigurationOptions,
    // response parameters:
    struct _ns1__GetVideoSourceConfigurationOptionsResponse* ns1__GetVideoSourceConfigurationOptionsResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	GetVideoSourceConfigurationOptions document
//gsoap ns1  service method-encoding:	GetVideoSourceConfigurationOptions literal
//gsoap ns1  service method-action:	GetVideoSourceConfigurationOptions http://www.onvif.org/ver10/deviceio/wsdl/GetVideoSourceConfigurationOptions
int __ns1__GetVideoSourceConfigurationOptions(
    struct _ns1__GetVideoSourceConfigurationOptions* ns1__GetVideoSourceConfigurationOptions,	///< Request parameter
    struct _ns1__GetVideoSourceConfigurationOptionsResponse* ns1__GetVideoSourceConfigurationOptionsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetVideoOutputConfigurationOptions                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetVideoOutputConfigurationOptions" of service binding "DeviceIOBinding"

/**

Operation details:

Request the VideoOutputConfigurationOptions of a VideoOutput. A device that has
one or more video outputs shall support the retrieval of VideoOutputConfigurationOptions
through this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/deviceio/wsdl/GetVideoOutputConfigurationOptions"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetVideoOutputConfigurationOptions(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns1__GetVideoOutputConfigurationOptions* ns1__GetVideoOutputConfigurationOptions,
    // response parameters:
    struct _ns1__GetVideoOutputConfigurationOptionsResponse* ns1__GetVideoOutputConfigurationOptionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetVideoOutputConfigurationOptions(
    struct soap *soap,
    // request parameters:
    struct _ns1__GetVideoOutputConfigurationOptions* ns1__GetVideoOutputConfigurationOptions,
    // response parameters:
    struct _ns1__GetVideoOutputConfigurationOptionsResponse* ns1__GetVideoOutputConfigurationOptionsResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	GetVideoOutputConfigurationOptions document
//gsoap ns1  service method-encoding:	GetVideoOutputConfigurationOptions literal
//gsoap ns1  service method-action:	GetVideoOutputConfigurationOptions http://www.onvif.org/ver10/deviceio/wsdl/GetVideoOutputConfigurationOptions
int __ns1__GetVideoOutputConfigurationOptions(
    struct _ns1__GetVideoOutputConfigurationOptions* ns1__GetVideoOutputConfigurationOptions,	///< Request parameter
    struct _ns1__GetVideoOutputConfigurationOptionsResponse* ns1__GetVideoOutputConfigurationOptionsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAudioSourceConfigurationOptions                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetAudioSourceConfigurationOptions" of service binding "DeviceIOBinding"

/**

Operation details:

Request the AudioSourceConfigurationOptions of an AudioSource. A device with one
ore more AudioSources shall support this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/deviceio/wsdl/GetAudioSourceConfigurationOptions"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAudioSourceConfigurationOptions(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns1__GetAudioSourceConfigurationOptions* ns1__GetAudioSourceConfigurationOptions,
    // response parameters:
    struct _ns1__GetAudioSourceConfigurationOptionsResponse* ns1__GetAudioSourceConfigurationOptionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAudioSourceConfigurationOptions(
    struct soap *soap,
    // request parameters:
    struct _ns1__GetAudioSourceConfigurationOptions* ns1__GetAudioSourceConfigurationOptions,
    // response parameters:
    struct _ns1__GetAudioSourceConfigurationOptionsResponse* ns1__GetAudioSourceConfigurationOptionsResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	GetAudioSourceConfigurationOptions document
//gsoap ns1  service method-encoding:	GetAudioSourceConfigurationOptions literal
//gsoap ns1  service method-action:	GetAudioSourceConfigurationOptions http://www.onvif.org/ver10/deviceio/wsdl/GetAudioSourceConfigurationOptions
int __ns1__GetAudioSourceConfigurationOptions(
    struct _ns1__GetAudioSourceConfigurationOptions* ns1__GetAudioSourceConfigurationOptions,	///< Request parameter
    struct _ns1__GetAudioSourceConfigurationOptionsResponse* ns1__GetAudioSourceConfigurationOptionsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAudioOutputConfigurationOptions                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetAudioOutputConfigurationOptions" of service binding "DeviceIOBinding"

/**

Operation details:

Request the available settings and ranges for a physical Audio output. A device
that has one or more AudioOutputs shall support this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/deviceio/wsdl/GetAudioOutputConfigurationOptions"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAudioOutputConfigurationOptions(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns1__GetAudioOutputConfigurationOptions* ns1__GetAudioOutputConfigurationOptions,
    // response parameters:
    struct _ns1__GetAudioOutputConfigurationOptionsResponse* ns1__GetAudioOutputConfigurationOptionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAudioOutputConfigurationOptions(
    struct soap *soap,
    // request parameters:
    struct _ns1__GetAudioOutputConfigurationOptions* ns1__GetAudioOutputConfigurationOptions,
    // response parameters:
    struct _ns1__GetAudioOutputConfigurationOptionsResponse* ns1__GetAudioOutputConfigurationOptionsResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	GetAudioOutputConfigurationOptions document
//gsoap ns1  service method-encoding:	GetAudioOutputConfigurationOptions literal
//gsoap ns1  service method-action:	GetAudioOutputConfigurationOptions http://www.onvif.org/ver10/deviceio/wsdl/GetAudioOutputConfigurationOptions
int __ns1__GetAudioOutputConfigurationOptions(
    struct _ns1__GetAudioOutputConfigurationOptions* ns1__GetAudioOutputConfigurationOptions,	///< Request parameter
    struct _ns1__GetAudioOutputConfigurationOptionsResponse* ns1__GetAudioOutputConfigurationOptionsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetRelayOutputs                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetRelayOutputs" of service binding "DeviceIOBinding"

/**

Operation details:

This operation gets a list of all available relay outputs and their settings.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/deviceio/wsdl/GetRelayOutputs"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetRelayOutputs(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetRelayOutputs*       ns8__GetRelayOutputs,
    // response parameters:
    struct _ns8__GetRelayOutputsResponse* ns8__GetRelayOutputsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetRelayOutputs(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetRelayOutputs*       ns8__GetRelayOutputs,
    // response parameters:
    struct _ns8__GetRelayOutputsResponse* ns8__GetRelayOutputsResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	GetRelayOutputs document
//gsoap ns1  service method-encoding:	GetRelayOutputs literal
//gsoap ns1  service method-action:	GetRelayOutputs http://www.onvif.org/ver10/deviceio/wsdl/GetRelayOutputs
int __ns1__GetRelayOutputs(
    struct _ns8__GetRelayOutputs*       ns8__GetRelayOutputs,	///< Request parameter
    struct _ns8__GetRelayOutputsResponse* ns8__GetRelayOutputsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetRelayOutputSettings                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetRelayOutputSettings" of service binding "DeviceIOBinding"

/**

Operation details:

This operation sets the settings of a relay output.
				The relay can work in two relay modes: <ul>
					<li>
				Bistable  After setting the state, the relay
remains in this state.</li>
					<li>
				Monostable  After setting the state, the relay
returns to its idle state after the
				specified time.</li>
				</ul>
				The physical idle state of a relay output can be
configured by setting the IdleState to open or
				closed (inversion of the relay behaviour).<br/>
				Idle State open means that the relay is open
when the relay state is set to inactive through
				the trigger command (see Section 8.5.3) and closed
when the state is set to active through
				the same command.<br/>
				Idle State closed means, that the relay is
closed when the relay state is set to inactive
				through the trigger command (see Section 8.5.3)
and open when the state is set to active
				through the same command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/deviceio/wsdl/SetRelayOutputSettings"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetRelayOutputSettings(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns1__SetRelayOutputSettings* ns1__SetRelayOutputSettings,
    // response parameters:
    struct _ns1__SetRelayOutputSettingsResponse* ns1__SetRelayOutputSettingsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetRelayOutputSettings(
    struct soap *soap,
    // request parameters:
    struct _ns1__SetRelayOutputSettings* ns1__SetRelayOutputSettings,
    // response parameters:
    struct _ns1__SetRelayOutputSettingsResponse* ns1__SetRelayOutputSettingsResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	SetRelayOutputSettings document
//gsoap ns1  service method-encoding:	SetRelayOutputSettings literal
//gsoap ns1  service method-action:	SetRelayOutputSettings http://www.onvif.org/ver10/deviceio/wsdl/SetRelayOutputSettings
int __ns1__SetRelayOutputSettings(
    struct _ns1__SetRelayOutputSettings* ns1__SetRelayOutputSettings,	///< Request parameter
    struct _ns1__SetRelayOutputSettingsResponse* ns1__SetRelayOutputSettingsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetRelayOutputState                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetRelayOutputState" of service binding "DeviceIOBinding"

/**

Operation details:

Modify the relay state.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/deviceio/wsdl/SetRelayOutputState"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetRelayOutputState(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetRelayOutputState*   ns8__SetRelayOutputState,
    // response parameters:
    struct _ns8__SetRelayOutputStateResponse* ns8__SetRelayOutputStateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetRelayOutputState(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetRelayOutputState*   ns8__SetRelayOutputState,
    // response parameters:
    struct _ns8__SetRelayOutputStateResponse* ns8__SetRelayOutputStateResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	SetRelayOutputState document
//gsoap ns1  service method-encoding:	SetRelayOutputState literal
//gsoap ns1  service method-action:	SetRelayOutputState http://www.onvif.org/ver10/deviceio/wsdl/SetRelayOutputState
int __ns1__SetRelayOutputState(
    struct _ns8__SetRelayOutputState*   ns8__SetRelayOutputState,	///< Request parameter
    struct _ns8__SetRelayOutputStateResponse* ns8__SetRelayOutputStateResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   ImagingBinding                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns12__GetServiceCapabilities                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns12__GetServiceCapabilities" of service binding "ImagingBinding"

/**

Operation details:

Returns the capabilities of the imaging service. The result is returned in a typed
answer.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/imaging/wsdl/GetServiceCapabilities"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns12__GetServiceCapabilities(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns12__GetServiceCapabilities* ns12__GetServiceCapabilities,
    // response parameters:
    struct _ns12__GetServiceCapabilitiesResponse* ns12__GetServiceCapabilitiesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns12__GetServiceCapabilities(
    struct soap *soap,
    // request parameters:
    struct _ns12__GetServiceCapabilities* ns12__GetServiceCapabilities,
    // response parameters:
    struct _ns12__GetServiceCapabilitiesResponse* ns12__GetServiceCapabilitiesResponse
  );
@endcode

*/

//gsoap ns12 service method-style:	GetServiceCapabilities document
//gsoap ns12 service method-encoding:	GetServiceCapabilities literal
//gsoap ns12 service method-action:	GetServiceCapabilities http://www.onvif.org/ver20/imaging/wsdl/GetServiceCapabilities
int __ns12__GetServiceCapabilities(
    struct _ns12__GetServiceCapabilities* ns12__GetServiceCapabilities,	///< Request parameter
    struct _ns12__GetServiceCapabilitiesResponse* ns12__GetServiceCapabilitiesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns12__GetImagingSettings                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns12__GetImagingSettings" of service binding "ImagingBinding"

/**

Operation details:

Get the ImagingConfiguration for the requested VideoSource.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/imaging/wsdl/GetImagingSettings"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns12__GetImagingSettings(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns12__GetImagingSettings*   ns12__GetImagingSettings,
    // response parameters:
    struct _ns12__GetImagingSettingsResponse* ns12__GetImagingSettingsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns12__GetImagingSettings(
    struct soap *soap,
    // request parameters:
    struct _ns12__GetImagingSettings*   ns12__GetImagingSettings,
    // response parameters:
    struct _ns12__GetImagingSettingsResponse* ns12__GetImagingSettingsResponse
  );
@endcode

*/

//gsoap ns12 service method-style:	GetImagingSettings document
//gsoap ns12 service method-encoding:	GetImagingSettings literal
//gsoap ns12 service method-action:	GetImagingSettings http://www.onvif.org/ver20/imaging/wsdl/GetImagingSettings
int __ns12__GetImagingSettings(
    struct _ns12__GetImagingSettings*   ns12__GetImagingSettings,	///< Request parameter
    struct _ns12__GetImagingSettingsResponse* ns12__GetImagingSettingsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns12__SetImagingSettings                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns12__SetImagingSettings" of service binding "ImagingBinding"

/**

Operation details:

Set the ImagingConfiguration for the requested VideoSource.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/imaging/wsdl/SetImagingSettings"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns12__SetImagingSettings(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns12__SetImagingSettings*   ns12__SetImagingSettings,
    // response parameters:
    struct _ns12__SetImagingSettingsResponse* ns12__SetImagingSettingsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns12__SetImagingSettings(
    struct soap *soap,
    // request parameters:
    struct _ns12__SetImagingSettings*   ns12__SetImagingSettings,
    // response parameters:
    struct _ns12__SetImagingSettingsResponse* ns12__SetImagingSettingsResponse
  );
@endcode

*/

//gsoap ns12 service method-style:	SetImagingSettings document
//gsoap ns12 service method-encoding:	SetImagingSettings literal
//gsoap ns12 service method-action:	SetImagingSettings http://www.onvif.org/ver20/imaging/wsdl/SetImagingSettings
int __ns12__SetImagingSettings(
    struct _ns12__SetImagingSettings*   ns12__SetImagingSettings,	///< Request parameter
    struct _ns12__SetImagingSettingsResponse* ns12__SetImagingSettingsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns12__GetOptions                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns12__GetOptions" of service binding "ImagingBinding"

/**

Operation details:

This operation gets the valid ranges for the imaging parameters that have device
specific ranges. 
			This command is mandatory for all device implementing the
imaging service. The command returns all supported parameters and their ranges

			such that these can be applied to the SetImagingSettings
command.<br/>
			For read-only parameters which cannot be modified via the
SetImagingSettings command only a single option or identical Min and Max values

			is provided.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/imaging/wsdl/GetOptions"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns12__GetOptions(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns12__GetOptions*           ns12__GetOptions,
    // response parameters:
    struct _ns12__GetOptionsResponse*   ns12__GetOptionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns12__GetOptions(
    struct soap *soap,
    // request parameters:
    struct _ns12__GetOptions*           ns12__GetOptions,
    // response parameters:
    struct _ns12__GetOptionsResponse*   ns12__GetOptionsResponse
  );
@endcode

*/

//gsoap ns12 service method-style:	GetOptions document
//gsoap ns12 service method-encoding:	GetOptions literal
//gsoap ns12 service method-action:	GetOptions http://www.onvif.org/ver20/imaging/wsdl/GetOptions
int __ns12__GetOptions(
    struct _ns12__GetOptions*           ns12__GetOptions,	///< Request parameter
    struct _ns12__GetOptionsResponse*   ns12__GetOptionsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns12__Move                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns12__Move" of service binding "ImagingBinding"

/**

Operation details:

The Move command moves the focus lens in an absolute, a relative or in a continuous
manner from its current position. 
			The speed argument is optional for absolute and relative
control, but required for continuous. If no speed argument is used, the default
speed is used. 
			Focus adjustments through this operation will turn off the
autofocus. A device with support for remote focus control should support absolute,

			relative or continuous control through the Move operation.
The supported MoveOpions are signalled via the GetMoveOptions command.
			At least one focus control capability is required for this
operation to be functional. <br/>
			The move operation contains the following commands:<br/>
			<b>Absolute</b>  Requires position parameter and optionally
takes a speed argument. A unitless type is used by default for focus positioning
and speed. Optionally, if supported, the position may be requested in m-1 units.
<br/>
			<b>Relative</b>  Requires distance parameter and optionally
takes a speed argument. Negative distance means negative direction. 
			<b>Continuous</b>  Requires a speed argument. Negative
speed argument means negative direction.
			

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/imaging/wsdl/Move"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns12__Move(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns12__Move*                 ns12__Move,
    // response parameters:
    struct _ns12__MoveResponse*         ns12__MoveResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns12__Move(
    struct soap *soap,
    // request parameters:
    struct _ns12__Move*                 ns12__Move,
    // response parameters:
    struct _ns12__MoveResponse*         ns12__MoveResponse
  );
@endcode

*/

//gsoap ns12 service method-style:	Move document
//gsoap ns12 service method-encoding:	Move literal
//gsoap ns12 service method-action:	Move http://www.onvif.org/ver20/imaging/wsdl/Move
int __ns12__Move(
    struct _ns12__Move*                 ns12__Move,	///< Request parameter
    struct _ns12__MoveResponse*         ns12__MoveResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns12__Stop                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns12__Stop" of service binding "ImagingBinding"

/**

Operation details:

The Stop command stops all ongoing focus movements of the lense. A device with support
for remote focus control as signalled via 
			the GetMoveOptions supports this command. <br/>The operation
will not affect ongoing autofocus operation.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/imaging/wsdl/FocusStop"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns12__Stop(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns12__Stop*                 ns12__Stop,
    // response parameters:
    struct _ns12__StopResponse*         ns12__StopResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns12__Stop(
    struct soap *soap,
    // request parameters:
    struct _ns12__Stop*                 ns12__Stop,
    // response parameters:
    struct _ns12__StopResponse*         ns12__StopResponse
  );
@endcode

*/

//gsoap ns12 service method-style:	Stop document
//gsoap ns12 service method-encoding:	Stop literal
//gsoap ns12 service method-action:	Stop http://www.onvif.org/ver20/imaging/wsdl/FocusStop
int __ns12__Stop(
    struct _ns12__Stop*                 ns12__Stop,	///< Request parameter
    struct _ns12__StopResponse*         ns12__StopResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns12__GetStatus                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns12__GetStatus" of service binding "ImagingBinding"

/**

Operation details:

Via this command the current status of the Move operation can be requested. Supported
for this command is available if the support for the Move operation is signalled
via GetMoveOptions.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/imaging/wsdl/GetStatus"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns12__GetStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns12__GetStatus*            ns12__GetStatus,
    // response parameters:
    struct _ns12__GetStatusResponse*    ns12__GetStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns12__GetStatus(
    struct soap *soap,
    // request parameters:
    struct _ns12__GetStatus*            ns12__GetStatus,
    // response parameters:
    struct _ns12__GetStatusResponse*    ns12__GetStatusResponse
  );
@endcode

*/

//gsoap ns12 service method-style:	GetStatus document
//gsoap ns12 service method-encoding:	GetStatus literal
//gsoap ns12 service method-action:	GetStatus http://www.onvif.org/ver20/imaging/wsdl/GetStatus
int __ns12__GetStatus(
    struct _ns12__GetStatus*            ns12__GetStatus,	///< Request parameter
    struct _ns12__GetStatusResponse*    ns12__GetStatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns12__GetMoveOptions                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns12__GetMoveOptions" of service binding "ImagingBinding"

/**

Operation details:

Imaging move operation options supported for the Video source.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/imaging/wsdl/GetMoveOptions"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns12__GetMoveOptions(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns12__GetMoveOptions*       ns12__GetMoveOptions,
    // response parameters:
    struct _ns12__GetMoveOptionsResponse* ns12__GetMoveOptionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns12__GetMoveOptions(
    struct soap *soap,
    // request parameters:
    struct _ns12__GetMoveOptions*       ns12__GetMoveOptions,
    // response parameters:
    struct _ns12__GetMoveOptionsResponse* ns12__GetMoveOptionsResponse
  );
@endcode

*/

//gsoap ns12 service method-style:	GetMoveOptions document
//gsoap ns12 service method-encoding:	GetMoveOptions literal
//gsoap ns12 service method-action:	GetMoveOptions http://www.onvif.org/ver20/imaging/wsdl/GetMoveOptions
int __ns12__GetMoveOptions(
    struct _ns12__GetMoveOptions*       ns12__GetMoveOptions,	///< Request parameter
    struct _ns12__GetMoveOptionsResponse* ns12__GetMoveOptionsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   PTZBinding                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns13__GetServiceCapabilities                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns13__GetServiceCapabilities" of service binding "PTZBinding"

/**

Operation details:

Returns the capabilities of the PTZ service. The result is returned in a typed answer.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/ptz/wsdl/GetServiceCapabilities"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns13__GetServiceCapabilities(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns13__GetServiceCapabilities* ns13__GetServiceCapabilities,
    // response parameters:
    struct _ns13__GetServiceCapabilitiesResponse* ns13__GetServiceCapabilitiesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns13__GetServiceCapabilities(
    struct soap *soap,
    // request parameters:
    struct _ns13__GetServiceCapabilities* ns13__GetServiceCapabilities,
    // response parameters:
    struct _ns13__GetServiceCapabilitiesResponse* ns13__GetServiceCapabilitiesResponse
  );
@endcode

*/

//gsoap ns13 service method-style:	GetServiceCapabilities document
//gsoap ns13 service method-encoding:	GetServiceCapabilities literal
//gsoap ns13 service method-action:	GetServiceCapabilities http://www.onvif.org/ver20/ptz/wsdl/GetServiceCapabilities
int __ns13__GetServiceCapabilities(
    struct _ns13__GetServiceCapabilities* ns13__GetServiceCapabilities,	///< Request parameter
    struct _ns13__GetServiceCapabilitiesResponse* ns13__GetServiceCapabilitiesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns13__GetConfigurations                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns13__GetConfigurations" of service binding "PTZBinding"

/**

Operation details:


		        Get all the existing PTZConfigurations from the NVT.
				<br/>
				The default Position/Translation/Velocity Spaces
are introduced to allow NVCs sending move
				requests without the need to specify a certain coordinate
system. The default Speeds are
				introduced to control the speed of move requests
(absolute, relative, preset), where no
				explicit speed has been set.<br/>
				The allowed pan and tilt range for Pan/Tilt Limits
is defined by a two-dimensional space range
				that is mapped to a specific Absolute Pan/Tilt Position
Space. At least one Pan/Tilt Position
				Space is required by the PTZNode to support Pan/Tilt
limits. The limits apply to all supported
				absolute, relative and continuous Pan/Tilt movements.
The limits shall be checked within the
				coordinate system for which the limits have been
specified. That means that even if
				movements are specified in a different coordinate
system, the requested movements shall be
				transformed to the coordinate system of the limits
where the limits can be checked. When a
				relative or continuous movements is specified, which
would leave the specified limits, the PTZ
				unit has to move along the specified limits. The
Zoom Limits have to be interpreted
				accordingly.
			

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/ptz/wsdl/GetConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns13__GetConfigurations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns13__GetConfigurations*    ns13__GetConfigurations,
    // response parameters:
    struct _ns13__GetConfigurationsResponse* ns13__GetConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns13__GetConfigurations(
    struct soap *soap,
    // request parameters:
    struct _ns13__GetConfigurations*    ns13__GetConfigurations,
    // response parameters:
    struct _ns13__GetConfigurationsResponse* ns13__GetConfigurationsResponse
  );
@endcode

*/

//gsoap ns13 service method-style:	GetConfigurations document
//gsoap ns13 service method-encoding:	GetConfigurations literal
//gsoap ns13 service method-action:	GetConfigurations http://www.onvif.org/ver20/ptz/wsdl/GetConfigurations
int __ns13__GetConfigurations(
    struct _ns13__GetConfigurations*    ns13__GetConfigurations,	///< Request parameter
    struct _ns13__GetConfigurationsResponse* ns13__GetConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns13__GetPresets                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns13__GetPresets" of service binding "PTZBinding"

/**

Operation details:


        Operation to request all PTZ presets for the PTZNode
        in the selected profile. The operation is supported if there is support
        for at least on PTZ preset by the PTZNode.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/ptz/wsdl/GetPresets"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns13__GetPresets(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns13__GetPresets*           ns13__GetPresets,
    // response parameters:
    struct _ns13__GetPresetsResponse*   ns13__GetPresetsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns13__GetPresets(
    struct soap *soap,
    // request parameters:
    struct _ns13__GetPresets*           ns13__GetPresets,
    // response parameters:
    struct _ns13__GetPresetsResponse*   ns13__GetPresetsResponse
  );
@endcode

*/

//gsoap ns13 service method-style:	GetPresets document
//gsoap ns13 service method-encoding:	GetPresets literal
//gsoap ns13 service method-action:	GetPresets http://www.onvif.org/ver20/ptz/wsdl/GetPresets
int __ns13__GetPresets(
    struct _ns13__GetPresets*           ns13__GetPresets,	///< Request parameter
    struct _ns13__GetPresetsResponse*   ns13__GetPresetsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns13__SetPreset                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns13__SetPreset" of service binding "PTZBinding"

/**

Operation details:


				The SetPreset command saves the current device position
parameters so that the device can
				move to the saved preset position through the GotoPreset
operation.
				In order to create a new preset, the SetPresetRequest
contains no PresetToken. If creation is
				successful, the Response contains the PresetToken
which uniquely identifies the Preset. An
				existing Preset can be overwritten by specifying
the PresetToken of the corresponding Preset.
				In both cases (overwriting or creation) an optional
PresetName can be specified. The
				operation fails if the PTZ device is moving during
the SetPreset operation.
				The device MAY internally save additional states
such as imaging properties in the PTZ
				Preset which then should be recalled in the GotoPreset
operation.      

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/ptz/wsdl/SetPreset"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns13__SetPreset(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns13__SetPreset*            ns13__SetPreset,
    // response parameters:
    struct _ns13__SetPresetResponse*    ns13__SetPresetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns13__SetPreset(
    struct soap *soap,
    // request parameters:
    struct _ns13__SetPreset*            ns13__SetPreset,
    // response parameters:
    struct _ns13__SetPresetResponse*    ns13__SetPresetResponse
  );
@endcode

*/

//gsoap ns13 service method-style:	SetPreset document
//gsoap ns13 service method-encoding:	SetPreset literal
//gsoap ns13 service method-action:	SetPreset http://www.onvif.org/ver20/ptz/wsdl/SetPreset
int __ns13__SetPreset(
    struct _ns13__SetPreset*            ns13__SetPreset,	///< Request parameter
    struct _ns13__SetPresetResponse*    ns13__SetPresetResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns13__RemovePreset                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns13__RemovePreset" of service binding "PTZBinding"

/**

Operation details:


        Operation to remove a PTZ preset for the Node in
        the
        selected profile. The operation is supported if the
        PresetPosition
        capability exists for teh Node in the
        selected profile.
      

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/ptz/wsdl/RemovePreset"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns13__RemovePreset(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns13__RemovePreset*         ns13__RemovePreset,
    // response parameters:
    struct _ns13__RemovePresetResponse* ns13__RemovePresetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns13__RemovePreset(
    struct soap *soap,
    // request parameters:
    struct _ns13__RemovePreset*         ns13__RemovePreset,
    // response parameters:
    struct _ns13__RemovePresetResponse* ns13__RemovePresetResponse
  );
@endcode

*/

//gsoap ns13 service method-style:	RemovePreset document
//gsoap ns13 service method-encoding:	RemovePreset literal
//gsoap ns13 service method-action:	RemovePreset http://www.onvif.org/ver20/ptz/wsdl/RemovePreset
int __ns13__RemovePreset(
    struct _ns13__RemovePreset*         ns13__RemovePreset,	///< Request parameter
    struct _ns13__RemovePresetResponse* ns13__RemovePresetResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns13__GotoPreset                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns13__GotoPreset" of service binding "PTZBinding"

/**

Operation details:


        Operation to go to a saved preset position for the
        PTZNode in the selected profile. The operation is supported if there is
        support for at least on PTZ preset by the PTZNode.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/ptz/wsdl/GotoPreset"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns13__GotoPreset(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns13__GotoPreset*           ns13__GotoPreset,
    // response parameters:
    struct _ns13__GotoPresetResponse*   ns13__GotoPresetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns13__GotoPreset(
    struct soap *soap,
    // request parameters:
    struct _ns13__GotoPreset*           ns13__GotoPreset,
    // response parameters:
    struct _ns13__GotoPresetResponse*   ns13__GotoPresetResponse
  );
@endcode

*/

//gsoap ns13 service method-style:	GotoPreset document
//gsoap ns13 service method-encoding:	GotoPreset literal
//gsoap ns13 service method-action:	GotoPreset http://www.onvif.org/ver20/ptz/wsdl/GotoPreset
int __ns13__GotoPreset(
    struct _ns13__GotoPreset*           ns13__GotoPreset,	///< Request parameter
    struct _ns13__GotoPresetResponse*   ns13__GotoPresetResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns13__GetStatus                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns13__GetStatus" of service binding "PTZBinding"

/**

Operation details:


				Operation to request PTZ status for the Node in
the
				selected profile.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/ptz/wsdl/GetStatus"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns13__GetStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns13__GetStatus*            ns13__GetStatus,
    // response parameters:
    struct _ns13__GetStatusResponse*    ns13__GetStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns13__GetStatus(
    struct soap *soap,
    // request parameters:
    struct _ns13__GetStatus*            ns13__GetStatus,
    // response parameters:
    struct _ns13__GetStatusResponse*    ns13__GetStatusResponse
  );
@endcode

*/

//gsoap ns13 service method-style:	GetStatus document
//gsoap ns13 service method-encoding:	GetStatus literal
//gsoap ns13 service method-action:	GetStatus http://www.onvif.org/ver20/ptz/wsdl/GetStatus
int __ns13__GetStatus(
    struct _ns13__GetStatus*            ns13__GetStatus,	///< Request parameter
    struct _ns13__GetStatusResponse*    ns13__GetStatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns13__GetConfiguration                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns13__GetConfiguration" of service binding "PTZBinding"

/**

Operation details:

Get a specific PTZonfiguration from the NVT, identified by its reference token or
name.
				<br/>
				The default Position/Translation/Velocity Spaces
are introduced to allow NVCs sending move
				requests without the need to specify a certain coordinate
system. The default Speeds are
				introduced to control the speed of move requests
(absolute, relative, preset), where no
				explicit speed has been set.<br/>
				The allowed pan and tilt range for Pan/Tilt Limits
is defined by a two-dimensional space range
				that is mapped to a specific Absolute Pan/Tilt Position
Space. At least one Pan/Tilt Position
				Space is required by the PTZNode to support Pan/Tilt
limits. The limits apply to all supported
				absolute, relative and continuous Pan/Tilt movements.
The limits shall be checked within the
				coordinate system for which the limits have been
specified. That means that even if
				movements are specified in a different coordinate
system, the requested movements shall be
				transformed to the coordinate system of the limits
where the limits can be checked. When a
				relative or continuous movements is specified, which
would leave the specified limits, the PTZ
				unit has to move along the specified limits. The
Zoom Limits have to be interpreted
				accordingly.
			

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/ptz/wsdl/GetConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns13__GetConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns13__GetConfiguration*     ns13__GetConfiguration,
    // response parameters:
    struct _ns13__GetConfigurationResponse* ns13__GetConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns13__GetConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns13__GetConfiguration*     ns13__GetConfiguration,
    // response parameters:
    struct _ns13__GetConfigurationResponse* ns13__GetConfigurationResponse
  );
@endcode

*/

//gsoap ns13 service method-style:	GetConfiguration document
//gsoap ns13 service method-encoding:	GetConfiguration literal
//gsoap ns13 service method-action:	GetConfiguration http://www.onvif.org/ver20/ptz/wsdl/GetConfiguration
int __ns13__GetConfiguration(
    struct _ns13__GetConfiguration*     ns13__GetConfiguration,	///< Request parameter
    struct _ns13__GetConfigurationResponse* ns13__GetConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns13__GetNodes                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns13__GetNodes" of service binding "PTZBinding"

/**

Operation details:


				Get the descriptions of the available PTZ Nodes.
				<br/>
				A PTZ-capable device may have multiple PTZ Nodes.
The PTZ Nodes may represent
				mechanical PTZ drivers, uploaded PTZ drivers or
digital PTZ drivers. PTZ Nodes are the
				lowest level entities in the PTZ control API and
reflect the supported PTZ capabilities. The
				PTZ Node is referenced either by its name or by
its reference token. 
      		

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/ptz/wsdl/GetNodes"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns13__GetNodes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns13__GetNodes*             ns13__GetNodes,
    // response parameters:
    struct _ns13__GetNodesResponse*     ns13__GetNodesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns13__GetNodes(
    struct soap *soap,
    // request parameters:
    struct _ns13__GetNodes*             ns13__GetNodes,
    // response parameters:
    struct _ns13__GetNodesResponse*     ns13__GetNodesResponse
  );
@endcode

*/

//gsoap ns13 service method-style:	GetNodes document
//gsoap ns13 service method-encoding:	GetNodes literal
//gsoap ns13 service method-action:	GetNodes http://www.onvif.org/ver20/ptz/wsdl/GetNodes
int __ns13__GetNodes(
    struct _ns13__GetNodes*             ns13__GetNodes,	///< Request parameter
    struct _ns13__GetNodesResponse*     ns13__GetNodesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns13__GetNode                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns13__GetNode" of service binding "PTZBinding"

/**

Operation details:

Get a specific PTZ Node identified by a reference
        token or a name.
	  

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/ptz/wsdl/GetNode"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns13__GetNode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns13__GetNode*              ns13__GetNode,
    // response parameters:
    struct _ns13__GetNodeResponse*      ns13__GetNodeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns13__GetNode(
    struct soap *soap,
    // request parameters:
    struct _ns13__GetNode*              ns13__GetNode,
    // response parameters:
    struct _ns13__GetNodeResponse*      ns13__GetNodeResponse
  );
@endcode

*/

//gsoap ns13 service method-style:	GetNode document
//gsoap ns13 service method-encoding:	GetNode literal
//gsoap ns13 service method-action:	GetNode http://www.onvif.org/ver20/ptz/wsdl/GetNode
int __ns13__GetNode(
    struct _ns13__GetNode*              ns13__GetNode,	///< Request parameter
    struct _ns13__GetNodeResponse*      ns13__GetNodeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns13__SetConfiguration                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns13__SetConfiguration" of service binding "PTZBinding"

/**

Operation details:


        Set/update a existing PTZConfiguration on the NVT
      

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/ptz/wsdl/SetConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns13__SetConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns13__SetConfiguration*     ns13__SetConfiguration,
    // response parameters:
    struct _ns13__SetConfigurationResponse* ns13__SetConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns13__SetConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns13__SetConfiguration*     ns13__SetConfiguration,
    // response parameters:
    struct _ns13__SetConfigurationResponse* ns13__SetConfigurationResponse
  );
@endcode

*/

//gsoap ns13 service method-style:	SetConfiguration document
//gsoap ns13 service method-encoding:	SetConfiguration literal
//gsoap ns13 service method-action:	SetConfiguration http://www.onvif.org/ver20/ptz/wsdl/SetConfiguration
int __ns13__SetConfiguration(
    struct _ns13__SetConfiguration*     ns13__SetConfiguration,	///< Request parameter
    struct _ns13__SetConfigurationResponse* ns13__SetConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns13__GetConfigurationOptions                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns13__GetConfigurationOptions" of service binding "PTZBinding"

/**

Operation details:


				List supported coordinate systems including their
range limitations. Therefore, the options
				MAY differ depending on whether the PTZ Configuration
is assigned to a Profile containing a
				Video Source Configuration. In that case, the options
may additionally contain coordinate
				systems referring to the image coordinate system
described by the Video Source
				Configuration. If the PTZ Node supports continuous
movements, it shall return a Timeout Range within
				which Timeouts are accepted by the PTZ Node.				
			

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/ptz/wsdl/GetConfigurationOptions"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns13__GetConfigurationOptions(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns13__GetConfigurationOptions* ns13__GetConfigurationOptions,
    // response parameters:
    struct _ns13__GetConfigurationOptionsResponse* ns13__GetConfigurationOptionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns13__GetConfigurationOptions(
    struct soap *soap,
    // request parameters:
    struct _ns13__GetConfigurationOptions* ns13__GetConfigurationOptions,
    // response parameters:
    struct _ns13__GetConfigurationOptionsResponse* ns13__GetConfigurationOptionsResponse
  );
@endcode

*/

//gsoap ns13 service method-style:	GetConfigurationOptions document
//gsoap ns13 service method-encoding:	GetConfigurationOptions literal
//gsoap ns13 service method-action:	GetConfigurationOptions http://www.onvif.org/ver20/ptz/wsdl/GetConfigurationOptions
int __ns13__GetConfigurationOptions(
    struct _ns13__GetConfigurationOptions* ns13__GetConfigurationOptions,	///< Request parameter
    struct _ns13__GetConfigurationOptionsResponse* ns13__GetConfigurationOptionsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns13__GotoHomePosition                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns13__GotoHomePosition" of service binding "PTZBinding"

/**

Operation details:


        Operation to move the PTZ device to it's "home" position. The operation
is supported if the HomeSupported element in the PTZNode is true.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/ptz/wsdl/GotoHomePosition"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns13__GotoHomePosition(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns13__GotoHomePosition*     ns13__GotoHomePosition,
    // response parameters:
    struct _ns13__GotoHomePositionResponse* ns13__GotoHomePositionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns13__GotoHomePosition(
    struct soap *soap,
    // request parameters:
    struct _ns13__GotoHomePosition*     ns13__GotoHomePosition,
    // response parameters:
    struct _ns13__GotoHomePositionResponse* ns13__GotoHomePositionResponse
  );
@endcode

*/

//gsoap ns13 service method-style:	GotoHomePosition document
//gsoap ns13 service method-encoding:	GotoHomePosition literal
//gsoap ns13 service method-action:	GotoHomePosition http://www.onvif.org/ver20/ptz/wsdl/GotoHomePosition
int __ns13__GotoHomePosition(
    struct _ns13__GotoHomePosition*     ns13__GotoHomePosition,	///< Request parameter
    struct _ns13__GotoHomePositionResponse* ns13__GotoHomePositionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns13__SetHomePosition                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns13__SetHomePosition" of service binding "PTZBinding"

/**

Operation details:

Operation to save current position as the home position.
				The SetHomePosition command returns with a failure
if the home position is fixed and
				cannot be overwritten. If the SetHomePosition is
successful, it is possible to recall the
				Home Position with the GotoHomePosition command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/ptz/wsdl/SetHomePosition"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns13__SetHomePosition(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns13__SetHomePosition*      ns13__SetHomePosition,
    // response parameters:
    struct _ns13__SetHomePositionResponse* ns13__SetHomePositionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns13__SetHomePosition(
    struct soap *soap,
    // request parameters:
    struct _ns13__SetHomePosition*      ns13__SetHomePosition,
    // response parameters:
    struct _ns13__SetHomePositionResponse* ns13__SetHomePositionResponse
  );
@endcode

*/

//gsoap ns13 service method-style:	SetHomePosition document
//gsoap ns13 service method-encoding:	SetHomePosition literal
//gsoap ns13 service method-action:	SetHomePosition http://www.onvif.org/ver20/ptz/wsdl/SetHomePosition
int __ns13__SetHomePosition(
    struct _ns13__SetHomePosition*      ns13__SetHomePosition,	///< Request parameter
    struct _ns13__SetHomePositionResponse* ns13__SetHomePositionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns13__ContinuousMove                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns13__ContinuousMove" of service binding "PTZBinding"

/**

Operation details:

Operation for continuous Pan/Tilt and Zoom movements. The operation is supported
if the PTZNode supports at least one continuous Pan/Tilt or Zoom space. Speed argument
is optional. If the speed argument is omitted, the default speed set by the PTZConfiguration
will be used.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/ptz/wsdl/ContinuousMove"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns13__ContinuousMove(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns13__ContinuousMove*       ns13__ContinuousMove,
    // response parameters:
    struct _ns13__ContinuousMoveResponse* ns13__ContinuousMoveResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns13__ContinuousMove(
    struct soap *soap,
    // request parameters:
    struct _ns13__ContinuousMove*       ns13__ContinuousMove,
    // response parameters:
    struct _ns13__ContinuousMoveResponse* ns13__ContinuousMoveResponse
  );
@endcode

*/

//gsoap ns13 service method-style:	ContinuousMove document
//gsoap ns13 service method-encoding:	ContinuousMove literal
//gsoap ns13 service method-action:	ContinuousMove http://www.onvif.org/ver20/ptz/wsdl/ContinuousMove
int __ns13__ContinuousMove(
    struct _ns13__ContinuousMove*       ns13__ContinuousMove,	///< Request parameter
    struct _ns13__ContinuousMoveResponse* ns13__ContinuousMoveResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns13__RelativeMove                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns13__RelativeMove" of service binding "PTZBinding"

/**

Operation details:

Operation for Relative Pan/Tilt and Zoom Move. The operation is supported if the
PTZNode supports at least one relative Pan/Tilt or Zoom space. Speed argument is
optional. If the speed argument is omitted, the default speed set by the PTZConfiguration
will be used.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/ptz/wsdl/RelativeMove"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns13__RelativeMove(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns13__RelativeMove*         ns13__RelativeMove,
    // response parameters:
    struct _ns13__RelativeMoveResponse* ns13__RelativeMoveResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns13__RelativeMove(
    struct soap *soap,
    // request parameters:
    struct _ns13__RelativeMove*         ns13__RelativeMove,
    // response parameters:
    struct _ns13__RelativeMoveResponse* ns13__RelativeMoveResponse
  );
@endcode

*/

//gsoap ns13 service method-style:	RelativeMove document
//gsoap ns13 service method-encoding:	RelativeMove literal
//gsoap ns13 service method-action:	RelativeMove http://www.onvif.org/ver20/ptz/wsdl/RelativeMove
int __ns13__RelativeMove(
    struct _ns13__RelativeMove*         ns13__RelativeMove,	///< Request parameter
    struct _ns13__RelativeMoveResponse* ns13__RelativeMoveResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns13__SendAuxiliaryCommand                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns13__SendAuxiliaryCommand" of service binding "PTZBinding"

/**

Operation details:


        Operation to send auxiliary commands to the PTZ device
        mapped by the PTZNode in the selected profile. The
        operation is supported
        if the AuxiliarySupported element of the PTZNode is true
      

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/ptz/wsdl/SendAuxiliaryCommand"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns13__SendAuxiliaryCommand(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns13__SendAuxiliaryCommand* ns13__SendAuxiliaryCommand,
    // response parameters:
    struct _ns13__SendAuxiliaryCommandResponse* ns13__SendAuxiliaryCommandResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns13__SendAuxiliaryCommand(
    struct soap *soap,
    // request parameters:
    struct _ns13__SendAuxiliaryCommand* ns13__SendAuxiliaryCommand,
    // response parameters:
    struct _ns13__SendAuxiliaryCommandResponse* ns13__SendAuxiliaryCommandResponse
  );
@endcode

*/

//gsoap ns13 service method-style:	SendAuxiliaryCommand document
//gsoap ns13 service method-encoding:	SendAuxiliaryCommand literal
//gsoap ns13 service method-action:	SendAuxiliaryCommand http://www.onvif.org/ver20/ptz/wsdl/SendAuxiliaryCommand
int __ns13__SendAuxiliaryCommand(
    struct _ns13__SendAuxiliaryCommand* ns13__SendAuxiliaryCommand,	///< Request parameter
    struct _ns13__SendAuxiliaryCommandResponse* ns13__SendAuxiliaryCommandResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns13__AbsoluteMove                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns13__AbsoluteMove" of service binding "PTZBinding"

/**

Operation details:

Operation to move pan,tilt or zoom to a absolute destination. Speed argument is
optional. If the speed argument is omitted, the default speed set by the PTZConfiguration
will be used.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/ptz/wsdl/AbsoluteMove"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns13__AbsoluteMove(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns13__AbsoluteMove*         ns13__AbsoluteMove,
    // response parameters:
    struct _ns13__AbsoluteMoveResponse* ns13__AbsoluteMoveResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns13__AbsoluteMove(
    struct soap *soap,
    // request parameters:
    struct _ns13__AbsoluteMove*         ns13__AbsoluteMove,
    // response parameters:
    struct _ns13__AbsoluteMoveResponse* ns13__AbsoluteMoveResponse
  );
@endcode

*/

//gsoap ns13 service method-style:	AbsoluteMove document
//gsoap ns13 service method-encoding:	AbsoluteMove literal
//gsoap ns13 service method-action:	AbsoluteMove http://www.onvif.org/ver20/ptz/wsdl/AbsoluteMove
int __ns13__AbsoluteMove(
    struct _ns13__AbsoluteMove*         ns13__AbsoluteMove,	///< Request parameter
    struct _ns13__AbsoluteMoveResponse* ns13__AbsoluteMoveResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns13__Stop                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns13__Stop" of service binding "PTZBinding"

/**

Operation details:

Operation to stop ongoing pan, tilt and zoom movements of absolute relative and
continuous type.
If no stop argument for pan, tilt or zoom is set, the NVT will stop all ongoing
pan, tilt and zoom movements.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver20/ptz/wsdl/Stop"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns13__Stop(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns13__Stop*                 ns13__Stop,
    // response parameters:
    struct _ns13__StopResponse*         ns13__StopResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns13__Stop(
    struct soap *soap,
    // request parameters:
    struct _ns13__Stop*                 ns13__Stop,
    // response parameters:
    struct _ns13__StopResponse*         ns13__StopResponse
  );
@endcode

*/

//gsoap ns13 service method-style:	Stop document
//gsoap ns13 service method-encoding:	Stop literal
//gsoap ns13 service method-action:	Stop http://www.onvif.org/ver20/ptz/wsdl/Stop
int __ns13__Stop(
    struct _ns13__Stop*                 ns13__Stop,	///< Request parameter
    struct _ns13__StopResponse*         ns13__StopResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   PullPointSubscriptionBinding                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns16__PullMessages                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns16__PullMessages" of service binding "PullPointSubscriptionBinding"

/**

Operation details:


				This method pulls one or more messages from a PullPoint.
				The device shall provide the following PullMessages
command for all SubscriptionManager
				endpoints returned by the CreatePullPointSubscription
command. This method shall not wait until
				the requested number of messages is available but
return as soon as at least one message is available.<br/>
				The command shall at least support a Timeout of
one minute. In case a device supports retrieval of less messages 
				than requested it shall return these without generating
a fault.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/PullMessagesRequest"

  - SOAP Fault: "http://www.onvif.org/ver10/events/wsdl":PullMessagesFaultResponse (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns16__PullMessages(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns9__PullMessages*          ns9__PullMessages,
    // response parameters:
    struct _ns9__PullMessagesResponse*  ns9__PullMessagesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns16__PullMessages(
    struct soap *soap,
    // request parameters:
    struct _ns9__PullMessages*          ns9__PullMessages,
    // response parameters:
    struct _ns9__PullMessagesResponse*  ns9__PullMessagesResponse
  );
@endcode

*/

//gsoap ns16 service method-style:	PullMessages document
//gsoap ns16 service method-encoding:	PullMessages literal
//gsoap ns16 service method-action:	PullMessages http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/PullMessagesRequest
//gsoap ns16 service method-fault:	PullMessages ns9__PullMessagesFaultResponse
int __ns16__PullMessages(
    struct _ns9__PullMessages*          ns9__PullMessages,	///< Request parameter
    struct _ns9__PullMessagesResponse*  ns9__PullMessagesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns16__SetSynchronizationPoint                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns16__SetSynchronizationPoint" of service binding "PullPointSubscriptionBinding"

/**

Operation details:

Properties inform a client about property creation, changes and
				deletion in a uniform way. When a client wants to
synchronize its properties with the
				properties of the device, it can request a synchronization
point which repeats the current
				status of all properties to which a client has subscribed.
The PropertyOperation of all
				produced notifications is set to Initialized
(see Section 15.5). The Synchronization Point is
				requested directly from the SubscriptionManager
which was returned in either the
				SubscriptionResponse or in the CreatePullPointSubscriptionResponse.
The property update is
				transmitted via the notification transportation
of the notification interface. This method is mandatory.
			

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/SetSynchronizationPointRequest"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns16__SetSynchronizationPoint(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns9__SetSynchronizationPoint* ns9__SetSynchronizationPoint,
    // response parameters:
    struct _ns9__SetSynchronizationPointResponse* ns9__SetSynchronizationPointResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns16__SetSynchronizationPoint(
    struct soap *soap,
    // request parameters:
    struct _ns9__SetSynchronizationPoint* ns9__SetSynchronizationPoint,
    // response parameters:
    struct _ns9__SetSynchronizationPointResponse* ns9__SetSynchronizationPointResponse
  );
@endcode

*/

//gsoap ns16 service method-style:	SetSynchronizationPoint document
//gsoap ns16 service method-encoding:	SetSynchronizationPoint literal
//gsoap ns16 service method-action:	SetSynchronizationPoint http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/SetSynchronizationPointRequest
int __ns16__SetSynchronizationPoint(
    struct _ns9__SetSynchronizationPoint* ns9__SetSynchronizationPoint,	///< Request parameter
    struct _ns9__SetSynchronizationPointResponse* ns9__SetSynchronizationPointResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   EventBinding                                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns17__GetServiceCapabilities                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns17__GetServiceCapabilities" of service binding "EventBinding"

/**

Operation details:

Returns the capabilities of the event service. The result is returned in a typed
answer.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/events/wsdl/EventPortType/GetServiceCapabilities"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns17__GetServiceCapabilities(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns9__GetServiceCapabilities* ns9__GetServiceCapabilities,
    // response parameters:
    struct _ns9__GetServiceCapabilitiesResponse* ns9__GetServiceCapabilitiesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns17__GetServiceCapabilities(
    struct soap *soap,
    // request parameters:
    struct _ns9__GetServiceCapabilities* ns9__GetServiceCapabilities,
    // response parameters:
    struct _ns9__GetServiceCapabilitiesResponse* ns9__GetServiceCapabilitiesResponse
  );
@endcode

*/

//gsoap ns17 service method-style:	GetServiceCapabilities document
//gsoap ns17 service method-encoding:	GetServiceCapabilities literal
//gsoap ns17 service method-action:	GetServiceCapabilities http://www.onvif.org/ver10/events/wsdl/EventPortType/GetServiceCapabilities
int __ns17__GetServiceCapabilities(
    struct _ns9__GetServiceCapabilities* ns9__GetServiceCapabilities,	///< Request parameter
    struct _ns9__GetServiceCapabilitiesResponse* ns9__GetServiceCapabilitiesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns17__CreatePullPointSubscription                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns17__CreatePullPointSubscription" of service binding "EventBinding"

/**

Operation details:

This method returns a PullPointSubscription that can be polled using PullMessages.

				This message contains the same elements as the SubscriptionRequest
of the WS-BaseNotification without the ConsumerReference.<br/>
				If no Filter is specified the pullpoint notifies
all occurring events to the client.<br/>
				This method is mandatory.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/events/wsdl/EventPortType/CreatePullPointSubscriptionRequest"

  - SOAP Fault: "http://docs.oasis-open.org/wsrf/r-2":ResourceUnknownFault (literal)

  - SOAP Fault: "http://docs.oasis-open.org/wsn/b-2":InvalidFilterFault (literal)

  - SOAP Fault: "http://docs.oasis-open.org/wsn/b-2":TopicExpressionDialectUnknownFault (literal)

  - SOAP Fault: "http://docs.oasis-open.org/wsn/b-2":InvalidTopicExpressionFault (literal)

  - SOAP Fault: "http://docs.oasis-open.org/wsn/b-2":TopicNotSupportedFault (literal)

  - SOAP Fault: "http://docs.oasis-open.org/wsn/b-2":InvalidProducerPropertiesExpressionFault (literal)

  - SOAP Fault: "http://docs.oasis-open.org/wsn/b-2":InvalidMessageContentExpressionFault (literal)

  - SOAP Fault: "http://docs.oasis-open.org/wsn/b-2":UnacceptableInitialTerminationTimeFault (literal)

  - SOAP Fault: "http://docs.oasis-open.org/wsn/b-2":UnrecognizedPolicyRequestFault (literal)

  - SOAP Fault: "http://docs.oasis-open.org/wsn/b-2":UnsupportedPolicyRequestFault (literal)

  - SOAP Fault: "http://docs.oasis-open.org/wsn/b-2":NotifyMessageNotSupportedFault (literal)

  - SOAP Fault: "http://docs.oasis-open.org/wsn/b-2":SubscribeCreationFailedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns17__CreatePullPointSubscription(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns9__CreatePullPointSubscription* ns9__CreatePullPointSubscription,
    // response parameters:
    struct _ns9__CreatePullPointSubscriptionResponse* ns9__CreatePullPointSubscriptionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns17__CreatePullPointSubscription(
    struct soap *soap,
    // request parameters:
    struct _ns9__CreatePullPointSubscription* ns9__CreatePullPointSubscription,
    // response parameters:
    struct _ns9__CreatePullPointSubscriptionResponse* ns9__CreatePullPointSubscriptionResponse
  );
@endcode

*/

//gsoap ns17 service method-style:	CreatePullPointSubscription document
//gsoap ns17 service method-encoding:	CreatePullPointSubscription literal
//gsoap ns17 service method-action:	CreatePullPointSubscription http://www.onvif.org/ver10/events/wsdl/EventPortType/CreatePullPointSubscriptionRequest
//gsoap ns17 service method-fault:	CreatePullPointSubscription ns11__ResourceUnknownFault
//gsoap ns17 service method-fault:	CreatePullPointSubscription ns4__InvalidFilterFault
//gsoap ns17 service method-fault:	CreatePullPointSubscription ns4__TopicExpressionDialectUnknownFault
//gsoap ns17 service method-fault:	CreatePullPointSubscription ns4__InvalidTopicExpressionFault
//gsoap ns17 service method-fault:	CreatePullPointSubscription ns4__TopicNotSupportedFault
//gsoap ns17 service method-fault:	CreatePullPointSubscription ns4__InvalidProducerPropertiesExpressionFault
//gsoap ns17 service method-fault:	CreatePullPointSubscription ns4__InvalidMessageContentExpressionFault
//gsoap ns17 service method-fault:	CreatePullPointSubscription ns4__UnacceptableInitialTerminationTimeFault
//gsoap ns17 service method-fault:	CreatePullPointSubscription ns4__UnrecognizedPolicyRequestFault
//gsoap ns17 service method-fault:	CreatePullPointSubscription ns4__UnsupportedPolicyRequestFault
//gsoap ns17 service method-fault:	CreatePullPointSubscription ns4__NotifyMessageNotSupportedFault
//gsoap ns17 service method-fault:	CreatePullPointSubscription ns4__SubscribeCreationFailedFault
int __ns17__CreatePullPointSubscription(
    struct _ns9__CreatePullPointSubscription* ns9__CreatePullPointSubscription,	///< Request parameter
    struct _ns9__CreatePullPointSubscriptionResponse* ns9__CreatePullPointSubscriptionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns17__GetEventProperties                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns17__GetEventProperties" of service binding "EventBinding"

/**

Operation details:

The WS-BaseNotification specification defines a set of OPTIONAL WS-ResouceProperties.
				This specification does not require the implementation
of the WS-ResourceProperty interface.
				Instead, the subsequent direct interface shall be
implemented by an ONVIF compliant device
				in order to provide information about the FilterDialects,
Schema files and topics supported by
				the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/events/wsdl/EventPortType/GetEventPropertiesRequest"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns17__GetEventProperties(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns9__GetEventProperties*    ns9__GetEventProperties,
    // response parameters:
    struct _ns9__GetEventPropertiesResponse* ns9__GetEventPropertiesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns17__GetEventProperties(
    struct soap *soap,
    // request parameters:
    struct _ns9__GetEventProperties*    ns9__GetEventProperties,
    // response parameters:
    struct _ns9__GetEventPropertiesResponse* ns9__GetEventPropertiesResponse
  );
@endcode

*/

//gsoap ns17 service method-style:	GetEventProperties document
//gsoap ns17 service method-encoding:	GetEventProperties literal
//gsoap ns17 service method-action:	GetEventProperties http://www.onvif.org/ver10/events/wsdl/EventPortType/GetEventPropertiesRequest
int __ns17__GetEventProperties(
    struct _ns9__GetEventProperties*    ns9__GetEventProperties,	///< Request parameter
    struct _ns9__GetEventPropertiesResponse* ns9__GetEventPropertiesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   SubscriptionManagerBinding                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns18__Renew                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns18__Renew" of service binding "SubscriptionManagerBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://docs.oasis-open.org/wsn/bw-2/SubscriptionManager/RenewRequest"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns18__Renew(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns4__Renew*                 ns4__Renew,
    // response parameters:
    struct _ns4__RenewResponse*         ns4__RenewResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns18__Renew(
    struct soap *soap,
    // request parameters:
    struct _ns4__Renew*                 ns4__Renew,
    // response parameters:
    struct _ns4__RenewResponse*         ns4__RenewResponse
  );
@endcode

*/

//gsoap ns18 service method-style:	Renew document
//gsoap ns18 service method-encoding:	Renew literal
//gsoap ns18 service method-action:	Renew http://docs.oasis-open.org/wsn/bw-2/SubscriptionManager/RenewRequest
int __ns18__Renew(
    struct _ns4__Renew*                 ns4__Renew,	///< Request parameter
    struct _ns4__RenewResponse*         ns4__RenewResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns18__Unsubscribe                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns18__Unsubscribe" of service binding "SubscriptionManagerBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://docs.oasis-open.org/wsn/bw-2/SubscriptionManager/UnsubscribeRequest"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns18__Unsubscribe(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns4__Unsubscribe*           ns4__Unsubscribe,
    // response parameters:
    struct _ns4__UnsubscribeResponse*   ns4__UnsubscribeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns18__Unsubscribe(
    struct soap *soap,
    // request parameters:
    struct _ns4__Unsubscribe*           ns4__Unsubscribe,
    // response parameters:
    struct _ns4__UnsubscribeResponse*   ns4__UnsubscribeResponse
  );
@endcode

*/

//gsoap ns18 service method-style:	Unsubscribe document
//gsoap ns18 service method-encoding:	Unsubscribe literal
//gsoap ns18 service method-action:	Unsubscribe http://docs.oasis-open.org/wsn/bw-2/SubscriptionManager/UnsubscribeRequest
int __ns18__Unsubscribe(
    struct _ns4__Unsubscribe*           ns4__Unsubscribe,	///< Request parameter
    struct _ns4__UnsubscribeResponse*   ns4__UnsubscribeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   NotificationProducerBinding                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns19__Subscribe                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns19__Subscribe" of service binding "NotificationProducerBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://docs.oasis-open.org/wsn/bw-2/NotificationProducer/SubscribeRequest"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns19__Subscribe(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns4__Subscribe*             ns4__Subscribe,
    // response parameters:
    struct _ns4__SubscribeResponse*     ns4__SubscribeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns19__Subscribe(
    struct soap *soap,
    // request parameters:
    struct _ns4__Subscribe*             ns4__Subscribe,
    // response parameters:
    struct _ns4__SubscribeResponse*     ns4__SubscribeResponse
  );
@endcode

*/

//gsoap ns19 service method-style:	Subscribe document
//gsoap ns19 service method-encoding:	Subscribe literal
//gsoap ns19 service method-action:	Subscribe http://docs.oasis-open.org/wsn/bw-2/NotificationProducer/SubscribeRequest
int __ns19__Subscribe(
    struct _ns4__Subscribe*             ns4__Subscribe,	///< Request parameter
    struct _ns4__SubscribeResponse*     ns4__SubscribeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns19__GetCurrentMessage                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns19__GetCurrentMessage" of service binding "NotificationProducerBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://docs.oasis-open.org/wsn/bw-2/NotificationProducer/GetCurrentMessageRequest"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns19__GetCurrentMessage(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns4__GetCurrentMessage*     ns4__GetCurrentMessage,
    // response parameters:
    struct _ns4__GetCurrentMessageResponse* ns4__GetCurrentMessageResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns19__GetCurrentMessage(
    struct soap *soap,
    // request parameters:
    struct _ns4__GetCurrentMessage*     ns4__GetCurrentMessage,
    // response parameters:
    struct _ns4__GetCurrentMessageResponse* ns4__GetCurrentMessageResponse
  );
@endcode

*/

//gsoap ns19 service method-style:	GetCurrentMessage document
//gsoap ns19 service method-encoding:	GetCurrentMessage literal
//gsoap ns19 service method-action:	GetCurrentMessage http://docs.oasis-open.org/wsn/bw-2/NotificationProducer/GetCurrentMessageRequest
int __ns19__GetCurrentMessage(
    struct _ns4__GetCurrentMessage*     ns4__GetCurrentMessage,	///< Request parameter
    struct _ns4__GetCurrentMessageResponse* ns4__GetCurrentMessageResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   MediaBinding                                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetVideoSources                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetVideoSources" of service binding "MediaBinding"

/**

Operation details:

This command lists all available physical video inputs of the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdlGetVideoSources/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetVideoSources(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetVideoSources*       ns2__GetVideoSources,
    // response parameters:
    struct _ns2__GetVideoSourcesResponse* ns2__GetVideoSourcesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetVideoSources(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetVideoSources*       ns2__GetVideoSources,
    // response parameters:
    struct _ns2__GetVideoSourcesResponse* ns2__GetVideoSourcesResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetVideoSources document
//gsoap ns2  service method-encoding:	GetVideoSources literal
//gsoap ns2  service method-action:	GetVideoSources http://www.onvif.org/ver10/media/wsdlGetVideoSources/
int __ns2__GetVideoSources(
    struct _ns2__GetVideoSources*       ns2__GetVideoSources,	///< Request parameter
    struct _ns2__GetVideoSourcesResponse* ns2__GetVideoSourcesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioSources                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioSources" of service binding "MediaBinding"

/**

Operation details:

This command lists all available physical audio inputs of the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioSources"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioSources(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioSources*       ns2__GetAudioSources,
    // response parameters:
    struct _ns2__GetAudioSourcesResponse* ns2__GetAudioSourcesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioSources(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioSources*       ns2__GetAudioSources,
    // response parameters:
    struct _ns2__GetAudioSourcesResponse* ns2__GetAudioSourcesResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioSources document
//gsoap ns2  service method-encoding:	GetAudioSources literal
//gsoap ns2  service method-action:	GetAudioSources http://www.onvif.org/ver10/media/wsdl/GetAudioSources
int __ns2__GetAudioSources(
    struct _ns2__GetAudioSources*       ns2__GetAudioSources,	///< Request parameter
    struct _ns2__GetAudioSourcesResponse* ns2__GetAudioSourcesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioOutputs                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioOutputs" of service binding "MediaBinding"

/**

Operation details:

This command lists all available physical audio outputs of the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioOutputs"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioOutputs(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioOutputs*       ns2__GetAudioOutputs,
    // response parameters:
    struct _ns2__GetAudioOutputsResponse* ns2__GetAudioOutputsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioOutputs(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioOutputs*       ns2__GetAudioOutputs,
    // response parameters:
    struct _ns2__GetAudioOutputsResponse* ns2__GetAudioOutputsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioOutputs document
//gsoap ns2  service method-encoding:	GetAudioOutputs literal
//gsoap ns2  service method-action:	GetAudioOutputs http://www.onvif.org/ver10/media/wsdl/GetAudioOutputs
int __ns2__GetAudioOutputs(
    struct _ns2__GetAudioOutputs*       ns2__GetAudioOutputs,	///< Request parameter
    struct _ns2__GetAudioOutputsResponse* ns2__GetAudioOutputsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__CreateProfile                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__CreateProfile" of service binding "MediaBinding"

/**

Operation details:

This operation creates a new empty media profile. The media profile shall be created
in the
NVT and shall be persistent (remain after reboot). A created profile shall be deletable
and an NVT shall set the fixed attribute to false in the
returned Profile.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/CreateProfile"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__CreateProfile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__CreateProfile*         ns2__CreateProfile,
    // response parameters:
    struct _ns2__CreateProfileResponse* ns2__CreateProfileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__CreateProfile(
    struct soap *soap,
    // request parameters:
    struct _ns2__CreateProfile*         ns2__CreateProfile,
    // response parameters:
    struct _ns2__CreateProfileResponse* ns2__CreateProfileResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	CreateProfile document
//gsoap ns2  service method-encoding:	CreateProfile literal
//gsoap ns2  service method-action:	CreateProfile http://www.onvif.org/ver10/media/wsdl/CreateProfile
int __ns2__CreateProfile(
    struct _ns2__CreateProfile*         ns2__CreateProfile,	///< Request parameter
    struct _ns2__CreateProfileResponse* ns2__CreateProfileResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetProfile                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetProfile" of service binding "MediaBinding"

/**

Operation details:

If the profile token is already known, a profile can be fetched through the GetProfile
command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdlGetProfile/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetProfile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetProfile*            ns2__GetProfile,
    // response parameters:
    struct _ns2__GetProfileResponse*    ns2__GetProfileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetProfile(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetProfile*            ns2__GetProfile,
    // response parameters:
    struct _ns2__GetProfileResponse*    ns2__GetProfileResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetProfile document
//gsoap ns2  service method-encoding:	GetProfile literal
//gsoap ns2  service method-action:	GetProfile http://www.onvif.org/ver10/media/wsdlGetProfile/
int __ns2__GetProfile(
    struct _ns2__GetProfile*            ns2__GetProfile,	///< Request parameter
    struct _ns2__GetProfileResponse*    ns2__GetProfileResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetProfiles                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetProfiles" of service binding "MediaBinding"

/**

Operation details:

Any endpoint can ask for the existing media profiles of an NVT using the GetProfiles
command. Pre-configured or dynamically configured profiles can be retrieved using
this
command. This command lists all configured profiles in a device. The client does
not need to
know the media profile in order to use the command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetProfiles"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetProfiles(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetProfiles*           ns2__GetProfiles,
    // response parameters:
    struct _ns2__GetProfilesResponse*   ns2__GetProfilesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetProfiles(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetProfiles*           ns2__GetProfiles,
    // response parameters:
    struct _ns2__GetProfilesResponse*   ns2__GetProfilesResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetProfiles document
//gsoap ns2  service method-encoding:	GetProfiles literal
//gsoap ns2  service method-action:	GetProfiles http://www.onvif.org/ver10/media/wsdl/GetProfiles
int __ns2__GetProfiles(
    struct _ns2__GetProfiles*           ns2__GetProfiles,	///< Request parameter
    struct _ns2__GetProfilesResponse*   ns2__GetProfilesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__AddVideoEncoderConfiguration                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__AddVideoEncoderConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation adds a VideoEncoderConfiguration to an existing media profile. If
a
configuration exists in the media profile, it will be replaced. The change shall
be persistent. Adding a VideoEncoderConfiguration to a Profile means that a stream
using that Profile will
contain video data. Video encoder configurations should be added after adding a
video source configuration.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/AddVideoEncoderConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__AddVideoEncoderConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__AddVideoEncoderConfiguration* ns2__AddVideoEncoderConfiguration,
    // response parameters:
    struct _ns2__AddVideoEncoderConfigurationResponse* ns2__AddVideoEncoderConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__AddVideoEncoderConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__AddVideoEncoderConfiguration* ns2__AddVideoEncoderConfiguration,
    // response parameters:
    struct _ns2__AddVideoEncoderConfigurationResponse* ns2__AddVideoEncoderConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	AddVideoEncoderConfiguration document
//gsoap ns2  service method-encoding:	AddVideoEncoderConfiguration literal
//gsoap ns2  service method-action:	AddVideoEncoderConfiguration http://www.onvif.org/ver10/media/wsdl/AddVideoEncoderConfiguration
int __ns2__AddVideoEncoderConfiguration(
    struct _ns2__AddVideoEncoderConfiguration* ns2__AddVideoEncoderConfiguration,	///< Request parameter
    struct _ns2__AddVideoEncoderConfigurationResponse* ns2__AddVideoEncoderConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__AddVideoSourceConfiguration                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__AddVideoSourceConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation adds a VideoSourceConfiguration to an existing media profile. If
such a
configuration exists in the media profile, it will be replaced. The change shall
be persistent.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/AddVideoSourceConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__AddVideoSourceConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__AddVideoSourceConfiguration* ns2__AddVideoSourceConfiguration,
    // response parameters:
    struct _ns2__AddVideoSourceConfigurationResponse* ns2__AddVideoSourceConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__AddVideoSourceConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__AddVideoSourceConfiguration* ns2__AddVideoSourceConfiguration,
    // response parameters:
    struct _ns2__AddVideoSourceConfigurationResponse* ns2__AddVideoSourceConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	AddVideoSourceConfiguration document
//gsoap ns2  service method-encoding:	AddVideoSourceConfiguration literal
//gsoap ns2  service method-action:	AddVideoSourceConfiguration http://www.onvif.org/ver10/media/wsdl/AddVideoSourceConfiguration
int __ns2__AddVideoSourceConfiguration(
    struct _ns2__AddVideoSourceConfiguration* ns2__AddVideoSourceConfiguration,	///< Request parameter
    struct _ns2__AddVideoSourceConfigurationResponse* ns2__AddVideoSourceConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__AddAudioEncoderConfiguration                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__AddAudioEncoderConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation adds an AudioEncoderConfiguration to an existing media profile. If
a configuration exists in the media profile, it will be replaced. The change shall
be persistent. Adding an AudioEncoderConfiguration to a media profile means that
streams using that media profile will contain audio data. Audio encoder configurations
should be added after adding an audio source configuration.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/AddAudioEncoderConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__AddAudioEncoderConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__AddAudioEncoderConfiguration* ns2__AddAudioEncoderConfiguration,
    // response parameters:
    struct _ns2__AddAudioEncoderConfigurationResponse* ns2__AddAudioEncoderConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__AddAudioEncoderConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__AddAudioEncoderConfiguration* ns2__AddAudioEncoderConfiguration,
    // response parameters:
    struct _ns2__AddAudioEncoderConfigurationResponse* ns2__AddAudioEncoderConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	AddAudioEncoderConfiguration document
//gsoap ns2  service method-encoding:	AddAudioEncoderConfiguration literal
//gsoap ns2  service method-action:	AddAudioEncoderConfiguration http://www.onvif.org/ver10/media/wsdl/AddAudioEncoderConfiguration
int __ns2__AddAudioEncoderConfiguration(
    struct _ns2__AddAudioEncoderConfiguration* ns2__AddAudioEncoderConfiguration,	///< Request parameter
    struct _ns2__AddAudioEncoderConfigurationResponse* ns2__AddAudioEncoderConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__AddAudioSourceConfiguration                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__AddAudioSourceConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation adds an AudioSourceConfiguration to an existing media profile. If
a
configuration exists in the media profile, it will be replaced. The change shall
be persistent.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/AddAudioSourceConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__AddAudioSourceConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__AddAudioSourceConfiguration* ns2__AddAudioSourceConfiguration,
    // response parameters:
    struct _ns2__AddAudioSourceConfigurationResponse* ns2__AddAudioSourceConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__AddAudioSourceConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__AddAudioSourceConfiguration* ns2__AddAudioSourceConfiguration,
    // response parameters:
    struct _ns2__AddAudioSourceConfigurationResponse* ns2__AddAudioSourceConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	AddAudioSourceConfiguration document
//gsoap ns2  service method-encoding:	AddAudioSourceConfiguration literal
//gsoap ns2  service method-action:	AddAudioSourceConfiguration http://www.onvif.org/ver10/media/wsdl/AddAudioSourceConfiguration
int __ns2__AddAudioSourceConfiguration(
    struct _ns2__AddAudioSourceConfiguration* ns2__AddAudioSourceConfiguration,	///< Request parameter
    struct _ns2__AddAudioSourceConfigurationResponse* ns2__AddAudioSourceConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__AddPTZConfiguration                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__AddPTZConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation adds a PTZConfiguration to an existing media profile. If a configuration
exists
in the media profile, it will be replaced. The change shall be persistent. Adding
a PTZConfiguration to a media profile means that streams using that media profile
can
contain PTZ status (in the metadata), and that the media profile can be used for
controlling
PTZ movement.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/AddPTZConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__AddPTZConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__AddPTZConfiguration*   ns2__AddPTZConfiguration,
    // response parameters:
    struct _ns2__AddPTZConfigurationResponse* ns2__AddPTZConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__AddPTZConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__AddPTZConfiguration*   ns2__AddPTZConfiguration,
    // response parameters:
    struct _ns2__AddPTZConfigurationResponse* ns2__AddPTZConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	AddPTZConfiguration document
//gsoap ns2  service method-encoding:	AddPTZConfiguration literal
//gsoap ns2  service method-action:	AddPTZConfiguration http://www.onvif.org/ver10/media/wsdl/AddPTZConfiguration
int __ns2__AddPTZConfiguration(
    struct _ns2__AddPTZConfiguration*   ns2__AddPTZConfiguration,	///< Request parameter
    struct _ns2__AddPTZConfigurationResponse* ns2__AddPTZConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__AddVideoAnalyticsConfiguration                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__AddVideoAnalyticsConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation adds a VideoAnalytics configuration to an existing media profile.
If a
configuration exists in the media profile, it will be replaced. The change shall
be persistent. Adding a VideoAnalyticsConfiguration to a media profile means that
streams using that media
profile can contain video analytics data (in the metadata) as defined by the submitted
configuration reference. A profile containing only a video analytics configuration
but no video source configuration is incomplete. Therefore, a client should first
add a video source configuration to a profile before adding a video analytics configuration.
The NVT can deny adding of a video analytics
configuration before a video source configuration.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/AddVideoAnalyticsConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__AddVideoAnalyticsConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__AddVideoAnalyticsConfiguration* ns2__AddVideoAnalyticsConfiguration,
    // response parameters:
    struct _ns2__AddVideoAnalyticsConfigurationResponse* ns2__AddVideoAnalyticsConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__AddVideoAnalyticsConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__AddVideoAnalyticsConfiguration* ns2__AddVideoAnalyticsConfiguration,
    // response parameters:
    struct _ns2__AddVideoAnalyticsConfigurationResponse* ns2__AddVideoAnalyticsConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	AddVideoAnalyticsConfiguration document
//gsoap ns2  service method-encoding:	AddVideoAnalyticsConfiguration literal
//gsoap ns2  service method-action:	AddVideoAnalyticsConfiguration http://www.onvif.org/ver10/media/wsdl/AddVideoAnalyticsConfiguration
int __ns2__AddVideoAnalyticsConfiguration(
    struct _ns2__AddVideoAnalyticsConfiguration* ns2__AddVideoAnalyticsConfiguration,	///< Request parameter
    struct _ns2__AddVideoAnalyticsConfigurationResponse* ns2__AddVideoAnalyticsConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__AddMetadataConfiguration                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__AddMetadataConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation adds a Metadata configuration to an existing media profile. If a
configuration exists in the media profile, it will be replaced. The change shall
be persistent. Adding a MetadataConfiguration to a Profile means that streams using
that profile contain metadata. Metadata can consist of events, PTZ status, and/or
video analytics data.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/AddMetadataConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__AddMetadataConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__AddMetadataConfiguration* ns2__AddMetadataConfiguration,
    // response parameters:
    struct _ns2__AddMetadataConfigurationResponse* ns2__AddMetadataConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__AddMetadataConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__AddMetadataConfiguration* ns2__AddMetadataConfiguration,
    // response parameters:
    struct _ns2__AddMetadataConfigurationResponse* ns2__AddMetadataConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	AddMetadataConfiguration document
//gsoap ns2  service method-encoding:	AddMetadataConfiguration literal
//gsoap ns2  service method-action:	AddMetadataConfiguration http://www.onvif.org/ver10/media/wsdl/AddMetadataConfiguration
int __ns2__AddMetadataConfiguration(
    struct _ns2__AddMetadataConfiguration* ns2__AddMetadataConfiguration,	///< Request parameter
    struct _ns2__AddMetadataConfigurationResponse* ns2__AddMetadataConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__AddAudioOutputConfiguration                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__AddAudioOutputConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation adds an AudioOutputConfiguration to an existing media profile. If
a configuration exists in the media profile, it will be replaced. The change shall
be persistent.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/AddAudioOutputConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__AddAudioOutputConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__AddAudioOutputConfiguration* ns2__AddAudioOutputConfiguration,
    // response parameters:
    struct _ns2__AddAudioOutputConfigurationResponse* ns2__AddAudioOutputConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__AddAudioOutputConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__AddAudioOutputConfiguration* ns2__AddAudioOutputConfiguration,
    // response parameters:
    struct _ns2__AddAudioOutputConfigurationResponse* ns2__AddAudioOutputConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	AddAudioOutputConfiguration document
//gsoap ns2  service method-encoding:	AddAudioOutputConfiguration literal
//gsoap ns2  service method-action:	AddAudioOutputConfiguration http://www.onvif.org/ver10/media/wsdl/AddAudioOutputConfiguration
int __ns2__AddAudioOutputConfiguration(
    struct _ns2__AddAudioOutputConfiguration* ns2__AddAudioOutputConfiguration,	///< Request parameter
    struct _ns2__AddAudioOutputConfigurationResponse* ns2__AddAudioOutputConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__AddAudioDecoderConfiguration                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__AddAudioDecoderConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation adds an AudioDecoderConfiguration to an existing media profile. If
a configuration exists in the media profile, it shall be replaced. The change shall
be persistent.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/AddAudioDecoderConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__AddAudioDecoderConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__AddAudioDecoderConfiguration* ns2__AddAudioDecoderConfiguration,
    // response parameters:
    struct _ns2__AddAudioDecoderConfigurationResponse* ns2__AddAudioDecoderConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__AddAudioDecoderConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__AddAudioDecoderConfiguration* ns2__AddAudioDecoderConfiguration,
    // response parameters:
    struct _ns2__AddAudioDecoderConfigurationResponse* ns2__AddAudioDecoderConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	AddAudioDecoderConfiguration document
//gsoap ns2  service method-encoding:	AddAudioDecoderConfiguration literal
//gsoap ns2  service method-action:	AddAudioDecoderConfiguration http://www.onvif.org/ver10/media/wsdl/AddAudioDecoderConfiguration
int __ns2__AddAudioDecoderConfiguration(
    struct _ns2__AddAudioDecoderConfiguration* ns2__AddAudioDecoderConfiguration,	///< Request parameter
    struct _ns2__AddAudioDecoderConfigurationResponse* ns2__AddAudioDecoderConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__RemoveVideoEncoderConfiguration                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__RemoveVideoEncoderConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation removes a VideoEncoderConfiguration from an existing media profile.
If the
media profile does not contain a VideoEncoderConfiguration, the operation has no
effect. The removal shall be persistent.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/RemoveVideoEncoderConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__RemoveVideoEncoderConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__RemoveVideoEncoderConfiguration* ns2__RemoveVideoEncoderConfiguration,
    // response parameters:
    struct _ns2__RemoveVideoEncoderConfigurationResponse* ns2__RemoveVideoEncoderConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__RemoveVideoEncoderConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__RemoveVideoEncoderConfiguration* ns2__RemoveVideoEncoderConfiguration,
    // response parameters:
    struct _ns2__RemoveVideoEncoderConfigurationResponse* ns2__RemoveVideoEncoderConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	RemoveVideoEncoderConfiguration document
//gsoap ns2  service method-encoding:	RemoveVideoEncoderConfiguration literal
//gsoap ns2  service method-action:	RemoveVideoEncoderConfiguration http://www.onvif.org/ver10/media/wsdl/RemoveVideoEncoderConfiguration
int __ns2__RemoveVideoEncoderConfiguration(
    struct _ns2__RemoveVideoEncoderConfiguration* ns2__RemoveVideoEncoderConfiguration,	///< Request parameter
    struct _ns2__RemoveVideoEncoderConfigurationResponse* ns2__RemoveVideoEncoderConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__RemoveVideoSourceConfiguration                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__RemoveVideoSourceConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation removes a VideoSourceConfiguration from an existing media profile.
If the
media profile does not contain a VideoSourceConfiguration, the operation has no
effect. The removal shall be persistent. Video source configurations should only
be removed after removing a
VideoEncoderConfiguration from the media profile.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/RemoveVideoSourceConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__RemoveVideoSourceConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__RemoveVideoSourceConfiguration* ns2__RemoveVideoSourceConfiguration,
    // response parameters:
    struct _ns2__RemoveVideoSourceConfigurationResponse* ns2__RemoveVideoSourceConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__RemoveVideoSourceConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__RemoveVideoSourceConfiguration* ns2__RemoveVideoSourceConfiguration,
    // response parameters:
    struct _ns2__RemoveVideoSourceConfigurationResponse* ns2__RemoveVideoSourceConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	RemoveVideoSourceConfiguration document
//gsoap ns2  service method-encoding:	RemoveVideoSourceConfiguration literal
//gsoap ns2  service method-action:	RemoveVideoSourceConfiguration http://www.onvif.org/ver10/media/wsdl/RemoveVideoSourceConfiguration
int __ns2__RemoveVideoSourceConfiguration(
    struct _ns2__RemoveVideoSourceConfiguration* ns2__RemoveVideoSourceConfiguration,	///< Request parameter
    struct _ns2__RemoveVideoSourceConfigurationResponse* ns2__RemoveVideoSourceConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__RemoveAudioEncoderConfiguration                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__RemoveAudioEncoderConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation removes an AudioEncoderConfiguration from an existing media profile.
If the
media profile does not contain an AudioEncoderConfiguration, the operation has
no effect.
The removal shall be persistent.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/RemoveAudioEncoderConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__RemoveAudioEncoderConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__RemoveAudioEncoderConfiguration* ns2__RemoveAudioEncoderConfiguration,
    // response parameters:
    struct _ns2__RemoveAudioEncoderConfigurationResponse* ns2__RemoveAudioEncoderConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__RemoveAudioEncoderConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__RemoveAudioEncoderConfiguration* ns2__RemoveAudioEncoderConfiguration,
    // response parameters:
    struct _ns2__RemoveAudioEncoderConfigurationResponse* ns2__RemoveAudioEncoderConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	RemoveAudioEncoderConfiguration document
//gsoap ns2  service method-encoding:	RemoveAudioEncoderConfiguration literal
//gsoap ns2  service method-action:	RemoveAudioEncoderConfiguration http://www.onvif.org/ver10/media/wsdl/RemoveAudioEncoderConfiguration
int __ns2__RemoveAudioEncoderConfiguration(
    struct _ns2__RemoveAudioEncoderConfiguration* ns2__RemoveAudioEncoderConfiguration,	///< Request parameter
    struct _ns2__RemoveAudioEncoderConfigurationResponse* ns2__RemoveAudioEncoderConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__RemoveAudioSourceConfiguration                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__RemoveAudioSourceConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation removes an AudioSourceConfiguration from an existing media profile.
If the
media profile does not contain an AudioSourceConfiguration, the operation has no
effect. The
removal shall be persistent. Audio source configurations should only be removed
after removing an
AudioEncoderConfiguration from the media profile.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/RemoveAudioSourceConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__RemoveAudioSourceConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__RemoveAudioSourceConfiguration* ns2__RemoveAudioSourceConfiguration,
    // response parameters:
    struct _ns2__RemoveAudioSourceConfigurationResponse* ns2__RemoveAudioSourceConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__RemoveAudioSourceConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__RemoveAudioSourceConfiguration* ns2__RemoveAudioSourceConfiguration,
    // response parameters:
    struct _ns2__RemoveAudioSourceConfigurationResponse* ns2__RemoveAudioSourceConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	RemoveAudioSourceConfiguration document
//gsoap ns2  service method-encoding:	RemoveAudioSourceConfiguration literal
//gsoap ns2  service method-action:	RemoveAudioSourceConfiguration http://www.onvif.org/ver10/media/wsdl/RemoveAudioSourceConfiguration
int __ns2__RemoveAudioSourceConfiguration(
    struct _ns2__RemoveAudioSourceConfiguration* ns2__RemoveAudioSourceConfiguration,	///< Request parameter
    struct _ns2__RemoveAudioSourceConfigurationResponse* ns2__RemoveAudioSourceConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__RemovePTZConfiguration                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__RemovePTZConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation removes a PTZConfiguration from an existing media profile. If the
media profile
does not contain a PTZConfiguration, the operation has no effect. The removal shall
be persistent.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/RemovePTZConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__RemovePTZConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__RemovePTZConfiguration* ns2__RemovePTZConfiguration,
    // response parameters:
    struct _ns2__RemovePTZConfigurationResponse* ns2__RemovePTZConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__RemovePTZConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__RemovePTZConfiguration* ns2__RemovePTZConfiguration,
    // response parameters:
    struct _ns2__RemovePTZConfigurationResponse* ns2__RemovePTZConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	RemovePTZConfiguration document
//gsoap ns2  service method-encoding:	RemovePTZConfiguration literal
//gsoap ns2  service method-action:	RemovePTZConfiguration http://www.onvif.org/ver10/media/wsdl/RemovePTZConfiguration
int __ns2__RemovePTZConfiguration(
    struct _ns2__RemovePTZConfiguration* ns2__RemovePTZConfiguration,	///< Request parameter
    struct _ns2__RemovePTZConfigurationResponse* ns2__RemovePTZConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__RemoveVideoAnalyticsConfiguration                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__RemoveVideoAnalyticsConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation removes a VideoAnalyticsConfiguration from an existing media profile.
If the media profile does not contain a VideoAnalyticsConfiguration, the operation
has no effect.
The removal shall be persistent.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/RemoveVideoAnalyticsConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__RemoveVideoAnalyticsConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__RemoveVideoAnalyticsConfiguration* ns2__RemoveVideoAnalyticsConfiguration,
    // response parameters:
    struct _ns2__RemoveVideoAnalyticsConfigurationResponse* ns2__RemoveVideoAnalyticsConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__RemoveVideoAnalyticsConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__RemoveVideoAnalyticsConfiguration* ns2__RemoveVideoAnalyticsConfiguration,
    // response parameters:
    struct _ns2__RemoveVideoAnalyticsConfigurationResponse* ns2__RemoveVideoAnalyticsConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	RemoveVideoAnalyticsConfiguration document
//gsoap ns2  service method-encoding:	RemoveVideoAnalyticsConfiguration literal
//gsoap ns2  service method-action:	RemoveVideoAnalyticsConfiguration http://www.onvif.org/ver10/media/wsdl/RemoveVideoAnalyticsConfiguration
int __ns2__RemoveVideoAnalyticsConfiguration(
    struct _ns2__RemoveVideoAnalyticsConfiguration* ns2__RemoveVideoAnalyticsConfiguration,	///< Request parameter
    struct _ns2__RemoveVideoAnalyticsConfigurationResponse* ns2__RemoveVideoAnalyticsConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__RemoveMetadataConfiguration                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__RemoveMetadataConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation removes a MetadataConfiguration from an existing media profile. If
the media profile does not contain a MetadataConfiguration, the operation has no
effect. The removal shall be persistent.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/RemoveMetadataConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__RemoveMetadataConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__RemoveMetadataConfiguration* ns2__RemoveMetadataConfiguration,
    // response parameters:
    struct _ns2__RemoveMetadataConfigurationResponse* ns2__RemoveMetadataConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__RemoveMetadataConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__RemoveMetadataConfiguration* ns2__RemoveMetadataConfiguration,
    // response parameters:
    struct _ns2__RemoveMetadataConfigurationResponse* ns2__RemoveMetadataConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	RemoveMetadataConfiguration document
//gsoap ns2  service method-encoding:	RemoveMetadataConfiguration literal
//gsoap ns2  service method-action:	RemoveMetadataConfiguration http://www.onvif.org/ver10/media/wsdl/RemoveMetadataConfiguration
int __ns2__RemoveMetadataConfiguration(
    struct _ns2__RemoveMetadataConfiguration* ns2__RemoveMetadataConfiguration,	///< Request parameter
    struct _ns2__RemoveMetadataConfigurationResponse* ns2__RemoveMetadataConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__RemoveAudioOutputConfiguration                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__RemoveAudioOutputConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation removes an AudioOutputConfiguration from an existing media profile.
If the media profile does not contain an AudioOutputConfiguration, the operation
has no effect. The removal shall be persistent.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/RemoveAudioOutputConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__RemoveAudioOutputConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__RemoveAudioOutputConfiguration* ns2__RemoveAudioOutputConfiguration,
    // response parameters:
    struct _ns2__RemoveAudioOutputConfigurationResponse* ns2__RemoveAudioOutputConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__RemoveAudioOutputConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__RemoveAudioOutputConfiguration* ns2__RemoveAudioOutputConfiguration,
    // response parameters:
    struct _ns2__RemoveAudioOutputConfigurationResponse* ns2__RemoveAudioOutputConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	RemoveAudioOutputConfiguration document
//gsoap ns2  service method-encoding:	RemoveAudioOutputConfiguration literal
//gsoap ns2  service method-action:	RemoveAudioOutputConfiguration http://www.onvif.org/ver10/media/wsdl/RemoveAudioOutputConfiguration
int __ns2__RemoveAudioOutputConfiguration(
    struct _ns2__RemoveAudioOutputConfiguration* ns2__RemoveAudioOutputConfiguration,	///< Request parameter
    struct _ns2__RemoveAudioOutputConfigurationResponse* ns2__RemoveAudioOutputConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__RemoveAudioDecoderConfiguration                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__RemoveAudioDecoderConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation removes an AudioDecoderConfiguration from an existing media profile.
If the media profile does not contain an AudioDecoderConfiguration, the operation
has no effect. The removal shall be persistent.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/RemoveAudioDecoderConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__RemoveAudioDecoderConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__RemoveAudioDecoderConfiguration* ns2__RemoveAudioDecoderConfiguration,
    // response parameters:
    struct _ns2__RemoveAudioDecoderConfigurationResponse* ns2__RemoveAudioDecoderConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__RemoveAudioDecoderConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__RemoveAudioDecoderConfiguration* ns2__RemoveAudioDecoderConfiguration,
    // response parameters:
    struct _ns2__RemoveAudioDecoderConfigurationResponse* ns2__RemoveAudioDecoderConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	RemoveAudioDecoderConfiguration document
//gsoap ns2  service method-encoding:	RemoveAudioDecoderConfiguration literal
//gsoap ns2  service method-action:	RemoveAudioDecoderConfiguration http://www.onvif.org/ver10/media/wsdl/RemoveAudioDecoderConfiguration
int __ns2__RemoveAudioDecoderConfiguration(
    struct _ns2__RemoveAudioDecoderConfiguration* ns2__RemoveAudioDecoderConfiguration,	///< Request parameter
    struct _ns2__RemoveAudioDecoderConfigurationResponse* ns2__RemoveAudioDecoderConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__DeleteProfile                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__DeleteProfile" of service binding "MediaBinding"

/**

Operation details:

This operation deletes a profile. This change shall always be persistent. Deletion
of a profile is only possible for non-fixed profiles

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/DeleteProfile"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__DeleteProfile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__DeleteProfile*         ns2__DeleteProfile,
    // response parameters:
    struct _ns2__DeleteProfileResponse* ns2__DeleteProfileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__DeleteProfile(
    struct soap *soap,
    // request parameters:
    struct _ns2__DeleteProfile*         ns2__DeleteProfile,
    // response parameters:
    struct _ns2__DeleteProfileResponse* ns2__DeleteProfileResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	DeleteProfile document
//gsoap ns2  service method-encoding:	DeleteProfile literal
//gsoap ns2  service method-action:	DeleteProfile http://www.onvif.org/ver10/media/wsdl/DeleteProfile
int __ns2__DeleteProfile(
    struct _ns2__DeleteProfile*         ns2__DeleteProfile,	///< Request parameter
    struct _ns2__DeleteProfileResponse* ns2__DeleteProfileResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetVideoSourceConfigurations                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetVideoSourceConfigurations" of service binding "MediaBinding"

/**

Operation details:

This operation lists all existing video source configurations for an NVT. The client
need not know anything about the video source configurations in order to use the
command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetVideoSourceConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetVideoSourceConfigurations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetVideoSourceConfigurations* ns2__GetVideoSourceConfigurations,
    // response parameters:
    struct _ns2__GetVideoSourceConfigurationsResponse* ns2__GetVideoSourceConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetVideoSourceConfigurations(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetVideoSourceConfigurations* ns2__GetVideoSourceConfigurations,
    // response parameters:
    struct _ns2__GetVideoSourceConfigurationsResponse* ns2__GetVideoSourceConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetVideoSourceConfigurations document
//gsoap ns2  service method-encoding:	GetVideoSourceConfigurations literal
//gsoap ns2  service method-action:	GetVideoSourceConfigurations http://www.onvif.org/ver10/media/wsdl/GetVideoSourceConfigurations
int __ns2__GetVideoSourceConfigurations(
    struct _ns2__GetVideoSourceConfigurations* ns2__GetVideoSourceConfigurations,	///< Request parameter
    struct _ns2__GetVideoSourceConfigurationsResponse* ns2__GetVideoSourceConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetVideoEncoderConfigurations                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetVideoEncoderConfigurations" of service binding "MediaBinding"

/**

Operation details:

This operation lists all existing video encoder configurations of an NVT. This command
lists all configured video encoder configurations in a device. The client need
not know anything apriori about the video encoder configurations in order to use
the command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetVideoEncoderConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetVideoEncoderConfigurations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetVideoEncoderConfigurations* ns2__GetVideoEncoderConfigurations,
    // response parameters:
    struct _ns2__GetVideoEncoderConfigurationsResponse* ns2__GetVideoEncoderConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetVideoEncoderConfigurations(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetVideoEncoderConfigurations* ns2__GetVideoEncoderConfigurations,
    // response parameters:
    struct _ns2__GetVideoEncoderConfigurationsResponse* ns2__GetVideoEncoderConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetVideoEncoderConfigurations document
//gsoap ns2  service method-encoding:	GetVideoEncoderConfigurations literal
//gsoap ns2  service method-action:	GetVideoEncoderConfigurations http://www.onvif.org/ver10/media/wsdl/GetVideoEncoderConfigurations
int __ns2__GetVideoEncoderConfigurations(
    struct _ns2__GetVideoEncoderConfigurations* ns2__GetVideoEncoderConfigurations,	///< Request parameter
    struct _ns2__GetVideoEncoderConfigurationsResponse* ns2__GetVideoEncoderConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioSourceConfigurations                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioSourceConfigurations" of service binding "MediaBinding"

/**

Operation details:

This operation lists all existing audio source configurations of an NVT. This command
lists all audio source configurations in a device. The client need not know anything
apriori about the audio source configurations in order to use the command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdlGetAudioSourceConfigurations/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioSourceConfigurations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioSourceConfigurations* ns2__GetAudioSourceConfigurations,
    // response parameters:
    struct _ns2__GetAudioSourceConfigurationsResponse* ns2__GetAudioSourceConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioSourceConfigurations(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioSourceConfigurations* ns2__GetAudioSourceConfigurations,
    // response parameters:
    struct _ns2__GetAudioSourceConfigurationsResponse* ns2__GetAudioSourceConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioSourceConfigurations document
//gsoap ns2  service method-encoding:	GetAudioSourceConfigurations literal
//gsoap ns2  service method-action:	GetAudioSourceConfigurations http://www.onvif.org/ver10/media/wsdlGetAudioSourceConfigurations/
int __ns2__GetAudioSourceConfigurations(
    struct _ns2__GetAudioSourceConfigurations* ns2__GetAudioSourceConfigurations,	///< Request parameter
    struct _ns2__GetAudioSourceConfigurationsResponse* ns2__GetAudioSourceConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioEncoderConfigurations                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioEncoderConfigurations" of service binding "MediaBinding"

/**

Operation details:

This operation lists all existing device audio encoder configurations. The client
need not know anything apriori about the audio encoder configurations in order
to use the command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioEncoderConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioEncoderConfigurations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioEncoderConfigurations* ns2__GetAudioEncoderConfigurations,
    // response parameters:
    struct _ns2__GetAudioEncoderConfigurationsResponse* ns2__GetAudioEncoderConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioEncoderConfigurations(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioEncoderConfigurations* ns2__GetAudioEncoderConfigurations,
    // response parameters:
    struct _ns2__GetAudioEncoderConfigurationsResponse* ns2__GetAudioEncoderConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioEncoderConfigurations document
//gsoap ns2  service method-encoding:	GetAudioEncoderConfigurations literal
//gsoap ns2  service method-action:	GetAudioEncoderConfigurations http://www.onvif.org/ver10/media/wsdl/GetAudioEncoderConfigurations
int __ns2__GetAudioEncoderConfigurations(
    struct _ns2__GetAudioEncoderConfigurations* ns2__GetAudioEncoderConfigurations,	///< Request parameter
    struct _ns2__GetAudioEncoderConfigurationsResponse* ns2__GetAudioEncoderConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetVideoAnalyticsConfigurations                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetVideoAnalyticsConfigurations" of service binding "MediaBinding"

/**

Operation details:

This operation lists all video analytics configurations of a device. This command
lists all configured video analytics in a device. The client need not know anything
apriori about the video analytics in order to use the command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetVideoAnalyticsConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetVideoAnalyticsConfigurations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetVideoAnalyticsConfigurations* ns2__GetVideoAnalyticsConfigurations,
    // response parameters:
    struct _ns2__GetVideoAnalyticsConfigurationsResponse* ns2__GetVideoAnalyticsConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetVideoAnalyticsConfigurations(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetVideoAnalyticsConfigurations* ns2__GetVideoAnalyticsConfigurations,
    // response parameters:
    struct _ns2__GetVideoAnalyticsConfigurationsResponse* ns2__GetVideoAnalyticsConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetVideoAnalyticsConfigurations document
//gsoap ns2  service method-encoding:	GetVideoAnalyticsConfigurations literal
//gsoap ns2  service method-action:	GetVideoAnalyticsConfigurations http://www.onvif.org/ver10/media/wsdl/GetVideoAnalyticsConfigurations
int __ns2__GetVideoAnalyticsConfigurations(
    struct _ns2__GetVideoAnalyticsConfigurations* ns2__GetVideoAnalyticsConfigurations,	///< Request parameter
    struct _ns2__GetVideoAnalyticsConfigurationsResponse* ns2__GetVideoAnalyticsConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetMetadataConfigurations                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetMetadataConfigurations" of service binding "MediaBinding"

/**

Operation details:

This operation lists all existing metadata configurations. The client need not know
anything apriori about the metadata in order to use the command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetMetadataConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetMetadataConfigurations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetMetadataConfigurations* ns2__GetMetadataConfigurations,
    // response parameters:
    struct _ns2__GetMetadataConfigurationsResponse* ns2__GetMetadataConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetMetadataConfigurations(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetMetadataConfigurations* ns2__GetMetadataConfigurations,
    // response parameters:
    struct _ns2__GetMetadataConfigurationsResponse* ns2__GetMetadataConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetMetadataConfigurations document
//gsoap ns2  service method-encoding:	GetMetadataConfigurations literal
//gsoap ns2  service method-action:	GetMetadataConfigurations http://www.onvif.org/ver10/media/wsdl/GetMetadataConfigurations
int __ns2__GetMetadataConfigurations(
    struct _ns2__GetMetadataConfigurations* ns2__GetMetadataConfigurations,	///< Request parameter
    struct _ns2__GetMetadataConfigurationsResponse* ns2__GetMetadataConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioOutputConfigurations                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioOutputConfigurations" of service binding "MediaBinding"

/**

Operation details:

This command lists all existing AudioOutputConfigurations of a device. The NVC need
not know anything apriori about the audio configurations to use this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioOutputConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioOutputConfigurations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioOutputConfigurations* ns2__GetAudioOutputConfigurations,
    // response parameters:
    struct _ns2__GetAudioOutputConfigurationsResponse* ns2__GetAudioOutputConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioOutputConfigurations(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioOutputConfigurations* ns2__GetAudioOutputConfigurations,
    // response parameters:
    struct _ns2__GetAudioOutputConfigurationsResponse* ns2__GetAudioOutputConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioOutputConfigurations document
//gsoap ns2  service method-encoding:	GetAudioOutputConfigurations literal
//gsoap ns2  service method-action:	GetAudioOutputConfigurations http://www.onvif.org/ver10/media/wsdl/GetAudioOutputConfigurations
int __ns2__GetAudioOutputConfigurations(
    struct _ns2__GetAudioOutputConfigurations* ns2__GetAudioOutputConfigurations,	///< Request parameter
    struct _ns2__GetAudioOutputConfigurationsResponse* ns2__GetAudioOutputConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioDecoderConfigurations                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioDecoderConfigurations" of service binding "MediaBinding"

/**

Operation details:

This command lists all existing AudioDecoderConfigurations of a device. The NVC
need not know anything apriori about the audio decoder configurations in order
to
use this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioDecoderConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioDecoderConfigurations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioDecoderConfigurations* ns2__GetAudioDecoderConfigurations,
    // response parameters:
    struct _ns2__GetAudioDecoderConfigurationsResponse* ns2__GetAudioDecoderConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioDecoderConfigurations(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioDecoderConfigurations* ns2__GetAudioDecoderConfigurations,
    // response parameters:
    struct _ns2__GetAudioDecoderConfigurationsResponse* ns2__GetAudioDecoderConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioDecoderConfigurations document
//gsoap ns2  service method-encoding:	GetAudioDecoderConfigurations literal
//gsoap ns2  service method-action:	GetAudioDecoderConfigurations http://www.onvif.org/ver10/media/wsdl/GetAudioDecoderConfigurations
int __ns2__GetAudioDecoderConfigurations(
    struct _ns2__GetAudioDecoderConfigurations* ns2__GetAudioDecoderConfigurations,	///< Request parameter
    struct _ns2__GetAudioDecoderConfigurationsResponse* ns2__GetAudioDecoderConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetVideoSourceConfiguration                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetVideoSourceConfiguration" of service binding "MediaBinding"

/**

Operation details:

If the video source configuration token is already known, the video source configuration
can be fetched through the GetVideoSourceConfiguration command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetVideoSourceConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetVideoSourceConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetVideoSourceConfiguration* ns2__GetVideoSourceConfiguration,
    // response parameters:
    struct _ns2__GetVideoSourceConfigurationResponse* ns2__GetVideoSourceConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetVideoSourceConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetVideoSourceConfiguration* ns2__GetVideoSourceConfiguration,
    // response parameters:
    struct _ns2__GetVideoSourceConfigurationResponse* ns2__GetVideoSourceConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetVideoSourceConfiguration document
//gsoap ns2  service method-encoding:	GetVideoSourceConfiguration literal
//gsoap ns2  service method-action:	GetVideoSourceConfiguration http://www.onvif.org/ver10/media/wsdl/GetVideoSourceConfiguration
int __ns2__GetVideoSourceConfiguration(
    struct _ns2__GetVideoSourceConfiguration* ns2__GetVideoSourceConfiguration,	///< Request parameter
    struct _ns2__GetVideoSourceConfigurationResponse* ns2__GetVideoSourceConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetVideoEncoderConfiguration                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetVideoEncoderConfiguration" of service binding "MediaBinding"

/**

Operation details:

If the video encoder configuration token is already known, the encoder configuration
can be fetched through the GetVideoEncoderConfiguration command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetVideoEncoderConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetVideoEncoderConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetVideoEncoderConfiguration* ns2__GetVideoEncoderConfiguration,
    // response parameters:
    struct _ns2__GetVideoEncoderConfigurationResponse* ns2__GetVideoEncoderConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetVideoEncoderConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetVideoEncoderConfiguration* ns2__GetVideoEncoderConfiguration,
    // response parameters:
    struct _ns2__GetVideoEncoderConfigurationResponse* ns2__GetVideoEncoderConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetVideoEncoderConfiguration document
//gsoap ns2  service method-encoding:	GetVideoEncoderConfiguration literal
//gsoap ns2  service method-action:	GetVideoEncoderConfiguration http://www.onvif.org/ver10/media/wsdl/GetVideoEncoderConfiguration
int __ns2__GetVideoEncoderConfiguration(
    struct _ns2__GetVideoEncoderConfiguration* ns2__GetVideoEncoderConfiguration,	///< Request parameter
    struct _ns2__GetVideoEncoderConfigurationResponse* ns2__GetVideoEncoderConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioSourceConfiguration                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioSourceConfiguration" of service binding "MediaBinding"

/**

Operation details:

The GetAudioSourceConfiguration command fetches the audio source configurations
if the audio source configuration token is already known. An

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioSourceConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioSourceConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioSourceConfiguration* ns2__GetAudioSourceConfiguration,
    // response parameters:
    struct _ns2__GetAudioSourceConfigurationResponse* ns2__GetAudioSourceConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioSourceConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioSourceConfiguration* ns2__GetAudioSourceConfiguration,
    // response parameters:
    struct _ns2__GetAudioSourceConfigurationResponse* ns2__GetAudioSourceConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioSourceConfiguration document
//gsoap ns2  service method-encoding:	GetAudioSourceConfiguration literal
//gsoap ns2  service method-action:	GetAudioSourceConfiguration http://www.onvif.org/ver10/media/wsdl/GetAudioSourceConfiguration
int __ns2__GetAudioSourceConfiguration(
    struct _ns2__GetAudioSourceConfiguration* ns2__GetAudioSourceConfiguration,	///< Request parameter
    struct _ns2__GetAudioSourceConfigurationResponse* ns2__GetAudioSourceConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioEncoderConfiguration                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioEncoderConfiguration" of service binding "MediaBinding"

/**

Operation details:

The GetAudioEncoderConfiguration command fetches the encoder configuration if the
audio encoder configuration token is known.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioEncoderConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioEncoderConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioEncoderConfiguration* ns2__GetAudioEncoderConfiguration,
    // response parameters:
    struct _ns2__GetAudioEncoderConfigurationResponse* ns2__GetAudioEncoderConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioEncoderConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioEncoderConfiguration* ns2__GetAudioEncoderConfiguration,
    // response parameters:
    struct _ns2__GetAudioEncoderConfigurationResponse* ns2__GetAudioEncoderConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioEncoderConfiguration document
//gsoap ns2  service method-encoding:	GetAudioEncoderConfiguration literal
//gsoap ns2  service method-action:	GetAudioEncoderConfiguration http://www.onvif.org/ver10/media/wsdl/GetAudioEncoderConfiguration
int __ns2__GetAudioEncoderConfiguration(
    struct _ns2__GetAudioEncoderConfiguration* ns2__GetAudioEncoderConfiguration,	///< Request parameter
    struct _ns2__GetAudioEncoderConfigurationResponse* ns2__GetAudioEncoderConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetVideoAnalyticsConfiguration                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetVideoAnalyticsConfiguration" of service binding "MediaBinding"

/**

Operation details:

The GetVideoAnalyticsConfiguration command fetches the video analytics configuration
if the video analytics token is known.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetVideoAnalyticsConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetVideoAnalyticsConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetVideoAnalyticsConfiguration* ns2__GetVideoAnalyticsConfiguration,
    // response parameters:
    struct _ns2__GetVideoAnalyticsConfigurationResponse* ns2__GetVideoAnalyticsConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetVideoAnalyticsConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetVideoAnalyticsConfiguration* ns2__GetVideoAnalyticsConfiguration,
    // response parameters:
    struct _ns2__GetVideoAnalyticsConfigurationResponse* ns2__GetVideoAnalyticsConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetVideoAnalyticsConfiguration document
//gsoap ns2  service method-encoding:	GetVideoAnalyticsConfiguration literal
//gsoap ns2  service method-action:	GetVideoAnalyticsConfiguration http://www.onvif.org/ver10/media/wsdl/GetVideoAnalyticsConfiguration
int __ns2__GetVideoAnalyticsConfiguration(
    struct _ns2__GetVideoAnalyticsConfiguration* ns2__GetVideoAnalyticsConfiguration,	///< Request parameter
    struct _ns2__GetVideoAnalyticsConfigurationResponse* ns2__GetVideoAnalyticsConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetMetadataConfiguration                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetMetadataConfiguration" of service binding "MediaBinding"

/**

Operation details:

The GetMetadataConfiguration command fetches the metadata configuration if the metadata
token is known.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetMetadataConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetMetadataConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetMetadataConfiguration* ns2__GetMetadataConfiguration,
    // response parameters:
    struct _ns2__GetMetadataConfigurationResponse* ns2__GetMetadataConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetMetadataConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetMetadataConfiguration* ns2__GetMetadataConfiguration,
    // response parameters:
    struct _ns2__GetMetadataConfigurationResponse* ns2__GetMetadataConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetMetadataConfiguration document
//gsoap ns2  service method-encoding:	GetMetadataConfiguration literal
//gsoap ns2  service method-action:	GetMetadataConfiguration http://www.onvif.org/ver10/media/wsdl/GetMetadataConfiguration
int __ns2__GetMetadataConfiguration(
    struct _ns2__GetMetadataConfiguration* ns2__GetMetadataConfiguration,	///< Request parameter
    struct _ns2__GetMetadataConfigurationResponse* ns2__GetMetadataConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioOutputConfiguration                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioOutputConfiguration" of service binding "MediaBinding"

/**

Operation details:

If the audio output configuration token is already known, the output configuration
can be fetched through the GetAudioOutputConfiguration command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioOutputConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioOutputConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioOutputConfiguration* ns2__GetAudioOutputConfiguration,
    // response parameters:
    struct _ns2__GetAudioOutputConfigurationResponse* ns2__GetAudioOutputConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioOutputConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioOutputConfiguration* ns2__GetAudioOutputConfiguration,
    // response parameters:
    struct _ns2__GetAudioOutputConfigurationResponse* ns2__GetAudioOutputConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioOutputConfiguration document
//gsoap ns2  service method-encoding:	GetAudioOutputConfiguration literal
//gsoap ns2  service method-action:	GetAudioOutputConfiguration http://www.onvif.org/ver10/media/wsdl/GetAudioOutputConfiguration
int __ns2__GetAudioOutputConfiguration(
    struct _ns2__GetAudioOutputConfiguration* ns2__GetAudioOutputConfiguration,	///< Request parameter
    struct _ns2__GetAudioOutputConfigurationResponse* ns2__GetAudioOutputConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioDecoderConfiguration                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioDecoderConfiguration" of service binding "MediaBinding"

/**

Operation details:

If the audio decoder configuration token is already known, the decoder configuration
can be fetched through the GetAudioDecoderConfiguration command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioDecoderConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioDecoderConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioDecoderConfiguration* ns2__GetAudioDecoderConfiguration,
    // response parameters:
    struct _ns2__GetAudioDecoderConfigurationResponse* ns2__GetAudioDecoderConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioDecoderConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioDecoderConfiguration* ns2__GetAudioDecoderConfiguration,
    // response parameters:
    struct _ns2__GetAudioDecoderConfigurationResponse* ns2__GetAudioDecoderConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioDecoderConfiguration document
//gsoap ns2  service method-encoding:	GetAudioDecoderConfiguration literal
//gsoap ns2  service method-action:	GetAudioDecoderConfiguration http://www.onvif.org/ver10/media/wsdl/GetAudioDecoderConfiguration
int __ns2__GetAudioDecoderConfiguration(
    struct _ns2__GetAudioDecoderConfiguration* ns2__GetAudioDecoderConfiguration,	///< Request parameter
    struct _ns2__GetAudioDecoderConfigurationResponse* ns2__GetAudioDecoderConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetCompatibleVideoEncoderConfigurations                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetCompatibleVideoEncoderConfigurations" of service binding "MediaBinding"

/**

Operation details:

This operation lists all the video encoder configurations of the NVT that are compatible
with a certain media profile. Each of the returned configurations shall be a valid
input parameter for the AddVideoEncoderConfiguration command on the media profile.
The result will vary depending on the capabilities, configurations and settings
in the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetCompatibleVideoEncoderConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetCompatibleVideoEncoderConfigurations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetCompatibleVideoEncoderConfigurations* ns2__GetCompatibleVideoEncoderConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleVideoEncoderConfigurationsResponse* ns2__GetCompatibleVideoEncoderConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetCompatibleVideoEncoderConfigurations(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetCompatibleVideoEncoderConfigurations* ns2__GetCompatibleVideoEncoderConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleVideoEncoderConfigurationsResponse* ns2__GetCompatibleVideoEncoderConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetCompatibleVideoEncoderConfigurations document
//gsoap ns2  service method-encoding:	GetCompatibleVideoEncoderConfigurations literal
//gsoap ns2  service method-action:	GetCompatibleVideoEncoderConfigurations http://www.onvif.org/ver10/media/wsdl/GetCompatibleVideoEncoderConfigurations
int __ns2__GetCompatibleVideoEncoderConfigurations(
    struct _ns2__GetCompatibleVideoEncoderConfigurations* ns2__GetCompatibleVideoEncoderConfigurations,	///< Request parameter
    struct _ns2__GetCompatibleVideoEncoderConfigurationsResponse* ns2__GetCompatibleVideoEncoderConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetCompatibleVideoSourceConfigurations                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetCompatibleVideoSourceConfigurations" of service binding "MediaBinding"

/**

Operation details:

This operation requests all the video source configurations of the NVT that are
compatible
with a certain media profile. Each of the returned configurations shall be a valid
input
parameter for the AddVideoSourceConfiguration command on the media profile. The
result
will vary depending on the capabilities, configurations and settings in the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetCompatibleVideoSourceConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetCompatibleVideoSourceConfigurations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetCompatibleVideoSourceConfigurations* ns2__GetCompatibleVideoSourceConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleVideoSourceConfigurationsResponse* ns2__GetCompatibleVideoSourceConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetCompatibleVideoSourceConfigurations(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetCompatibleVideoSourceConfigurations* ns2__GetCompatibleVideoSourceConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleVideoSourceConfigurationsResponse* ns2__GetCompatibleVideoSourceConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetCompatibleVideoSourceConfigurations document
//gsoap ns2  service method-encoding:	GetCompatibleVideoSourceConfigurations literal
//gsoap ns2  service method-action:	GetCompatibleVideoSourceConfigurations http://www.onvif.org/ver10/media/wsdl/GetCompatibleVideoSourceConfigurations
int __ns2__GetCompatibleVideoSourceConfigurations(
    struct _ns2__GetCompatibleVideoSourceConfigurations* ns2__GetCompatibleVideoSourceConfigurations,	///< Request parameter
    struct _ns2__GetCompatibleVideoSourceConfigurationsResponse* ns2__GetCompatibleVideoSourceConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetCompatibleAudioEncoderConfigurations                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetCompatibleAudioEncoderConfigurations" of service binding "MediaBinding"

/**

Operation details:

This operation requests all audio encoder configurations of a device that are compatible
with a certain media profile. Each of the returned configurations shall be a valid
input parameter for the AddAudioSourceConfiguration command on the media profile.
The result varies depending on the capabilities, configurations and settings in
the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetCompatibleAudioEncoderConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetCompatibleAudioEncoderConfigurations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetCompatibleAudioEncoderConfigurations* ns2__GetCompatibleAudioEncoderConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleAudioEncoderConfigurationsResponse* ns2__GetCompatibleAudioEncoderConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetCompatibleAudioEncoderConfigurations(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetCompatibleAudioEncoderConfigurations* ns2__GetCompatibleAudioEncoderConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleAudioEncoderConfigurationsResponse* ns2__GetCompatibleAudioEncoderConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetCompatibleAudioEncoderConfigurations document
//gsoap ns2  service method-encoding:	GetCompatibleAudioEncoderConfigurations literal
//gsoap ns2  service method-action:	GetCompatibleAudioEncoderConfigurations http://www.onvif.org/ver10/media/wsdl/GetCompatibleAudioEncoderConfigurations
int __ns2__GetCompatibleAudioEncoderConfigurations(
    struct _ns2__GetCompatibleAudioEncoderConfigurations* ns2__GetCompatibleAudioEncoderConfigurations,	///< Request parameter
    struct _ns2__GetCompatibleAudioEncoderConfigurationsResponse* ns2__GetCompatibleAudioEncoderConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetCompatibleAudioSourceConfigurations                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetCompatibleAudioSourceConfigurations" of service binding "MediaBinding"

/**

Operation details:

This operation requests all audio source configurations of the NVT that are compatible
with a certain media profile. Each of the returned configurations shall be a valid
input parameter for the AddAudioEncoderConfiguration command on the media profile.
The result varies depending on the capabilities, configurations and settings in
the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetCompatibleAudioSourceConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetCompatibleAudioSourceConfigurations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetCompatibleAudioSourceConfigurations* ns2__GetCompatibleAudioSourceConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleAudioSourceConfigurationsResponse* ns2__GetCompatibleAudioSourceConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetCompatibleAudioSourceConfigurations(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetCompatibleAudioSourceConfigurations* ns2__GetCompatibleAudioSourceConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleAudioSourceConfigurationsResponse* ns2__GetCompatibleAudioSourceConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetCompatibleAudioSourceConfigurations document
//gsoap ns2  service method-encoding:	GetCompatibleAudioSourceConfigurations literal
//gsoap ns2  service method-action:	GetCompatibleAudioSourceConfigurations http://www.onvif.org/ver10/media/wsdl/GetCompatibleAudioSourceConfigurations
int __ns2__GetCompatibleAudioSourceConfigurations(
    struct _ns2__GetCompatibleAudioSourceConfigurations* ns2__GetCompatibleAudioSourceConfigurations,	///< Request parameter
    struct _ns2__GetCompatibleAudioSourceConfigurationsResponse* ns2__GetCompatibleAudioSourceConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetCompatibleVideoAnalyticsConfigurations                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetCompatibleVideoAnalyticsConfigurations" of service binding "MediaBinding"

/**

Operation details:

This operation requests all video analytic configurations of the device that are
compatible with a certain media profile. Each of the returned configurations shall
be a valid input parameter for the AddVideoAnalyticsConfiguration command on the
media profile. The result varies depending on the capabilities, configurations
and settings in the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetCompatibleVideoAnalyticsConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetCompatibleVideoAnalyticsConfigurations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetCompatibleVideoAnalyticsConfigurations* ns2__GetCompatibleVideoAnalyticsConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleVideoAnalyticsConfigurationsResponse* ns2__GetCompatibleVideoAnalyticsConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetCompatibleVideoAnalyticsConfigurations(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetCompatibleVideoAnalyticsConfigurations* ns2__GetCompatibleVideoAnalyticsConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleVideoAnalyticsConfigurationsResponse* ns2__GetCompatibleVideoAnalyticsConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetCompatibleVideoAnalyticsConfigurations document
//gsoap ns2  service method-encoding:	GetCompatibleVideoAnalyticsConfigurations literal
//gsoap ns2  service method-action:	GetCompatibleVideoAnalyticsConfigurations http://www.onvif.org/ver10/media/wsdl/GetCompatibleVideoAnalyticsConfigurations
int __ns2__GetCompatibleVideoAnalyticsConfigurations(
    struct _ns2__GetCompatibleVideoAnalyticsConfigurations* ns2__GetCompatibleVideoAnalyticsConfigurations,	///< Request parameter
    struct _ns2__GetCompatibleVideoAnalyticsConfigurationsResponse* ns2__GetCompatibleVideoAnalyticsConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetCompatibleMetadataConfigurations                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetCompatibleMetadataConfigurations" of service binding "MediaBinding"

/**

Operation details:

This operation requests all the metadata configurations of the device that are compatible
with a certain media profile. Each of the returned configurations shall be a valid
input parameter for the AddMetadataConfiguration command on the media profile.
The result varies depending on the capabilities, configurations and settings in
the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetCompatibleMetadataConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetCompatibleMetadataConfigurations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetCompatibleMetadataConfigurations* ns2__GetCompatibleMetadataConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleMetadataConfigurationsResponse* ns2__GetCompatibleMetadataConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetCompatibleMetadataConfigurations(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetCompatibleMetadataConfigurations* ns2__GetCompatibleMetadataConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleMetadataConfigurationsResponse* ns2__GetCompatibleMetadataConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetCompatibleMetadataConfigurations document
//gsoap ns2  service method-encoding:	GetCompatibleMetadataConfigurations literal
//gsoap ns2  service method-action:	GetCompatibleMetadataConfigurations http://www.onvif.org/ver10/media/wsdl/GetCompatibleMetadataConfigurations
int __ns2__GetCompatibleMetadataConfigurations(
    struct _ns2__GetCompatibleMetadataConfigurations* ns2__GetCompatibleMetadataConfigurations,	///< Request parameter
    struct _ns2__GetCompatibleMetadataConfigurationsResponse* ns2__GetCompatibleMetadataConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetCompatibleAudioOutputConfigurations                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetCompatibleAudioOutputConfigurations" of service binding "MediaBinding"

/**

Operation details:

This command lists all audio output configurations of a device that are compatible
with a certain media profile. Each returned configuration shall be a valid input
for the 
AddAudioOutputConfiguration command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetCompatibleAudioOutputConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetCompatibleAudioOutputConfigurations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetCompatibleAudioOutputConfigurations* ns2__GetCompatibleAudioOutputConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleAudioOutputConfigurationsResponse* ns2__GetCompatibleAudioOutputConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetCompatibleAudioOutputConfigurations(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetCompatibleAudioOutputConfigurations* ns2__GetCompatibleAudioOutputConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleAudioOutputConfigurationsResponse* ns2__GetCompatibleAudioOutputConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetCompatibleAudioOutputConfigurations document
//gsoap ns2  service method-encoding:	GetCompatibleAudioOutputConfigurations literal
//gsoap ns2  service method-action:	GetCompatibleAudioOutputConfigurations http://www.onvif.org/ver10/media/wsdl/GetCompatibleAudioOutputConfigurations
int __ns2__GetCompatibleAudioOutputConfigurations(
    struct _ns2__GetCompatibleAudioOutputConfigurations* ns2__GetCompatibleAudioOutputConfigurations,	///< Request parameter
    struct _ns2__GetCompatibleAudioOutputConfigurationsResponse* ns2__GetCompatibleAudioOutputConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetCompatibleAudioDecoderConfigurations                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetCompatibleAudioDecoderConfigurations" of service binding "MediaBinding"

/**

Operation details:

This operation lists all the audio decoder configurations of the device that are
compatible with a certain media profile. Each of the returned configurations shall
be a valid input parameter for the AddAudioDecoderConfiguration command on the
media profile.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetCompatibleAudioDecoderConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetCompatibleAudioDecoderConfigurations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetCompatibleAudioDecoderConfigurations* ns2__GetCompatibleAudioDecoderConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleAudioDecoderConfigurationsResponse* ns2__GetCompatibleAudioDecoderConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetCompatibleAudioDecoderConfigurations(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetCompatibleAudioDecoderConfigurations* ns2__GetCompatibleAudioDecoderConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleAudioDecoderConfigurationsResponse* ns2__GetCompatibleAudioDecoderConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetCompatibleAudioDecoderConfigurations document
//gsoap ns2  service method-encoding:	GetCompatibleAudioDecoderConfigurations literal
//gsoap ns2  service method-action:	GetCompatibleAudioDecoderConfigurations http://www.onvif.org/ver10/media/wsdl/GetCompatibleAudioDecoderConfigurations
int __ns2__GetCompatibleAudioDecoderConfigurations(
    struct _ns2__GetCompatibleAudioDecoderConfigurations* ns2__GetCompatibleAudioDecoderConfigurations,	///< Request parameter
    struct _ns2__GetCompatibleAudioDecoderConfigurationsResponse* ns2__GetCompatibleAudioDecoderConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__SetVideoSourceConfiguration                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__SetVideoSourceConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation modifies a video source configuration. The ForcePersistence flag
indicates if the changes shall remain after reboot of the NVT. Running streams
using this configuration may be immediately updated according to the new settings.
The changes are not guaranteed to take effect unless the client requests a new
stream URI and restarts any affected stream. NVC methods for changing a running
stream are out of scope for this specification.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/SetVideoSourceConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__SetVideoSourceConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__SetVideoSourceConfiguration* ns2__SetVideoSourceConfiguration,
    // response parameters:
    struct _ns2__SetVideoSourceConfigurationResponse* ns2__SetVideoSourceConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__SetVideoSourceConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__SetVideoSourceConfiguration* ns2__SetVideoSourceConfiguration,
    // response parameters:
    struct _ns2__SetVideoSourceConfigurationResponse* ns2__SetVideoSourceConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	SetVideoSourceConfiguration document
//gsoap ns2  service method-encoding:	SetVideoSourceConfiguration literal
//gsoap ns2  service method-action:	SetVideoSourceConfiguration http://www.onvif.org/ver10/media/wsdl/SetVideoSourceConfiguration
int __ns2__SetVideoSourceConfiguration(
    struct _ns2__SetVideoSourceConfiguration* ns2__SetVideoSourceConfiguration,	///< Request parameter
    struct _ns2__SetVideoSourceConfigurationResponse* ns2__SetVideoSourceConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__SetVideoEncoderConfiguration                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__SetVideoEncoderConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation modifies a video encoder configuration. The ForcePersistence flag
indicates if the changes shall remain after reboot of the NVT. Changes in the Multicast
settings shall always be persistent. Running streams using this configuration may
be immediately updated according to the new settings. The changes are not guaranteed
to take effect unless the client requests a new stream URI and restarts any affected
stream. NVC methods for changing a running stream are out of scope for this specification.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/SetVideoEncoderConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__SetVideoEncoderConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__SetVideoEncoderConfiguration* ns2__SetVideoEncoderConfiguration,
    // response parameters:
    struct _ns2__SetVideoEncoderConfigurationResponse* ns2__SetVideoEncoderConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__SetVideoEncoderConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__SetVideoEncoderConfiguration* ns2__SetVideoEncoderConfiguration,
    // response parameters:
    struct _ns2__SetVideoEncoderConfigurationResponse* ns2__SetVideoEncoderConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	SetVideoEncoderConfiguration document
//gsoap ns2  service method-encoding:	SetVideoEncoderConfiguration literal
//gsoap ns2  service method-action:	SetVideoEncoderConfiguration http://www.onvif.org/ver10/media/wsdl/SetVideoEncoderConfiguration
int __ns2__SetVideoEncoderConfiguration(
    struct _ns2__SetVideoEncoderConfiguration* ns2__SetVideoEncoderConfiguration,	///< Request parameter
    struct _ns2__SetVideoEncoderConfigurationResponse* ns2__SetVideoEncoderConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__SetAudioSourceConfiguration                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__SetAudioSourceConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation modifies an audio source configuration. The ForcePersistence flag
indicates if
the changes shall remain after reboot of the NVT. Running streams using this configuration
may be immediately updated according to the new settings. The changes are not guaranteed
to take effect unless the client requests a new stream URI and restarts any affected
stream
NVC methods for changing a running stream are out of scope for this specification.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/SetAudioSourceConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__SetAudioSourceConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__SetAudioSourceConfiguration* ns2__SetAudioSourceConfiguration,
    // response parameters:
    struct _ns2__SetAudioSourceConfigurationResponse* ns2__SetAudioSourceConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__SetAudioSourceConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__SetAudioSourceConfiguration* ns2__SetAudioSourceConfiguration,
    // response parameters:
    struct _ns2__SetAudioSourceConfigurationResponse* ns2__SetAudioSourceConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	SetAudioSourceConfiguration document
//gsoap ns2  service method-encoding:	SetAudioSourceConfiguration literal
//gsoap ns2  service method-action:	SetAudioSourceConfiguration http://www.onvif.org/ver10/media/wsdl/SetAudioSourceConfiguration
int __ns2__SetAudioSourceConfiguration(
    struct _ns2__SetAudioSourceConfiguration* ns2__SetAudioSourceConfiguration,	///< Request parameter
    struct _ns2__SetAudioSourceConfigurationResponse* ns2__SetAudioSourceConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__SetAudioEncoderConfiguration                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__SetAudioEncoderConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation modifies an audio encoder configuration. The ForcePersistence flag
indicates if
the changes shall remain after reboot of the NVT. Running streams using this configuration
may be immediately updated
according to the new settings. The changes are not guaranteed to take effect unless
the client
requests a new stream URI and restarts any affected streams. NVC methods for changing
a
running stream are out of scope for this specification.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/SetAudioEncoderConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__SetAudioEncoderConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__SetAudioEncoderConfiguration* ns2__SetAudioEncoderConfiguration,
    // response parameters:
    struct _ns2__SetAudioEncoderConfigurationResponse* ns2__SetAudioEncoderConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__SetAudioEncoderConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__SetAudioEncoderConfiguration* ns2__SetAudioEncoderConfiguration,
    // response parameters:
    struct _ns2__SetAudioEncoderConfigurationResponse* ns2__SetAudioEncoderConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	SetAudioEncoderConfiguration document
//gsoap ns2  service method-encoding:	SetAudioEncoderConfiguration literal
//gsoap ns2  service method-action:	SetAudioEncoderConfiguration http://www.onvif.org/ver10/media/wsdl/SetAudioEncoderConfiguration
int __ns2__SetAudioEncoderConfiguration(
    struct _ns2__SetAudioEncoderConfiguration* ns2__SetAudioEncoderConfiguration,	///< Request parameter
    struct _ns2__SetAudioEncoderConfigurationResponse* ns2__SetAudioEncoderConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__SetVideoAnalyticsConfiguration                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__SetVideoAnalyticsConfiguration" of service binding "MediaBinding"

/**

Operation details:

A video analytics configuration is modified using this command. The ForcePersistence
flag
indicates if the changes shall remain after reboot of the device or not. Running
streams using
this configuration shall be immediately updated according to the new settings.
Otherwise
inconsistencies can occur between the scene description processed by the rule engine
and
the notifications produced by analytics engine and rule engine which reference
the very same
video analytics configuration token.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/SetVideoAnalyticsConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__SetVideoAnalyticsConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__SetVideoAnalyticsConfiguration* ns2__SetVideoAnalyticsConfiguration,
    // response parameters:
    struct _ns2__SetVideoAnalyticsConfigurationResponse* ns2__SetVideoAnalyticsConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__SetVideoAnalyticsConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__SetVideoAnalyticsConfiguration* ns2__SetVideoAnalyticsConfiguration,
    // response parameters:
    struct _ns2__SetVideoAnalyticsConfigurationResponse* ns2__SetVideoAnalyticsConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	SetVideoAnalyticsConfiguration document
//gsoap ns2  service method-encoding:	SetVideoAnalyticsConfiguration literal
//gsoap ns2  service method-action:	SetVideoAnalyticsConfiguration http://www.onvif.org/ver10/media/wsdl/SetVideoAnalyticsConfiguration
int __ns2__SetVideoAnalyticsConfiguration(
    struct _ns2__SetVideoAnalyticsConfiguration* ns2__SetVideoAnalyticsConfiguration,	///< Request parameter
    struct _ns2__SetVideoAnalyticsConfigurationResponse* ns2__SetVideoAnalyticsConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__SetMetadataConfiguration                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__SetMetadataConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation modifies a metadata configuration. The ForcePersistence flag indicates
if the
changes shall remain after reboot of the device. Changes in the Multicast settings
shall
always be persistent. Running streams using this configuration may be updated immediately
according to the new settings. The changes are not guaranteed to take effect unless
the client
requests a new stream URI and restarts any affected streams. NVC methods for changing
a
running stream are out of scope for this specification.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/SetMetadataConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__SetMetadataConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__SetMetadataConfiguration* ns2__SetMetadataConfiguration,
    // response parameters:
    struct _ns2__SetMetadataConfigurationResponse* ns2__SetMetadataConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__SetMetadataConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__SetMetadataConfiguration* ns2__SetMetadataConfiguration,
    // response parameters:
    struct _ns2__SetMetadataConfigurationResponse* ns2__SetMetadataConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	SetMetadataConfiguration document
//gsoap ns2  service method-encoding:	SetMetadataConfiguration literal
//gsoap ns2  service method-action:	SetMetadataConfiguration http://www.onvif.org/ver10/media/wsdl/SetMetadataConfiguration
int __ns2__SetMetadataConfiguration(
    struct _ns2__SetMetadataConfiguration* ns2__SetMetadataConfiguration,	///< Request parameter
    struct _ns2__SetMetadataConfigurationResponse* ns2__SetMetadataConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__SetAudioOutputConfiguration                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__SetAudioOutputConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation modifies an audio output configuration. The ForcePersistence flag
indicates if
the changes shall remain after reboot of the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/SetAudioOutputConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__SetAudioOutputConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__SetAudioOutputConfiguration* ns2__SetAudioOutputConfiguration,
    // response parameters:
    struct _ns2__SetAudioOutputConfigurationResponse* ns2__SetAudioOutputConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__SetAudioOutputConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__SetAudioOutputConfiguration* ns2__SetAudioOutputConfiguration,
    // response parameters:
    struct _ns2__SetAudioOutputConfigurationResponse* ns2__SetAudioOutputConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	SetAudioOutputConfiguration document
//gsoap ns2  service method-encoding:	SetAudioOutputConfiguration literal
//gsoap ns2  service method-action:	SetAudioOutputConfiguration http://www.onvif.org/ver10/media/wsdl/SetAudioOutputConfiguration
int __ns2__SetAudioOutputConfiguration(
    struct _ns2__SetAudioOutputConfiguration* ns2__SetAudioOutputConfiguration,	///< Request parameter
    struct _ns2__SetAudioOutputConfigurationResponse* ns2__SetAudioOutputConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__SetAudioDecoderConfiguration                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__SetAudioDecoderConfiguration" of service binding "MediaBinding"

/**

Operation details:

This operation modifies an audio decoder configuration. The ForcePersistence flag
indicates if
the changes shall remain after reboot of the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/SetAudioDecoderConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__SetAudioDecoderConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__SetAudioDecoderConfiguration* ns2__SetAudioDecoderConfiguration,
    // response parameters:
    struct _ns2__SetAudioDecoderConfigurationResponse* ns2__SetAudioDecoderConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__SetAudioDecoderConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns2__SetAudioDecoderConfiguration* ns2__SetAudioDecoderConfiguration,
    // response parameters:
    struct _ns2__SetAudioDecoderConfigurationResponse* ns2__SetAudioDecoderConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	SetAudioDecoderConfiguration document
//gsoap ns2  service method-encoding:	SetAudioDecoderConfiguration literal
//gsoap ns2  service method-action:	SetAudioDecoderConfiguration http://www.onvif.org/ver10/media/wsdl/SetAudioDecoderConfiguration
int __ns2__SetAudioDecoderConfiguration(
    struct _ns2__SetAudioDecoderConfiguration* ns2__SetAudioDecoderConfiguration,	///< Request parameter
    struct _ns2__SetAudioDecoderConfigurationResponse* ns2__SetAudioDecoderConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetVideoSourceConfigurationOptions                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetVideoSourceConfigurationOptions" of service binding "MediaBinding"

/**

Operation details:

This operation returns the available options  (supported values and ranges for video
source configuration parameters) when the video source parameters are
reconfigured If a video source configuration is specified, the options shall concern
that
particular configuration. If a media profile is specified, the options shall be
compatible with
that media profile.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdlGetVideoSourceConfigurationOptions/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetVideoSourceConfigurationOptions(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetVideoSourceConfigurationOptions* ns2__GetVideoSourceConfigurationOptions,
    // response parameters:
    struct _ns2__GetVideoSourceConfigurationOptionsResponse* ns2__GetVideoSourceConfigurationOptionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetVideoSourceConfigurationOptions(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetVideoSourceConfigurationOptions* ns2__GetVideoSourceConfigurationOptions,
    // response parameters:
    struct _ns2__GetVideoSourceConfigurationOptionsResponse* ns2__GetVideoSourceConfigurationOptionsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetVideoSourceConfigurationOptions document
//gsoap ns2  service method-encoding:	GetVideoSourceConfigurationOptions literal
//gsoap ns2  service method-action:	GetVideoSourceConfigurationOptions http://www.onvif.org/ver10/media/wsdlGetVideoSourceConfigurationOptions/
int __ns2__GetVideoSourceConfigurationOptions(
    struct _ns2__GetVideoSourceConfigurationOptions* ns2__GetVideoSourceConfigurationOptions,	///< Request parameter
    struct _ns2__GetVideoSourceConfigurationOptionsResponse* ns2__GetVideoSourceConfigurationOptionsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetVideoEncoderConfigurationOptions                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetVideoEncoderConfigurationOptions" of service binding "MediaBinding"

/**

Operation details:

This operation returns the available options (supported values and ranges for video
encoder 
				configuration parameters) when the video encoder
parameters are reconfigured. Devices prior to ONVIF 2.0 will
				only return the base encoder settings while devices
from 2.0 onwards will respond with both base and extension settings.<br/>
				This response contains the available video encoder
configuration options. If a video encoder configuration is specified, 
				the options shall concern that particular configuration.
If a media profile is specified, the options shall be 
				compatible with that media profile. If no tokens
are specified, the options shall be considered generic for the device.
			

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetVideoEncoderConfigurationOptions"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetVideoEncoderConfigurationOptions(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetVideoEncoderConfigurationOptions* ns2__GetVideoEncoderConfigurationOptions,
    // response parameters:
    struct _ns2__GetVideoEncoderConfigurationOptionsResponse* ns2__GetVideoEncoderConfigurationOptionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetVideoEncoderConfigurationOptions(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetVideoEncoderConfigurationOptions* ns2__GetVideoEncoderConfigurationOptions,
    // response parameters:
    struct _ns2__GetVideoEncoderConfigurationOptionsResponse* ns2__GetVideoEncoderConfigurationOptionsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetVideoEncoderConfigurationOptions document
//gsoap ns2  service method-encoding:	GetVideoEncoderConfigurationOptions literal
//gsoap ns2  service method-action:	GetVideoEncoderConfigurationOptions http://www.onvif.org/ver10/media/wsdl/GetVideoEncoderConfigurationOptions
int __ns2__GetVideoEncoderConfigurationOptions(
    struct _ns2__GetVideoEncoderConfigurationOptions* ns2__GetVideoEncoderConfigurationOptions,	///< Request parameter
    struct _ns2__GetVideoEncoderConfigurationOptionsResponse* ns2__GetVideoEncoderConfigurationOptionsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioSourceConfigurationOptions                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioSourceConfigurationOptions" of service binding "MediaBinding"

/**

Operation details:

This operation returns the available options (supported values and ranges for audio
source configuration parameters) when the audio source parameters are
reconfigured. If an audio source configuration is specified, the options shall
concern that
particular configuration. If a media profile is specified, the options shall be
compatible with
that media profile.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioSourceConfigurationOptions"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioSourceConfigurationOptions(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioSourceConfigurationOptions* ns2__GetAudioSourceConfigurationOptions,
    // response parameters:
    struct _ns2__GetAudioSourceConfigurationOptionsResponse* ns2__GetAudioSourceConfigurationOptionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioSourceConfigurationOptions(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioSourceConfigurationOptions* ns2__GetAudioSourceConfigurationOptions,
    // response parameters:
    struct _ns2__GetAudioSourceConfigurationOptionsResponse* ns2__GetAudioSourceConfigurationOptionsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioSourceConfigurationOptions document
//gsoap ns2  service method-encoding:	GetAudioSourceConfigurationOptions literal
//gsoap ns2  service method-action:	GetAudioSourceConfigurationOptions http://www.onvif.org/ver10/media/wsdl/GetAudioSourceConfigurationOptions
int __ns2__GetAudioSourceConfigurationOptions(
    struct _ns2__GetAudioSourceConfigurationOptions* ns2__GetAudioSourceConfigurationOptions,	///< Request parameter
    struct _ns2__GetAudioSourceConfigurationOptionsResponse* ns2__GetAudioSourceConfigurationOptionsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioEncoderConfigurationOptions                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioEncoderConfigurationOptions" of service binding "MediaBinding"

/**

Operation details:

This operation returns the available options  (supported values and ranges for audio
encoder configuration parameters) when the audio encoder parameters are
reconfigured.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioEncoderConfigurationOptions"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioEncoderConfigurationOptions(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioEncoderConfigurationOptions* ns2__GetAudioEncoderConfigurationOptions,
    // response parameters:
    struct _ns2__GetAudioEncoderConfigurationOptionsResponse* ns2__GetAudioEncoderConfigurationOptionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioEncoderConfigurationOptions(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioEncoderConfigurationOptions* ns2__GetAudioEncoderConfigurationOptions,
    // response parameters:
    struct _ns2__GetAudioEncoderConfigurationOptionsResponse* ns2__GetAudioEncoderConfigurationOptionsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioEncoderConfigurationOptions document
//gsoap ns2  service method-encoding:	GetAudioEncoderConfigurationOptions literal
//gsoap ns2  service method-action:	GetAudioEncoderConfigurationOptions http://www.onvif.org/ver10/media/wsdl/GetAudioEncoderConfigurationOptions
int __ns2__GetAudioEncoderConfigurationOptions(
    struct _ns2__GetAudioEncoderConfigurationOptions* ns2__GetAudioEncoderConfigurationOptions,	///< Request parameter
    struct _ns2__GetAudioEncoderConfigurationOptionsResponse* ns2__GetAudioEncoderConfigurationOptionsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetMetadataConfigurationOptions                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetMetadataConfigurationOptions" of service binding "MediaBinding"

/**

Operation details:

This operation returns the available options (supported values and ranges for metadata
configuration parameters) for changing the metadata configuration.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetMetadataConfigurationOptions"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetMetadataConfigurationOptions(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetMetadataConfigurationOptions* ns2__GetMetadataConfigurationOptions,
    // response parameters:
    struct _ns2__GetMetadataConfigurationOptionsResponse* ns2__GetMetadataConfigurationOptionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetMetadataConfigurationOptions(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetMetadataConfigurationOptions* ns2__GetMetadataConfigurationOptions,
    // response parameters:
    struct _ns2__GetMetadataConfigurationOptionsResponse* ns2__GetMetadataConfigurationOptionsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetMetadataConfigurationOptions document
//gsoap ns2  service method-encoding:	GetMetadataConfigurationOptions literal
//gsoap ns2  service method-action:	GetMetadataConfigurationOptions http://www.onvif.org/ver10/media/wsdl/GetMetadataConfigurationOptions
int __ns2__GetMetadataConfigurationOptions(
    struct _ns2__GetMetadataConfigurationOptions* ns2__GetMetadataConfigurationOptions,	///< Request parameter
    struct _ns2__GetMetadataConfigurationOptionsResponse* ns2__GetMetadataConfigurationOptionsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioOutputConfigurationOptions                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioOutputConfigurationOptions" of service binding "MediaBinding"

/**

Operation details:

This operation returns the available options (supported values and ranges for audio
output configuration parameters) for configuring an audio output.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioOutputConfigurationOptions"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioOutputConfigurationOptions(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioOutputConfigurationOptions* ns2__GetAudioOutputConfigurationOptions,
    // response parameters:
    struct _ns2__GetAudioOutputConfigurationOptionsResponse* ns2__GetAudioOutputConfigurationOptionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioOutputConfigurationOptions(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioOutputConfigurationOptions* ns2__GetAudioOutputConfigurationOptions,
    // response parameters:
    struct _ns2__GetAudioOutputConfigurationOptionsResponse* ns2__GetAudioOutputConfigurationOptionsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioOutputConfigurationOptions document
//gsoap ns2  service method-encoding:	GetAudioOutputConfigurationOptions literal
//gsoap ns2  service method-action:	GetAudioOutputConfigurationOptions http://www.onvif.org/ver10/media/wsdl/GetAudioOutputConfigurationOptions
int __ns2__GetAudioOutputConfigurationOptions(
    struct _ns2__GetAudioOutputConfigurationOptions* ns2__GetAudioOutputConfigurationOptions,	///< Request parameter
    struct _ns2__GetAudioOutputConfigurationOptionsResponse* ns2__GetAudioOutputConfigurationOptionsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioDecoderConfigurationOptions                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioDecoderConfigurationOptions" of service binding "MediaBinding"

/**

Operation details:

This command list the audio decoding capabilities for a given profile and configuration
of a
device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioDecoderConfigurationOptions"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioDecoderConfigurationOptions(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioDecoderConfigurationOptions* ns2__GetAudioDecoderConfigurationOptions,
    // response parameters:
    struct _ns2__GetAudioDecoderConfigurationOptionsResponse* ns2__GetAudioDecoderConfigurationOptionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioDecoderConfigurationOptions(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioDecoderConfigurationOptions* ns2__GetAudioDecoderConfigurationOptions,
    // response parameters:
    struct _ns2__GetAudioDecoderConfigurationOptionsResponse* ns2__GetAudioDecoderConfigurationOptionsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioDecoderConfigurationOptions document
//gsoap ns2  service method-encoding:	GetAudioDecoderConfigurationOptions literal
//gsoap ns2  service method-action:	GetAudioDecoderConfigurationOptions http://www.onvif.org/ver10/media/wsdl/GetAudioDecoderConfigurationOptions
int __ns2__GetAudioDecoderConfigurationOptions(
    struct _ns2__GetAudioDecoderConfigurationOptions* ns2__GetAudioDecoderConfigurationOptions,	///< Request parameter
    struct _ns2__GetAudioDecoderConfigurationOptionsResponse* ns2__GetAudioDecoderConfigurationOptionsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetGuaranteedNumberOfVideoEncoderInstances                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetGuaranteedNumberOfVideoEncoderInstances" of service binding "MediaBinding"

/**

Operation details:

The GetGuaranteedNumberOfVideoEncoderInstances command can be used to request the
minimum number of guaranteed video encoder instances (applications) per Video Source
Configuration.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/ GetGuaranteedNumberOfVideoEncoderInstances"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetGuaranteedNumberOfVideoEncoderInstances(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetGuaranteedNumberOfVideoEncoderInstances* ns2__GetGuaranteedNumberOfVideoEncoderInstances,
    // response parameters:
    struct _ns2__GetGuaranteedNumberOfVideoEncoderInstancesResponse* ns2__GetGuaranteedNumberOfVideoEncoderInstancesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetGuaranteedNumberOfVideoEncoderInstances(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetGuaranteedNumberOfVideoEncoderInstances* ns2__GetGuaranteedNumberOfVideoEncoderInstances,
    // response parameters:
    struct _ns2__GetGuaranteedNumberOfVideoEncoderInstancesResponse* ns2__GetGuaranteedNumberOfVideoEncoderInstancesResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetGuaranteedNumberOfVideoEncoderInstances document
//gsoap ns2  service method-encoding:	GetGuaranteedNumberOfVideoEncoderInstances literal
//gsoap ns2  service method-action:	GetGuaranteedNumberOfVideoEncoderInstances http://www.onvif.org/ver10/media/wsdl/ GetGuaranteedNumberOfVideoEncoderInstances
int __ns2__GetGuaranteedNumberOfVideoEncoderInstances(
    struct _ns2__GetGuaranteedNumberOfVideoEncoderInstances* ns2__GetGuaranteedNumberOfVideoEncoderInstances,	///< Request parameter
    struct _ns2__GetGuaranteedNumberOfVideoEncoderInstancesResponse* ns2__GetGuaranteedNumberOfVideoEncoderInstancesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetStreamUri                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetStreamUri" of service binding "MediaBinding"

/**

Operation details:

This operation requests a URI that can be used to initiate a live media stream using
RTSP as
the control protocol. The returned URI shall remain valid indefinitely even if
the profile is
changed. The ValidUntilConnect, ValidUntilReboot and Timeout Parameter shall be
set
accordingly (ValidUntilConnect=false, ValidUntilReboot=false, timeout=PT0S). <br/>
				The correct syntax for the StreamSetup element for
these media stream setups defined in 5.1.1 of the streaming specification are as
follows:
				<ol><li>RTP unicast over UDP: StreamType = "RTP_unicast",
TransportProtocol = "UDP"</li>
					<li>RTP over RTSP over HTTP over TCP: StreamType
= "RTP_unicast", TransportProtocol = "HTTP"</li>
					<li>RTP over RTSP over TCP: StreamType =
"RTP_unicast", TransportProtocol = "RTSP"</li>
				</ol><br/>
If a multicast stream is requested the VideoEncoderConfiguration, AudioEncoderConfiguration
and MetadataConfiguration element inside the corresponding 
media profile must be configured with valid multicast settings.<br/>
For full compatibility with other ONVIF services a device should not generate Uris
longer than
128 octets.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetStreamUri"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetStreamUri(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetStreamUri*          ns2__GetStreamUri,
    // response parameters:
    struct _ns2__GetStreamUriResponse*  ns2__GetStreamUriResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetStreamUri(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetStreamUri*          ns2__GetStreamUri,
    // response parameters:
    struct _ns2__GetStreamUriResponse*  ns2__GetStreamUriResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetStreamUri document
//gsoap ns2  service method-encoding:	GetStreamUri literal
//gsoap ns2  service method-action:	GetStreamUri http://www.onvif.org/ver10/media/wsdl/GetStreamUri
int __ns2__GetStreamUri(
    struct _ns2__GetStreamUri*          ns2__GetStreamUri,	///< Request parameter
    struct _ns2__GetStreamUriResponse*  ns2__GetStreamUriResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__StartMulticastStreaming                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__StartMulticastStreaming" of service binding "MediaBinding"

/**

Operation details:

This command starts multicast streaming using a specified media profile of an NVT.
Streaming continues until StopMulticastStreaming is called for the same Profile.
The
streaming shall continue after a reboot of the NVT until a StopMulticastStreaming
request is
received. The multicast address, port and TTL are configured in the
VideoEncoderConfiguration, AudioEncoderConfiguration and MetadataConfiguration
respectively.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/StartMulticastStreaming"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__StartMulticastStreaming(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__StartMulticastStreaming* ns2__StartMulticastStreaming,
    // response parameters:
    struct _ns2__StartMulticastStreamingResponse* ns2__StartMulticastStreamingResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__StartMulticastStreaming(
    struct soap *soap,
    // request parameters:
    struct _ns2__StartMulticastStreaming* ns2__StartMulticastStreaming,
    // response parameters:
    struct _ns2__StartMulticastStreamingResponse* ns2__StartMulticastStreamingResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	StartMulticastStreaming document
//gsoap ns2  service method-encoding:	StartMulticastStreaming literal
//gsoap ns2  service method-action:	StartMulticastStreaming http://www.onvif.org/ver10/media/wsdl/StartMulticastStreaming
int __ns2__StartMulticastStreaming(
    struct _ns2__StartMulticastStreaming* ns2__StartMulticastStreaming,	///< Request parameter
    struct _ns2__StartMulticastStreamingResponse* ns2__StartMulticastStreamingResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__StopMulticastStreaming                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__StopMulticastStreaming" of service binding "MediaBinding"

/**

Operation details:

This command stop multicast streaming using a specified media profile of an NVT

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/StopMulticastStreaming"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__StopMulticastStreaming(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__StopMulticastStreaming* ns2__StopMulticastStreaming,
    // response parameters:
    struct _ns2__StopMulticastStreamingResponse* ns2__StopMulticastStreamingResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__StopMulticastStreaming(
    struct soap *soap,
    // request parameters:
    struct _ns2__StopMulticastStreaming* ns2__StopMulticastStreaming,
    // response parameters:
    struct _ns2__StopMulticastStreamingResponse* ns2__StopMulticastStreamingResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	StopMulticastStreaming document
//gsoap ns2  service method-encoding:	StopMulticastStreaming literal
//gsoap ns2  service method-action:	StopMulticastStreaming http://www.onvif.org/ver10/media/wsdl/StopMulticastStreaming
int __ns2__StopMulticastStreaming(
    struct _ns2__StopMulticastStreaming* ns2__StopMulticastStreaming,	///< Request parameter
    struct _ns2__StopMulticastStreamingResponse* ns2__StopMulticastStreamingResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__SetSynchronizationPoint                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__SetSynchronizationPoint" of service binding "MediaBinding"

/**

Operation details:

Synchronization points allow clients to decode and correctly use all data after
the
synchronization point.
For example, if a video stream is configured with a large I-frame distance and
a client loses a
single packet, the client does not display video until the next I-frame is transmitted.
In such
cases, the client can request a Synchronization Point which enforces the NVT to
add an I-Frame as soon as possible. Clients can request Synchronization Points
for profiles. The NVT
shall add synchronization points for all streams associated with this profile.
Similarly, a synchronization point is used to get an update on full PTZ or event
status through
the metadata stream.
If a video stream is associated with the profile, an I-frame shall be added to
this video stream.
If a PTZ metadata stream is associated to the profile,
the PTZ position shall be repeated within the metadata stream.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/SetSynchronizationPoint"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__SetSynchronizationPoint(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__SetSynchronizationPoint* ns2__SetSynchronizationPoint,
    // response parameters:
    struct _ns2__SetSynchronizationPointResponse* ns2__SetSynchronizationPointResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__SetSynchronizationPoint(
    struct soap *soap,
    // request parameters:
    struct _ns2__SetSynchronizationPoint* ns2__SetSynchronizationPoint,
    // response parameters:
    struct _ns2__SetSynchronizationPointResponse* ns2__SetSynchronizationPointResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	SetSynchronizationPoint document
//gsoap ns2  service method-encoding:	SetSynchronizationPoint literal
//gsoap ns2  service method-action:	SetSynchronizationPoint http://www.onvif.org/ver10/media/wsdl/SetSynchronizationPoint
int __ns2__SetSynchronizationPoint(
    struct _ns2__SetSynchronizationPoint* ns2__SetSynchronizationPoint,	///< Request parameter
    struct _ns2__SetSynchronizationPointResponse* ns2__SetSynchronizationPointResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetSnapshotUri                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetSnapshotUri" of service binding "MediaBinding"

/**

Operation details:

A client uses the GetSnapshotUri command to obtain a JPEG snapshot from the
NVT. The returned URI shall remain valid indefinitely even if the profile is changed.
The
ValidUntilConnect, ValidUntilReboot and Timeout Parameter shall be set accordingly
(ValidUntilConnect=false, ValidUntilReboot=false, timeout=PT0S). The URI can be
used for
acquiring a JPEG image through a HTTP GET operation. The image encoding will always
be
JPEG regardless of the encoding setting in the media profile. The Jpeg settings
(like resolution or quality) shall be taken from the profile

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetSnapshotUri"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetSnapshotUri(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetSnapshotUri*        ns2__GetSnapshotUri,
    // response parameters:
    struct _ns2__GetSnapshotUriResponse* ns2__GetSnapshotUriResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetSnapshotUri(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetSnapshotUri*        ns2__GetSnapshotUri,
    // response parameters:
    struct _ns2__GetSnapshotUriResponse* ns2__GetSnapshotUriResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetSnapshotUri document
//gsoap ns2  service method-encoding:	GetSnapshotUri literal
//gsoap ns2  service method-action:	GetSnapshotUri http://www.onvif.org/ver10/media/wsdl/GetSnapshotUri
int __ns2__GetSnapshotUri(
    struct _ns2__GetSnapshotUri*        ns2__GetSnapshotUri,	///< Request parameter
    struct _ns2__GetSnapshotUriResponse* ns2__GetSnapshotUriResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetServiceCapabilities                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetServiceCapabilities" of service binding "MediaBinding"

/**

Operation details:

Returns the capabilities of the media service. The result is returned in a typed
answer.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetServiceCapabilities"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetServiceCapabilities(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetServiceCapabilities* ns2__GetServiceCapabilities,
    // response parameters:
    struct _ns2__GetServiceCapabilitiesResponse* ns2__GetServiceCapabilitiesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetServiceCapabilities(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetServiceCapabilities* ns2__GetServiceCapabilities,
    // response parameters:
    struct _ns2__GetServiceCapabilitiesResponse* ns2__GetServiceCapabilitiesResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetServiceCapabilities document
//gsoap ns2  service method-encoding:	GetServiceCapabilities literal
//gsoap ns2  service method-action:	GetServiceCapabilities http://www.onvif.org/ver10/media/wsdl/GetServiceCapabilities
int __ns2__GetServiceCapabilities(
    struct _ns2__GetServiceCapabilities* ns2__GetServiceCapabilities,	///< Request parameter
    struct _ns2__GetServiceCapabilitiesResponse* ns2__GetServiceCapabilitiesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetVideoSources_                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetVideoSources_" of service binding "MediaBinding"

/**

Operation details:

This command lists all available physical video inputs of the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdlGetVideoSources/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetVideoSources_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetVideoSources*       ns2__GetVideoSources,
    // response parameters:
    struct _ns2__GetVideoSourcesResponse* ns2__GetVideoSourcesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetVideoSources_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetVideoSources*       ns2__GetVideoSources,
    // response parameters:
    struct _ns2__GetVideoSourcesResponse* ns2__GetVideoSourcesResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetVideoSources_ document
//gsoap ns2  service method-encoding:	GetVideoSources_ literal
//gsoap ns2  service method-action:	GetVideoSources_ http://www.onvif.org/ver10/media/wsdlGetVideoSources/
int __ns2__GetVideoSources_(
    struct _ns2__GetVideoSources*       ns2__GetVideoSources,	///< Request parameter
    struct _ns2__GetVideoSourcesResponse* ns2__GetVideoSourcesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioSources_                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioSources_" of service binding "MediaBinding"

/**

Operation details:

This command lists all available physical audio inputs of the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioSources"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioSources_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioSources*       ns2__GetAudioSources,
    // response parameters:
    struct _ns2__GetAudioSourcesResponse* ns2__GetAudioSourcesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioSources_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioSources*       ns2__GetAudioSources,
    // response parameters:
    struct _ns2__GetAudioSourcesResponse* ns2__GetAudioSourcesResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioSources_ document
//gsoap ns2  service method-encoding:	GetAudioSources_ literal
//gsoap ns2  service method-action:	GetAudioSources_ http://www.onvif.org/ver10/media/wsdl/GetAudioSources
int __ns2__GetAudioSources_(
    struct _ns2__GetAudioSources*       ns2__GetAudioSources,	///< Request parameter
    struct _ns2__GetAudioSourcesResponse* ns2__GetAudioSourcesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioOutputs_                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioOutputs_" of service binding "MediaBinding"

/**

Operation details:

This command lists all available physical audio outputs of the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioOutputs"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioOutputs_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioOutputs*       ns2__GetAudioOutputs,
    // response parameters:
    struct _ns2__GetAudioOutputsResponse* ns2__GetAudioOutputsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioOutputs_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioOutputs*       ns2__GetAudioOutputs,
    // response parameters:
    struct _ns2__GetAudioOutputsResponse* ns2__GetAudioOutputsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioOutputs_ document
//gsoap ns2  service method-encoding:	GetAudioOutputs_ literal
//gsoap ns2  service method-action:	GetAudioOutputs_ http://www.onvif.org/ver10/media/wsdl/GetAudioOutputs
int __ns2__GetAudioOutputs_(
    struct _ns2__GetAudioOutputs*       ns2__GetAudioOutputs,	///< Request parameter
    struct _ns2__GetAudioOutputsResponse* ns2__GetAudioOutputsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__CreateProfile_                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__CreateProfile_" of service binding "MediaBinding"

/**

Operation details:

This operation creates a new empty media profile. The media profile shall be created
in the
NVT and shall be persistent (remain after reboot). A created profile shall be deletable
and an NVT shall set the fixed attribute to false in the
returned Profile.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/CreateProfile"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__CreateProfile_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__CreateProfile*         ns2__CreateProfile,
    // response parameters:
    struct _ns2__CreateProfileResponse* ns2__CreateProfileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__CreateProfile_(
    struct soap *soap,
    // request parameters:
    struct _ns2__CreateProfile*         ns2__CreateProfile,
    // response parameters:
    struct _ns2__CreateProfileResponse* ns2__CreateProfileResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	CreateProfile_ document
//gsoap ns2  service method-encoding:	CreateProfile_ literal
//gsoap ns2  service method-action:	CreateProfile_ http://www.onvif.org/ver10/media/wsdl/CreateProfile
int __ns2__CreateProfile_(
    struct _ns2__CreateProfile*         ns2__CreateProfile,	///< Request parameter
    struct _ns2__CreateProfileResponse* ns2__CreateProfileResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetProfile_                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetProfile_" of service binding "MediaBinding"

/**

Operation details:

If the profile token is already known, a profile can be fetched through the GetProfile
command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdlGetProfile/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetProfile_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetProfile*            ns2__GetProfile,
    // response parameters:
    struct _ns2__GetProfileResponse*    ns2__GetProfileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetProfile_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetProfile*            ns2__GetProfile,
    // response parameters:
    struct _ns2__GetProfileResponse*    ns2__GetProfileResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetProfile_ document
//gsoap ns2  service method-encoding:	GetProfile_ literal
//gsoap ns2  service method-action:	GetProfile_ http://www.onvif.org/ver10/media/wsdlGetProfile/
int __ns2__GetProfile_(
    struct _ns2__GetProfile*            ns2__GetProfile,	///< Request parameter
    struct _ns2__GetProfileResponse*    ns2__GetProfileResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetProfiles_                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetProfiles_" of service binding "MediaBinding"

/**

Operation details:

Any endpoint can ask for the existing media profiles of an NVT using the GetProfiles
command. Pre-configured or dynamically configured profiles can be retrieved using
this
command. This command lists all configured profiles in a device. The client does
not need to
know the media profile in order to use the command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetProfiles"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetProfiles_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetProfiles*           ns2__GetProfiles,
    // response parameters:
    struct _ns2__GetProfilesResponse*   ns2__GetProfilesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetProfiles_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetProfiles*           ns2__GetProfiles,
    // response parameters:
    struct _ns2__GetProfilesResponse*   ns2__GetProfilesResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetProfiles_ document
//gsoap ns2  service method-encoding:	GetProfiles_ literal
//gsoap ns2  service method-action:	GetProfiles_ http://www.onvif.org/ver10/media/wsdl/GetProfiles
int __ns2__GetProfiles_(
    struct _ns2__GetProfiles*           ns2__GetProfiles,	///< Request parameter
    struct _ns2__GetProfilesResponse*   ns2__GetProfilesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__AddVideoEncoderConfiguration_                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__AddVideoEncoderConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation adds a VideoEncoderConfiguration to an existing media profile. If
a
configuration exists in the media profile, it will be replaced. The change shall
be persistent. Adding a VideoEncoderConfiguration to a Profile means that a stream
using that Profile will
contain video data. Video encoder configurations should be added after adding a
video source configuration.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/AddVideoEncoderConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__AddVideoEncoderConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__AddVideoEncoderConfiguration* ns2__AddVideoEncoderConfiguration,
    // response parameters:
    struct _ns2__AddVideoEncoderConfigurationResponse* ns2__AddVideoEncoderConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__AddVideoEncoderConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__AddVideoEncoderConfiguration* ns2__AddVideoEncoderConfiguration,
    // response parameters:
    struct _ns2__AddVideoEncoderConfigurationResponse* ns2__AddVideoEncoderConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	AddVideoEncoderConfiguration_ document
//gsoap ns2  service method-encoding:	AddVideoEncoderConfiguration_ literal
//gsoap ns2  service method-action:	AddVideoEncoderConfiguration_ http://www.onvif.org/ver10/media/wsdl/AddVideoEncoderConfiguration
int __ns2__AddVideoEncoderConfiguration_(
    struct _ns2__AddVideoEncoderConfiguration* ns2__AddVideoEncoderConfiguration,	///< Request parameter
    struct _ns2__AddVideoEncoderConfigurationResponse* ns2__AddVideoEncoderConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__AddVideoSourceConfiguration_                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__AddVideoSourceConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation adds a VideoSourceConfiguration to an existing media profile. If
such a
configuration exists in the media profile, it will be replaced. The change shall
be persistent.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/AddVideoSourceConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__AddVideoSourceConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__AddVideoSourceConfiguration* ns2__AddVideoSourceConfiguration,
    // response parameters:
    struct _ns2__AddVideoSourceConfigurationResponse* ns2__AddVideoSourceConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__AddVideoSourceConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__AddVideoSourceConfiguration* ns2__AddVideoSourceConfiguration,
    // response parameters:
    struct _ns2__AddVideoSourceConfigurationResponse* ns2__AddVideoSourceConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	AddVideoSourceConfiguration_ document
//gsoap ns2  service method-encoding:	AddVideoSourceConfiguration_ literal
//gsoap ns2  service method-action:	AddVideoSourceConfiguration_ http://www.onvif.org/ver10/media/wsdl/AddVideoSourceConfiguration
int __ns2__AddVideoSourceConfiguration_(
    struct _ns2__AddVideoSourceConfiguration* ns2__AddVideoSourceConfiguration,	///< Request parameter
    struct _ns2__AddVideoSourceConfigurationResponse* ns2__AddVideoSourceConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__AddAudioEncoderConfiguration_                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__AddAudioEncoderConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation adds an AudioEncoderConfiguration to an existing media profile. If
a configuration exists in the media profile, it will be replaced. The change shall
be persistent. Adding an AudioEncoderConfiguration to a media profile means that
streams using that media profile will contain audio data. Audio encoder configurations
should be added after adding an audio source configuration.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/AddAudioEncoderConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__AddAudioEncoderConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__AddAudioEncoderConfiguration* ns2__AddAudioEncoderConfiguration,
    // response parameters:
    struct _ns2__AddAudioEncoderConfigurationResponse* ns2__AddAudioEncoderConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__AddAudioEncoderConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__AddAudioEncoderConfiguration* ns2__AddAudioEncoderConfiguration,
    // response parameters:
    struct _ns2__AddAudioEncoderConfigurationResponse* ns2__AddAudioEncoderConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	AddAudioEncoderConfiguration_ document
//gsoap ns2  service method-encoding:	AddAudioEncoderConfiguration_ literal
//gsoap ns2  service method-action:	AddAudioEncoderConfiguration_ http://www.onvif.org/ver10/media/wsdl/AddAudioEncoderConfiguration
int __ns2__AddAudioEncoderConfiguration_(
    struct _ns2__AddAudioEncoderConfiguration* ns2__AddAudioEncoderConfiguration,	///< Request parameter
    struct _ns2__AddAudioEncoderConfigurationResponse* ns2__AddAudioEncoderConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__AddAudioSourceConfiguration_                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__AddAudioSourceConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation adds an AudioSourceConfiguration to an existing media profile. If
a
configuration exists in the media profile, it will be replaced. The change shall
be persistent.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/AddAudioSourceConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__AddAudioSourceConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__AddAudioSourceConfiguration* ns2__AddAudioSourceConfiguration,
    // response parameters:
    struct _ns2__AddAudioSourceConfigurationResponse* ns2__AddAudioSourceConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__AddAudioSourceConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__AddAudioSourceConfiguration* ns2__AddAudioSourceConfiguration,
    // response parameters:
    struct _ns2__AddAudioSourceConfigurationResponse* ns2__AddAudioSourceConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	AddAudioSourceConfiguration_ document
//gsoap ns2  service method-encoding:	AddAudioSourceConfiguration_ literal
//gsoap ns2  service method-action:	AddAudioSourceConfiguration_ http://www.onvif.org/ver10/media/wsdl/AddAudioSourceConfiguration
int __ns2__AddAudioSourceConfiguration_(
    struct _ns2__AddAudioSourceConfiguration* ns2__AddAudioSourceConfiguration,	///< Request parameter
    struct _ns2__AddAudioSourceConfigurationResponse* ns2__AddAudioSourceConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__AddPTZConfiguration_                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__AddPTZConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation adds a PTZConfiguration to an existing media profile. If a configuration
exists
in the media profile, it will be replaced. The change shall be persistent. Adding
a PTZConfiguration to a media profile means that streams using that media profile
can
contain PTZ status (in the metadata), and that the media profile can be used for
controlling
PTZ movement.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/AddPTZConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__AddPTZConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__AddPTZConfiguration*   ns2__AddPTZConfiguration,
    // response parameters:
    struct _ns2__AddPTZConfigurationResponse* ns2__AddPTZConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__AddPTZConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__AddPTZConfiguration*   ns2__AddPTZConfiguration,
    // response parameters:
    struct _ns2__AddPTZConfigurationResponse* ns2__AddPTZConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	AddPTZConfiguration_ document
//gsoap ns2  service method-encoding:	AddPTZConfiguration_ literal
//gsoap ns2  service method-action:	AddPTZConfiguration_ http://www.onvif.org/ver10/media/wsdl/AddPTZConfiguration
int __ns2__AddPTZConfiguration_(
    struct _ns2__AddPTZConfiguration*   ns2__AddPTZConfiguration,	///< Request parameter
    struct _ns2__AddPTZConfigurationResponse* ns2__AddPTZConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__AddVideoAnalyticsConfiguration_                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__AddVideoAnalyticsConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation adds a VideoAnalytics configuration to an existing media profile.
If a
configuration exists in the media profile, it will be replaced. The change shall
be persistent. Adding a VideoAnalyticsConfiguration to a media profile means that
streams using that media
profile can contain video analytics data (in the metadata) as defined by the submitted
configuration reference. A profile containing only a video analytics configuration
but no video source configuration is incomplete. Therefore, a client should first
add a video source configuration to a profile before adding a video analytics configuration.
The NVT can deny adding of a video analytics
configuration before a video source configuration.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/AddVideoAnalyticsConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__AddVideoAnalyticsConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__AddVideoAnalyticsConfiguration* ns2__AddVideoAnalyticsConfiguration,
    // response parameters:
    struct _ns2__AddVideoAnalyticsConfigurationResponse* ns2__AddVideoAnalyticsConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__AddVideoAnalyticsConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__AddVideoAnalyticsConfiguration* ns2__AddVideoAnalyticsConfiguration,
    // response parameters:
    struct _ns2__AddVideoAnalyticsConfigurationResponse* ns2__AddVideoAnalyticsConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	AddVideoAnalyticsConfiguration_ document
//gsoap ns2  service method-encoding:	AddVideoAnalyticsConfiguration_ literal
//gsoap ns2  service method-action:	AddVideoAnalyticsConfiguration_ http://www.onvif.org/ver10/media/wsdl/AddVideoAnalyticsConfiguration
int __ns2__AddVideoAnalyticsConfiguration_(
    struct _ns2__AddVideoAnalyticsConfiguration* ns2__AddVideoAnalyticsConfiguration,	///< Request parameter
    struct _ns2__AddVideoAnalyticsConfigurationResponse* ns2__AddVideoAnalyticsConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__AddMetadataConfiguration_                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__AddMetadataConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation adds a Metadata configuration to an existing media profile. If a
configuration exists in the media profile, it will be replaced. The change shall
be persistent. Adding a MetadataConfiguration to a Profile means that streams using
that profile contain metadata. Metadata can consist of events, PTZ status, and/or
video analytics data.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/AddMetadataConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__AddMetadataConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__AddMetadataConfiguration* ns2__AddMetadataConfiguration,
    // response parameters:
    struct _ns2__AddMetadataConfigurationResponse* ns2__AddMetadataConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__AddMetadataConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__AddMetadataConfiguration* ns2__AddMetadataConfiguration,
    // response parameters:
    struct _ns2__AddMetadataConfigurationResponse* ns2__AddMetadataConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	AddMetadataConfiguration_ document
//gsoap ns2  service method-encoding:	AddMetadataConfiguration_ literal
//gsoap ns2  service method-action:	AddMetadataConfiguration_ http://www.onvif.org/ver10/media/wsdl/AddMetadataConfiguration
int __ns2__AddMetadataConfiguration_(
    struct _ns2__AddMetadataConfiguration* ns2__AddMetadataConfiguration,	///< Request parameter
    struct _ns2__AddMetadataConfigurationResponse* ns2__AddMetadataConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__AddAudioOutputConfiguration_                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__AddAudioOutputConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation adds an AudioOutputConfiguration to an existing media profile. If
a configuration exists in the media profile, it will be replaced. The change shall
be persistent.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/AddAudioOutputConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__AddAudioOutputConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__AddAudioOutputConfiguration* ns2__AddAudioOutputConfiguration,
    // response parameters:
    struct _ns2__AddAudioOutputConfigurationResponse* ns2__AddAudioOutputConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__AddAudioOutputConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__AddAudioOutputConfiguration* ns2__AddAudioOutputConfiguration,
    // response parameters:
    struct _ns2__AddAudioOutputConfigurationResponse* ns2__AddAudioOutputConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	AddAudioOutputConfiguration_ document
//gsoap ns2  service method-encoding:	AddAudioOutputConfiguration_ literal
//gsoap ns2  service method-action:	AddAudioOutputConfiguration_ http://www.onvif.org/ver10/media/wsdl/AddAudioOutputConfiguration
int __ns2__AddAudioOutputConfiguration_(
    struct _ns2__AddAudioOutputConfiguration* ns2__AddAudioOutputConfiguration,	///< Request parameter
    struct _ns2__AddAudioOutputConfigurationResponse* ns2__AddAudioOutputConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__AddAudioDecoderConfiguration_                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__AddAudioDecoderConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation adds an AudioDecoderConfiguration to an existing media profile. If
a configuration exists in the media profile, it shall be replaced. The change shall
be persistent.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/AddAudioDecoderConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__AddAudioDecoderConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__AddAudioDecoderConfiguration* ns2__AddAudioDecoderConfiguration,
    // response parameters:
    struct _ns2__AddAudioDecoderConfigurationResponse* ns2__AddAudioDecoderConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__AddAudioDecoderConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__AddAudioDecoderConfiguration* ns2__AddAudioDecoderConfiguration,
    // response parameters:
    struct _ns2__AddAudioDecoderConfigurationResponse* ns2__AddAudioDecoderConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	AddAudioDecoderConfiguration_ document
//gsoap ns2  service method-encoding:	AddAudioDecoderConfiguration_ literal
//gsoap ns2  service method-action:	AddAudioDecoderConfiguration_ http://www.onvif.org/ver10/media/wsdl/AddAudioDecoderConfiguration
int __ns2__AddAudioDecoderConfiguration_(
    struct _ns2__AddAudioDecoderConfiguration* ns2__AddAudioDecoderConfiguration,	///< Request parameter
    struct _ns2__AddAudioDecoderConfigurationResponse* ns2__AddAudioDecoderConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__RemoveVideoEncoderConfiguration_                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__RemoveVideoEncoderConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation removes a VideoEncoderConfiguration from an existing media profile.
If the
media profile does not contain a VideoEncoderConfiguration, the operation has no
effect. The removal shall be persistent.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/RemoveVideoEncoderConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__RemoveVideoEncoderConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__RemoveVideoEncoderConfiguration* ns2__RemoveVideoEncoderConfiguration,
    // response parameters:
    struct _ns2__RemoveVideoEncoderConfigurationResponse* ns2__RemoveVideoEncoderConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__RemoveVideoEncoderConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__RemoveVideoEncoderConfiguration* ns2__RemoveVideoEncoderConfiguration,
    // response parameters:
    struct _ns2__RemoveVideoEncoderConfigurationResponse* ns2__RemoveVideoEncoderConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	RemoveVideoEncoderConfiguration_ document
//gsoap ns2  service method-encoding:	RemoveVideoEncoderConfiguration_ literal
//gsoap ns2  service method-action:	RemoveVideoEncoderConfiguration_ http://www.onvif.org/ver10/media/wsdl/RemoveVideoEncoderConfiguration
int __ns2__RemoveVideoEncoderConfiguration_(
    struct _ns2__RemoveVideoEncoderConfiguration* ns2__RemoveVideoEncoderConfiguration,	///< Request parameter
    struct _ns2__RemoveVideoEncoderConfigurationResponse* ns2__RemoveVideoEncoderConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__RemoveVideoSourceConfiguration_                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__RemoveVideoSourceConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation removes a VideoSourceConfiguration from an existing media profile.
If the
media profile does not contain a VideoSourceConfiguration, the operation has no
effect. The removal shall be persistent. Video source configurations should only
be removed after removing a
VideoEncoderConfiguration from the media profile.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/RemoveVideoSourceConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__RemoveVideoSourceConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__RemoveVideoSourceConfiguration* ns2__RemoveVideoSourceConfiguration,
    // response parameters:
    struct _ns2__RemoveVideoSourceConfigurationResponse* ns2__RemoveVideoSourceConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__RemoveVideoSourceConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__RemoveVideoSourceConfiguration* ns2__RemoveVideoSourceConfiguration,
    // response parameters:
    struct _ns2__RemoveVideoSourceConfigurationResponse* ns2__RemoveVideoSourceConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	RemoveVideoSourceConfiguration_ document
//gsoap ns2  service method-encoding:	RemoveVideoSourceConfiguration_ literal
//gsoap ns2  service method-action:	RemoveVideoSourceConfiguration_ http://www.onvif.org/ver10/media/wsdl/RemoveVideoSourceConfiguration
int __ns2__RemoveVideoSourceConfiguration_(
    struct _ns2__RemoveVideoSourceConfiguration* ns2__RemoveVideoSourceConfiguration,	///< Request parameter
    struct _ns2__RemoveVideoSourceConfigurationResponse* ns2__RemoveVideoSourceConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__RemoveAudioEncoderConfiguration_                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__RemoveAudioEncoderConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation removes an AudioEncoderConfiguration from an existing media profile.
If the
media profile does not contain an AudioEncoderConfiguration, the operation has
no effect.
The removal shall be persistent.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/RemoveAudioEncoderConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__RemoveAudioEncoderConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__RemoveAudioEncoderConfiguration* ns2__RemoveAudioEncoderConfiguration,
    // response parameters:
    struct _ns2__RemoveAudioEncoderConfigurationResponse* ns2__RemoveAudioEncoderConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__RemoveAudioEncoderConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__RemoveAudioEncoderConfiguration* ns2__RemoveAudioEncoderConfiguration,
    // response parameters:
    struct _ns2__RemoveAudioEncoderConfigurationResponse* ns2__RemoveAudioEncoderConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	RemoveAudioEncoderConfiguration_ document
//gsoap ns2  service method-encoding:	RemoveAudioEncoderConfiguration_ literal
//gsoap ns2  service method-action:	RemoveAudioEncoderConfiguration_ http://www.onvif.org/ver10/media/wsdl/RemoveAudioEncoderConfiguration
int __ns2__RemoveAudioEncoderConfiguration_(
    struct _ns2__RemoveAudioEncoderConfiguration* ns2__RemoveAudioEncoderConfiguration,	///< Request parameter
    struct _ns2__RemoveAudioEncoderConfigurationResponse* ns2__RemoveAudioEncoderConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__RemoveAudioSourceConfiguration_                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__RemoveAudioSourceConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation removes an AudioSourceConfiguration from an existing media profile.
If the
media profile does not contain an AudioSourceConfiguration, the operation has no
effect. The
removal shall be persistent. Audio source configurations should only be removed
after removing an
AudioEncoderConfiguration from the media profile.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/RemoveAudioSourceConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__RemoveAudioSourceConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__RemoveAudioSourceConfiguration* ns2__RemoveAudioSourceConfiguration,
    // response parameters:
    struct _ns2__RemoveAudioSourceConfigurationResponse* ns2__RemoveAudioSourceConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__RemoveAudioSourceConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__RemoveAudioSourceConfiguration* ns2__RemoveAudioSourceConfiguration,
    // response parameters:
    struct _ns2__RemoveAudioSourceConfigurationResponse* ns2__RemoveAudioSourceConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	RemoveAudioSourceConfiguration_ document
//gsoap ns2  service method-encoding:	RemoveAudioSourceConfiguration_ literal
//gsoap ns2  service method-action:	RemoveAudioSourceConfiguration_ http://www.onvif.org/ver10/media/wsdl/RemoveAudioSourceConfiguration
int __ns2__RemoveAudioSourceConfiguration_(
    struct _ns2__RemoveAudioSourceConfiguration* ns2__RemoveAudioSourceConfiguration,	///< Request parameter
    struct _ns2__RemoveAudioSourceConfigurationResponse* ns2__RemoveAudioSourceConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__RemovePTZConfiguration_                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__RemovePTZConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation removes a PTZConfiguration from an existing media profile. If the
media profile
does not contain a PTZConfiguration, the operation has no effect. The removal shall
be persistent.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/RemovePTZConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__RemovePTZConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__RemovePTZConfiguration* ns2__RemovePTZConfiguration,
    // response parameters:
    struct _ns2__RemovePTZConfigurationResponse* ns2__RemovePTZConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__RemovePTZConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__RemovePTZConfiguration* ns2__RemovePTZConfiguration,
    // response parameters:
    struct _ns2__RemovePTZConfigurationResponse* ns2__RemovePTZConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	RemovePTZConfiguration_ document
//gsoap ns2  service method-encoding:	RemovePTZConfiguration_ literal
//gsoap ns2  service method-action:	RemovePTZConfiguration_ http://www.onvif.org/ver10/media/wsdl/RemovePTZConfiguration
int __ns2__RemovePTZConfiguration_(
    struct _ns2__RemovePTZConfiguration* ns2__RemovePTZConfiguration,	///< Request parameter
    struct _ns2__RemovePTZConfigurationResponse* ns2__RemovePTZConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__RemoveVideoAnalyticsConfiguration_                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__RemoveVideoAnalyticsConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation removes a VideoAnalyticsConfiguration from an existing media profile.
If the media profile does not contain a VideoAnalyticsConfiguration, the operation
has no effect.
The removal shall be persistent.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/RemoveVideoAnalyticsConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__RemoveVideoAnalyticsConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__RemoveVideoAnalyticsConfiguration* ns2__RemoveVideoAnalyticsConfiguration,
    // response parameters:
    struct _ns2__RemoveVideoAnalyticsConfigurationResponse* ns2__RemoveVideoAnalyticsConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__RemoveVideoAnalyticsConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__RemoveVideoAnalyticsConfiguration* ns2__RemoveVideoAnalyticsConfiguration,
    // response parameters:
    struct _ns2__RemoveVideoAnalyticsConfigurationResponse* ns2__RemoveVideoAnalyticsConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	RemoveVideoAnalyticsConfiguration_ document
//gsoap ns2  service method-encoding:	RemoveVideoAnalyticsConfiguration_ literal
//gsoap ns2  service method-action:	RemoveVideoAnalyticsConfiguration_ http://www.onvif.org/ver10/media/wsdl/RemoveVideoAnalyticsConfiguration
int __ns2__RemoveVideoAnalyticsConfiguration_(
    struct _ns2__RemoveVideoAnalyticsConfiguration* ns2__RemoveVideoAnalyticsConfiguration,	///< Request parameter
    struct _ns2__RemoveVideoAnalyticsConfigurationResponse* ns2__RemoveVideoAnalyticsConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__RemoveMetadataConfiguration_                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__RemoveMetadataConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation removes a MetadataConfiguration from an existing media profile. If
the media profile does not contain a MetadataConfiguration, the operation has no
effect. The removal shall be persistent.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/RemoveMetadataConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__RemoveMetadataConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__RemoveMetadataConfiguration* ns2__RemoveMetadataConfiguration,
    // response parameters:
    struct _ns2__RemoveMetadataConfigurationResponse* ns2__RemoveMetadataConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__RemoveMetadataConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__RemoveMetadataConfiguration* ns2__RemoveMetadataConfiguration,
    // response parameters:
    struct _ns2__RemoveMetadataConfigurationResponse* ns2__RemoveMetadataConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	RemoveMetadataConfiguration_ document
//gsoap ns2  service method-encoding:	RemoveMetadataConfiguration_ literal
//gsoap ns2  service method-action:	RemoveMetadataConfiguration_ http://www.onvif.org/ver10/media/wsdl/RemoveMetadataConfiguration
int __ns2__RemoveMetadataConfiguration_(
    struct _ns2__RemoveMetadataConfiguration* ns2__RemoveMetadataConfiguration,	///< Request parameter
    struct _ns2__RemoveMetadataConfigurationResponse* ns2__RemoveMetadataConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__RemoveAudioOutputConfiguration_                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__RemoveAudioOutputConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation removes an AudioOutputConfiguration from an existing media profile.
If the media profile does not contain an AudioOutputConfiguration, the operation
has no effect. The removal shall be persistent.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/RemoveAudioOutputConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__RemoveAudioOutputConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__RemoveAudioOutputConfiguration* ns2__RemoveAudioOutputConfiguration,
    // response parameters:
    struct _ns2__RemoveAudioOutputConfigurationResponse* ns2__RemoveAudioOutputConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__RemoveAudioOutputConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__RemoveAudioOutputConfiguration* ns2__RemoveAudioOutputConfiguration,
    // response parameters:
    struct _ns2__RemoveAudioOutputConfigurationResponse* ns2__RemoveAudioOutputConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	RemoveAudioOutputConfiguration_ document
//gsoap ns2  service method-encoding:	RemoveAudioOutputConfiguration_ literal
//gsoap ns2  service method-action:	RemoveAudioOutputConfiguration_ http://www.onvif.org/ver10/media/wsdl/RemoveAudioOutputConfiguration
int __ns2__RemoveAudioOutputConfiguration_(
    struct _ns2__RemoveAudioOutputConfiguration* ns2__RemoveAudioOutputConfiguration,	///< Request parameter
    struct _ns2__RemoveAudioOutputConfigurationResponse* ns2__RemoveAudioOutputConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__RemoveAudioDecoderConfiguration_                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__RemoveAudioDecoderConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation removes an AudioDecoderConfiguration from an existing media profile.
If the media profile does not contain an AudioDecoderConfiguration, the operation
has no effect. The removal shall be persistent.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/RemoveAudioDecoderConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__RemoveAudioDecoderConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__RemoveAudioDecoderConfiguration* ns2__RemoveAudioDecoderConfiguration,
    // response parameters:
    struct _ns2__RemoveAudioDecoderConfigurationResponse* ns2__RemoveAudioDecoderConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__RemoveAudioDecoderConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__RemoveAudioDecoderConfiguration* ns2__RemoveAudioDecoderConfiguration,
    // response parameters:
    struct _ns2__RemoveAudioDecoderConfigurationResponse* ns2__RemoveAudioDecoderConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	RemoveAudioDecoderConfiguration_ document
//gsoap ns2  service method-encoding:	RemoveAudioDecoderConfiguration_ literal
//gsoap ns2  service method-action:	RemoveAudioDecoderConfiguration_ http://www.onvif.org/ver10/media/wsdl/RemoveAudioDecoderConfiguration
int __ns2__RemoveAudioDecoderConfiguration_(
    struct _ns2__RemoveAudioDecoderConfiguration* ns2__RemoveAudioDecoderConfiguration,	///< Request parameter
    struct _ns2__RemoveAudioDecoderConfigurationResponse* ns2__RemoveAudioDecoderConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__DeleteProfile_                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__DeleteProfile_" of service binding "MediaBinding"

/**

Operation details:

This operation deletes a profile. This change shall always be persistent. Deletion
of a profile is only possible for non-fixed profiles

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/DeleteProfile"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__DeleteProfile_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__DeleteProfile*         ns2__DeleteProfile,
    // response parameters:
    struct _ns2__DeleteProfileResponse* ns2__DeleteProfileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__DeleteProfile_(
    struct soap *soap,
    // request parameters:
    struct _ns2__DeleteProfile*         ns2__DeleteProfile,
    // response parameters:
    struct _ns2__DeleteProfileResponse* ns2__DeleteProfileResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	DeleteProfile_ document
//gsoap ns2  service method-encoding:	DeleteProfile_ literal
//gsoap ns2  service method-action:	DeleteProfile_ http://www.onvif.org/ver10/media/wsdl/DeleteProfile
int __ns2__DeleteProfile_(
    struct _ns2__DeleteProfile*         ns2__DeleteProfile,	///< Request parameter
    struct _ns2__DeleteProfileResponse* ns2__DeleteProfileResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetVideoSourceConfigurations_                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetVideoSourceConfigurations_" of service binding "MediaBinding"

/**

Operation details:

This operation lists all existing video source configurations for an NVT. The client
need not know anything about the video source configurations in order to use the
command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetVideoSourceConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetVideoSourceConfigurations_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetVideoSourceConfigurations* ns2__GetVideoSourceConfigurations,
    // response parameters:
    struct _ns2__GetVideoSourceConfigurationsResponse* ns2__GetVideoSourceConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetVideoSourceConfigurations_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetVideoSourceConfigurations* ns2__GetVideoSourceConfigurations,
    // response parameters:
    struct _ns2__GetVideoSourceConfigurationsResponse* ns2__GetVideoSourceConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetVideoSourceConfigurations_ document
//gsoap ns2  service method-encoding:	GetVideoSourceConfigurations_ literal
//gsoap ns2  service method-action:	GetVideoSourceConfigurations_ http://www.onvif.org/ver10/media/wsdl/GetVideoSourceConfigurations
int __ns2__GetVideoSourceConfigurations_(
    struct _ns2__GetVideoSourceConfigurations* ns2__GetVideoSourceConfigurations,	///< Request parameter
    struct _ns2__GetVideoSourceConfigurationsResponse* ns2__GetVideoSourceConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetVideoEncoderConfigurations_                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetVideoEncoderConfigurations_" of service binding "MediaBinding"

/**

Operation details:

This operation lists all existing video encoder configurations of an NVT. This command
lists all configured video encoder configurations in a device. The client need
not know anything apriori about the video encoder configurations in order to use
the command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetVideoEncoderConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetVideoEncoderConfigurations_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetVideoEncoderConfigurations* ns2__GetVideoEncoderConfigurations,
    // response parameters:
    struct _ns2__GetVideoEncoderConfigurationsResponse* ns2__GetVideoEncoderConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetVideoEncoderConfigurations_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetVideoEncoderConfigurations* ns2__GetVideoEncoderConfigurations,
    // response parameters:
    struct _ns2__GetVideoEncoderConfigurationsResponse* ns2__GetVideoEncoderConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetVideoEncoderConfigurations_ document
//gsoap ns2  service method-encoding:	GetVideoEncoderConfigurations_ literal
//gsoap ns2  service method-action:	GetVideoEncoderConfigurations_ http://www.onvif.org/ver10/media/wsdl/GetVideoEncoderConfigurations
int __ns2__GetVideoEncoderConfigurations_(
    struct _ns2__GetVideoEncoderConfigurations* ns2__GetVideoEncoderConfigurations,	///< Request parameter
    struct _ns2__GetVideoEncoderConfigurationsResponse* ns2__GetVideoEncoderConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioSourceConfigurations_                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioSourceConfigurations_" of service binding "MediaBinding"

/**

Operation details:

This operation lists all existing audio source configurations of an NVT. This command
lists all audio source configurations in a device. The client need not know anything
apriori about the audio source configurations in order to use the command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdlGetAudioSourceConfigurations/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioSourceConfigurations_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioSourceConfigurations* ns2__GetAudioSourceConfigurations,
    // response parameters:
    struct _ns2__GetAudioSourceConfigurationsResponse* ns2__GetAudioSourceConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioSourceConfigurations_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioSourceConfigurations* ns2__GetAudioSourceConfigurations,
    // response parameters:
    struct _ns2__GetAudioSourceConfigurationsResponse* ns2__GetAudioSourceConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioSourceConfigurations_ document
//gsoap ns2  service method-encoding:	GetAudioSourceConfigurations_ literal
//gsoap ns2  service method-action:	GetAudioSourceConfigurations_ http://www.onvif.org/ver10/media/wsdlGetAudioSourceConfigurations/
int __ns2__GetAudioSourceConfigurations_(
    struct _ns2__GetAudioSourceConfigurations* ns2__GetAudioSourceConfigurations,	///< Request parameter
    struct _ns2__GetAudioSourceConfigurationsResponse* ns2__GetAudioSourceConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioEncoderConfigurations_                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioEncoderConfigurations_" of service binding "MediaBinding"

/**

Operation details:

This operation lists all existing device audio encoder configurations. The client
need not know anything apriori about the audio encoder configurations in order
to use the command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioEncoderConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioEncoderConfigurations_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioEncoderConfigurations* ns2__GetAudioEncoderConfigurations,
    // response parameters:
    struct _ns2__GetAudioEncoderConfigurationsResponse* ns2__GetAudioEncoderConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioEncoderConfigurations_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioEncoderConfigurations* ns2__GetAudioEncoderConfigurations,
    // response parameters:
    struct _ns2__GetAudioEncoderConfigurationsResponse* ns2__GetAudioEncoderConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioEncoderConfigurations_ document
//gsoap ns2  service method-encoding:	GetAudioEncoderConfigurations_ literal
//gsoap ns2  service method-action:	GetAudioEncoderConfigurations_ http://www.onvif.org/ver10/media/wsdl/GetAudioEncoderConfigurations
int __ns2__GetAudioEncoderConfigurations_(
    struct _ns2__GetAudioEncoderConfigurations* ns2__GetAudioEncoderConfigurations,	///< Request parameter
    struct _ns2__GetAudioEncoderConfigurationsResponse* ns2__GetAudioEncoderConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetVideoAnalyticsConfigurations_                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetVideoAnalyticsConfigurations_" of service binding "MediaBinding"

/**

Operation details:

This operation lists all video analytics configurations of a device. This command
lists all configured video analytics in a device. The client need not know anything
apriori about the video analytics in order to use the command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetVideoAnalyticsConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetVideoAnalyticsConfigurations_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetVideoAnalyticsConfigurations* ns2__GetVideoAnalyticsConfigurations,
    // response parameters:
    struct _ns2__GetVideoAnalyticsConfigurationsResponse* ns2__GetVideoAnalyticsConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetVideoAnalyticsConfigurations_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetVideoAnalyticsConfigurations* ns2__GetVideoAnalyticsConfigurations,
    // response parameters:
    struct _ns2__GetVideoAnalyticsConfigurationsResponse* ns2__GetVideoAnalyticsConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetVideoAnalyticsConfigurations_ document
//gsoap ns2  service method-encoding:	GetVideoAnalyticsConfigurations_ literal
//gsoap ns2  service method-action:	GetVideoAnalyticsConfigurations_ http://www.onvif.org/ver10/media/wsdl/GetVideoAnalyticsConfigurations
int __ns2__GetVideoAnalyticsConfigurations_(
    struct _ns2__GetVideoAnalyticsConfigurations* ns2__GetVideoAnalyticsConfigurations,	///< Request parameter
    struct _ns2__GetVideoAnalyticsConfigurationsResponse* ns2__GetVideoAnalyticsConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetMetadataConfigurations_                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetMetadataConfigurations_" of service binding "MediaBinding"

/**

Operation details:

This operation lists all existing metadata configurations. The client need not know
anything apriori about the metadata in order to use the command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetMetadataConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetMetadataConfigurations_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetMetadataConfigurations* ns2__GetMetadataConfigurations,
    // response parameters:
    struct _ns2__GetMetadataConfigurationsResponse* ns2__GetMetadataConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetMetadataConfigurations_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetMetadataConfigurations* ns2__GetMetadataConfigurations,
    // response parameters:
    struct _ns2__GetMetadataConfigurationsResponse* ns2__GetMetadataConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetMetadataConfigurations_ document
//gsoap ns2  service method-encoding:	GetMetadataConfigurations_ literal
//gsoap ns2  service method-action:	GetMetadataConfigurations_ http://www.onvif.org/ver10/media/wsdl/GetMetadataConfigurations
int __ns2__GetMetadataConfigurations_(
    struct _ns2__GetMetadataConfigurations* ns2__GetMetadataConfigurations,	///< Request parameter
    struct _ns2__GetMetadataConfigurationsResponse* ns2__GetMetadataConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioOutputConfigurations_                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioOutputConfigurations_" of service binding "MediaBinding"

/**

Operation details:

This command lists all existing AudioOutputConfigurations of a device. The NVC need
not know anything apriori about the audio configurations to use this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioOutputConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioOutputConfigurations_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioOutputConfigurations* ns2__GetAudioOutputConfigurations,
    // response parameters:
    struct _ns2__GetAudioOutputConfigurationsResponse* ns2__GetAudioOutputConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioOutputConfigurations_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioOutputConfigurations* ns2__GetAudioOutputConfigurations,
    // response parameters:
    struct _ns2__GetAudioOutputConfigurationsResponse* ns2__GetAudioOutputConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioOutputConfigurations_ document
//gsoap ns2  service method-encoding:	GetAudioOutputConfigurations_ literal
//gsoap ns2  service method-action:	GetAudioOutputConfigurations_ http://www.onvif.org/ver10/media/wsdl/GetAudioOutputConfigurations
int __ns2__GetAudioOutputConfigurations_(
    struct _ns2__GetAudioOutputConfigurations* ns2__GetAudioOutputConfigurations,	///< Request parameter
    struct _ns2__GetAudioOutputConfigurationsResponse* ns2__GetAudioOutputConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioDecoderConfigurations_                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioDecoderConfigurations_" of service binding "MediaBinding"

/**

Operation details:

This command lists all existing AudioDecoderConfigurations of a device. The NVC
need not know anything apriori about the audio decoder configurations in order
to
use this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioDecoderConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioDecoderConfigurations_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioDecoderConfigurations* ns2__GetAudioDecoderConfigurations,
    // response parameters:
    struct _ns2__GetAudioDecoderConfigurationsResponse* ns2__GetAudioDecoderConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioDecoderConfigurations_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioDecoderConfigurations* ns2__GetAudioDecoderConfigurations,
    // response parameters:
    struct _ns2__GetAudioDecoderConfigurationsResponse* ns2__GetAudioDecoderConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioDecoderConfigurations_ document
//gsoap ns2  service method-encoding:	GetAudioDecoderConfigurations_ literal
//gsoap ns2  service method-action:	GetAudioDecoderConfigurations_ http://www.onvif.org/ver10/media/wsdl/GetAudioDecoderConfigurations
int __ns2__GetAudioDecoderConfigurations_(
    struct _ns2__GetAudioDecoderConfigurations* ns2__GetAudioDecoderConfigurations,	///< Request parameter
    struct _ns2__GetAudioDecoderConfigurationsResponse* ns2__GetAudioDecoderConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetVideoSourceConfiguration_                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetVideoSourceConfiguration_" of service binding "MediaBinding"

/**

Operation details:

If the video source configuration token is already known, the video source configuration
can be fetched through the GetVideoSourceConfiguration command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetVideoSourceConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetVideoSourceConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetVideoSourceConfiguration* ns2__GetVideoSourceConfiguration,
    // response parameters:
    struct _ns2__GetVideoSourceConfigurationResponse* ns2__GetVideoSourceConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetVideoSourceConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetVideoSourceConfiguration* ns2__GetVideoSourceConfiguration,
    // response parameters:
    struct _ns2__GetVideoSourceConfigurationResponse* ns2__GetVideoSourceConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetVideoSourceConfiguration_ document
//gsoap ns2  service method-encoding:	GetVideoSourceConfiguration_ literal
//gsoap ns2  service method-action:	GetVideoSourceConfiguration_ http://www.onvif.org/ver10/media/wsdl/GetVideoSourceConfiguration
int __ns2__GetVideoSourceConfiguration_(
    struct _ns2__GetVideoSourceConfiguration* ns2__GetVideoSourceConfiguration,	///< Request parameter
    struct _ns2__GetVideoSourceConfigurationResponse* ns2__GetVideoSourceConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetVideoEncoderConfiguration_                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetVideoEncoderConfiguration_" of service binding "MediaBinding"

/**

Operation details:

If the video encoder configuration token is already known, the encoder configuration
can be fetched through the GetVideoEncoderConfiguration command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetVideoEncoderConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetVideoEncoderConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetVideoEncoderConfiguration* ns2__GetVideoEncoderConfiguration,
    // response parameters:
    struct _ns2__GetVideoEncoderConfigurationResponse* ns2__GetVideoEncoderConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetVideoEncoderConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetVideoEncoderConfiguration* ns2__GetVideoEncoderConfiguration,
    // response parameters:
    struct _ns2__GetVideoEncoderConfigurationResponse* ns2__GetVideoEncoderConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetVideoEncoderConfiguration_ document
//gsoap ns2  service method-encoding:	GetVideoEncoderConfiguration_ literal
//gsoap ns2  service method-action:	GetVideoEncoderConfiguration_ http://www.onvif.org/ver10/media/wsdl/GetVideoEncoderConfiguration
int __ns2__GetVideoEncoderConfiguration_(
    struct _ns2__GetVideoEncoderConfiguration* ns2__GetVideoEncoderConfiguration,	///< Request parameter
    struct _ns2__GetVideoEncoderConfigurationResponse* ns2__GetVideoEncoderConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioSourceConfiguration_                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioSourceConfiguration_" of service binding "MediaBinding"

/**

Operation details:

The GetAudioSourceConfiguration command fetches the audio source configurations
if the audio source configuration token is already known. An

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioSourceConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioSourceConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioSourceConfiguration* ns2__GetAudioSourceConfiguration,
    // response parameters:
    struct _ns2__GetAudioSourceConfigurationResponse* ns2__GetAudioSourceConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioSourceConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioSourceConfiguration* ns2__GetAudioSourceConfiguration,
    // response parameters:
    struct _ns2__GetAudioSourceConfigurationResponse* ns2__GetAudioSourceConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioSourceConfiguration_ document
//gsoap ns2  service method-encoding:	GetAudioSourceConfiguration_ literal
//gsoap ns2  service method-action:	GetAudioSourceConfiguration_ http://www.onvif.org/ver10/media/wsdl/GetAudioSourceConfiguration
int __ns2__GetAudioSourceConfiguration_(
    struct _ns2__GetAudioSourceConfiguration* ns2__GetAudioSourceConfiguration,	///< Request parameter
    struct _ns2__GetAudioSourceConfigurationResponse* ns2__GetAudioSourceConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioEncoderConfiguration_                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioEncoderConfiguration_" of service binding "MediaBinding"

/**

Operation details:

The GetAudioEncoderConfiguration command fetches the encoder configuration if the
audio encoder configuration token is known.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioEncoderConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioEncoderConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioEncoderConfiguration* ns2__GetAudioEncoderConfiguration,
    // response parameters:
    struct _ns2__GetAudioEncoderConfigurationResponse* ns2__GetAudioEncoderConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioEncoderConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioEncoderConfiguration* ns2__GetAudioEncoderConfiguration,
    // response parameters:
    struct _ns2__GetAudioEncoderConfigurationResponse* ns2__GetAudioEncoderConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioEncoderConfiguration_ document
//gsoap ns2  service method-encoding:	GetAudioEncoderConfiguration_ literal
//gsoap ns2  service method-action:	GetAudioEncoderConfiguration_ http://www.onvif.org/ver10/media/wsdl/GetAudioEncoderConfiguration
int __ns2__GetAudioEncoderConfiguration_(
    struct _ns2__GetAudioEncoderConfiguration* ns2__GetAudioEncoderConfiguration,	///< Request parameter
    struct _ns2__GetAudioEncoderConfigurationResponse* ns2__GetAudioEncoderConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetVideoAnalyticsConfiguration_                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetVideoAnalyticsConfiguration_" of service binding "MediaBinding"

/**

Operation details:

The GetVideoAnalyticsConfiguration command fetches the video analytics configuration
if the video analytics token is known.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetVideoAnalyticsConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetVideoAnalyticsConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetVideoAnalyticsConfiguration* ns2__GetVideoAnalyticsConfiguration,
    // response parameters:
    struct _ns2__GetVideoAnalyticsConfigurationResponse* ns2__GetVideoAnalyticsConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetVideoAnalyticsConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetVideoAnalyticsConfiguration* ns2__GetVideoAnalyticsConfiguration,
    // response parameters:
    struct _ns2__GetVideoAnalyticsConfigurationResponse* ns2__GetVideoAnalyticsConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetVideoAnalyticsConfiguration_ document
//gsoap ns2  service method-encoding:	GetVideoAnalyticsConfiguration_ literal
//gsoap ns2  service method-action:	GetVideoAnalyticsConfiguration_ http://www.onvif.org/ver10/media/wsdl/GetVideoAnalyticsConfiguration
int __ns2__GetVideoAnalyticsConfiguration_(
    struct _ns2__GetVideoAnalyticsConfiguration* ns2__GetVideoAnalyticsConfiguration,	///< Request parameter
    struct _ns2__GetVideoAnalyticsConfigurationResponse* ns2__GetVideoAnalyticsConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetMetadataConfiguration_                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetMetadataConfiguration_" of service binding "MediaBinding"

/**

Operation details:

The GetMetadataConfiguration command fetches the metadata configuration if the metadata
token is known.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetMetadataConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetMetadataConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetMetadataConfiguration* ns2__GetMetadataConfiguration,
    // response parameters:
    struct _ns2__GetMetadataConfigurationResponse* ns2__GetMetadataConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetMetadataConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetMetadataConfiguration* ns2__GetMetadataConfiguration,
    // response parameters:
    struct _ns2__GetMetadataConfigurationResponse* ns2__GetMetadataConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetMetadataConfiguration_ document
//gsoap ns2  service method-encoding:	GetMetadataConfiguration_ literal
//gsoap ns2  service method-action:	GetMetadataConfiguration_ http://www.onvif.org/ver10/media/wsdl/GetMetadataConfiguration
int __ns2__GetMetadataConfiguration_(
    struct _ns2__GetMetadataConfiguration* ns2__GetMetadataConfiguration,	///< Request parameter
    struct _ns2__GetMetadataConfigurationResponse* ns2__GetMetadataConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioOutputConfiguration_                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioOutputConfiguration_" of service binding "MediaBinding"

/**

Operation details:

If the audio output configuration token is already known, the output configuration
can be fetched through the GetAudioOutputConfiguration command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioOutputConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioOutputConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioOutputConfiguration* ns2__GetAudioOutputConfiguration,
    // response parameters:
    struct _ns2__GetAudioOutputConfigurationResponse* ns2__GetAudioOutputConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioOutputConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioOutputConfiguration* ns2__GetAudioOutputConfiguration,
    // response parameters:
    struct _ns2__GetAudioOutputConfigurationResponse* ns2__GetAudioOutputConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioOutputConfiguration_ document
//gsoap ns2  service method-encoding:	GetAudioOutputConfiguration_ literal
//gsoap ns2  service method-action:	GetAudioOutputConfiguration_ http://www.onvif.org/ver10/media/wsdl/GetAudioOutputConfiguration
int __ns2__GetAudioOutputConfiguration_(
    struct _ns2__GetAudioOutputConfiguration* ns2__GetAudioOutputConfiguration,	///< Request parameter
    struct _ns2__GetAudioOutputConfigurationResponse* ns2__GetAudioOutputConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioDecoderConfiguration_                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioDecoderConfiguration_" of service binding "MediaBinding"

/**

Operation details:

If the audio decoder configuration token is already known, the decoder configuration
can be fetched through the GetAudioDecoderConfiguration command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioDecoderConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioDecoderConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioDecoderConfiguration* ns2__GetAudioDecoderConfiguration,
    // response parameters:
    struct _ns2__GetAudioDecoderConfigurationResponse* ns2__GetAudioDecoderConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioDecoderConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioDecoderConfiguration* ns2__GetAudioDecoderConfiguration,
    // response parameters:
    struct _ns2__GetAudioDecoderConfigurationResponse* ns2__GetAudioDecoderConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioDecoderConfiguration_ document
//gsoap ns2  service method-encoding:	GetAudioDecoderConfiguration_ literal
//gsoap ns2  service method-action:	GetAudioDecoderConfiguration_ http://www.onvif.org/ver10/media/wsdl/GetAudioDecoderConfiguration
int __ns2__GetAudioDecoderConfiguration_(
    struct _ns2__GetAudioDecoderConfiguration* ns2__GetAudioDecoderConfiguration,	///< Request parameter
    struct _ns2__GetAudioDecoderConfigurationResponse* ns2__GetAudioDecoderConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetCompatibleVideoEncoderConfigurations_                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetCompatibleVideoEncoderConfigurations_" of service binding "MediaBinding"

/**

Operation details:

This operation lists all the video encoder configurations of the NVT that are compatible
with a certain media profile. Each of the returned configurations shall be a valid
input parameter for the AddVideoEncoderConfiguration command on the media profile.
The result will vary depending on the capabilities, configurations and settings
in the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetCompatibleVideoEncoderConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetCompatibleVideoEncoderConfigurations_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetCompatibleVideoEncoderConfigurations* ns2__GetCompatibleVideoEncoderConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleVideoEncoderConfigurationsResponse* ns2__GetCompatibleVideoEncoderConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetCompatibleVideoEncoderConfigurations_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetCompatibleVideoEncoderConfigurations* ns2__GetCompatibleVideoEncoderConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleVideoEncoderConfigurationsResponse* ns2__GetCompatibleVideoEncoderConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetCompatibleVideoEncoderConfigurations_ document
//gsoap ns2  service method-encoding:	GetCompatibleVideoEncoderConfigurations_ literal
//gsoap ns2  service method-action:	GetCompatibleVideoEncoderConfigurations_ http://www.onvif.org/ver10/media/wsdl/GetCompatibleVideoEncoderConfigurations
int __ns2__GetCompatibleVideoEncoderConfigurations_(
    struct _ns2__GetCompatibleVideoEncoderConfigurations* ns2__GetCompatibleVideoEncoderConfigurations,	///< Request parameter
    struct _ns2__GetCompatibleVideoEncoderConfigurationsResponse* ns2__GetCompatibleVideoEncoderConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetCompatibleVideoSourceConfigurations_                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetCompatibleVideoSourceConfigurations_" of service binding "MediaBinding"

/**

Operation details:

This operation requests all the video source configurations of the NVT that are
compatible
with a certain media profile. Each of the returned configurations shall be a valid
input
parameter for the AddVideoSourceConfiguration command on the media profile. The
result
will vary depending on the capabilities, configurations and settings in the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetCompatibleVideoSourceConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetCompatibleVideoSourceConfigurations_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetCompatibleVideoSourceConfigurations* ns2__GetCompatibleVideoSourceConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleVideoSourceConfigurationsResponse* ns2__GetCompatibleVideoSourceConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetCompatibleVideoSourceConfigurations_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetCompatibleVideoSourceConfigurations* ns2__GetCompatibleVideoSourceConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleVideoSourceConfigurationsResponse* ns2__GetCompatibleVideoSourceConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetCompatibleVideoSourceConfigurations_ document
//gsoap ns2  service method-encoding:	GetCompatibleVideoSourceConfigurations_ literal
//gsoap ns2  service method-action:	GetCompatibleVideoSourceConfigurations_ http://www.onvif.org/ver10/media/wsdl/GetCompatibleVideoSourceConfigurations
int __ns2__GetCompatibleVideoSourceConfigurations_(
    struct _ns2__GetCompatibleVideoSourceConfigurations* ns2__GetCompatibleVideoSourceConfigurations,	///< Request parameter
    struct _ns2__GetCompatibleVideoSourceConfigurationsResponse* ns2__GetCompatibleVideoSourceConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetCompatibleAudioEncoderConfigurations_                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetCompatibleAudioEncoderConfigurations_" of service binding "MediaBinding"

/**

Operation details:

This operation requests all audio encoder configurations of a device that are compatible
with a certain media profile. Each of the returned configurations shall be a valid
input parameter for the AddAudioSourceConfiguration command on the media profile.
The result varies depending on the capabilities, configurations and settings in
the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetCompatibleAudioEncoderConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetCompatibleAudioEncoderConfigurations_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetCompatibleAudioEncoderConfigurations* ns2__GetCompatibleAudioEncoderConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleAudioEncoderConfigurationsResponse* ns2__GetCompatibleAudioEncoderConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetCompatibleAudioEncoderConfigurations_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetCompatibleAudioEncoderConfigurations* ns2__GetCompatibleAudioEncoderConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleAudioEncoderConfigurationsResponse* ns2__GetCompatibleAudioEncoderConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetCompatibleAudioEncoderConfigurations_ document
//gsoap ns2  service method-encoding:	GetCompatibleAudioEncoderConfigurations_ literal
//gsoap ns2  service method-action:	GetCompatibleAudioEncoderConfigurations_ http://www.onvif.org/ver10/media/wsdl/GetCompatibleAudioEncoderConfigurations
int __ns2__GetCompatibleAudioEncoderConfigurations_(
    struct _ns2__GetCompatibleAudioEncoderConfigurations* ns2__GetCompatibleAudioEncoderConfigurations,	///< Request parameter
    struct _ns2__GetCompatibleAudioEncoderConfigurationsResponse* ns2__GetCompatibleAudioEncoderConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetCompatibleAudioSourceConfigurations_                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetCompatibleAudioSourceConfigurations_" of service binding "MediaBinding"

/**

Operation details:

This operation requests all audio source configurations of the NVT that are compatible
with a certain media profile. Each of the returned configurations shall be a valid
input parameter for the AddAudioEncoderConfiguration command on the media profile.
The result varies depending on the capabilities, configurations and settings in
the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetCompatibleAudioSourceConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetCompatibleAudioSourceConfigurations_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetCompatibleAudioSourceConfigurations* ns2__GetCompatibleAudioSourceConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleAudioSourceConfigurationsResponse* ns2__GetCompatibleAudioSourceConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetCompatibleAudioSourceConfigurations_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetCompatibleAudioSourceConfigurations* ns2__GetCompatibleAudioSourceConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleAudioSourceConfigurationsResponse* ns2__GetCompatibleAudioSourceConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetCompatibleAudioSourceConfigurations_ document
//gsoap ns2  service method-encoding:	GetCompatibleAudioSourceConfigurations_ literal
//gsoap ns2  service method-action:	GetCompatibleAudioSourceConfigurations_ http://www.onvif.org/ver10/media/wsdl/GetCompatibleAudioSourceConfigurations
int __ns2__GetCompatibleAudioSourceConfigurations_(
    struct _ns2__GetCompatibleAudioSourceConfigurations* ns2__GetCompatibleAudioSourceConfigurations,	///< Request parameter
    struct _ns2__GetCompatibleAudioSourceConfigurationsResponse* ns2__GetCompatibleAudioSourceConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetCompatibleVideoAnalyticsConfigurations_                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetCompatibleVideoAnalyticsConfigurations_" of service binding "MediaBinding"

/**

Operation details:

This operation requests all video analytic configurations of the device that are
compatible with a certain media profile. Each of the returned configurations shall
be a valid input parameter for the AddVideoAnalyticsConfiguration command on the
media profile. The result varies depending on the capabilities, configurations
and settings in the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetCompatibleVideoAnalyticsConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetCompatibleVideoAnalyticsConfigurations_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetCompatibleVideoAnalyticsConfigurations* ns2__GetCompatibleVideoAnalyticsConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleVideoAnalyticsConfigurationsResponse* ns2__GetCompatibleVideoAnalyticsConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetCompatibleVideoAnalyticsConfigurations_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetCompatibleVideoAnalyticsConfigurations* ns2__GetCompatibleVideoAnalyticsConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleVideoAnalyticsConfigurationsResponse* ns2__GetCompatibleVideoAnalyticsConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetCompatibleVideoAnalyticsConfigurations_ document
//gsoap ns2  service method-encoding:	GetCompatibleVideoAnalyticsConfigurations_ literal
//gsoap ns2  service method-action:	GetCompatibleVideoAnalyticsConfigurations_ http://www.onvif.org/ver10/media/wsdl/GetCompatibleVideoAnalyticsConfigurations
int __ns2__GetCompatibleVideoAnalyticsConfigurations_(
    struct _ns2__GetCompatibleVideoAnalyticsConfigurations* ns2__GetCompatibleVideoAnalyticsConfigurations,	///< Request parameter
    struct _ns2__GetCompatibleVideoAnalyticsConfigurationsResponse* ns2__GetCompatibleVideoAnalyticsConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetCompatibleMetadataConfigurations_                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetCompatibleMetadataConfigurations_" of service binding "MediaBinding"

/**

Operation details:

This operation requests all the metadata configurations of the device that are compatible
with a certain media profile. Each of the returned configurations shall be a valid
input parameter for the AddMetadataConfiguration command on the media profile.
The result varies depending on the capabilities, configurations and settings in
the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetCompatibleMetadataConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetCompatibleMetadataConfigurations_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetCompatibleMetadataConfigurations* ns2__GetCompatibleMetadataConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleMetadataConfigurationsResponse* ns2__GetCompatibleMetadataConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetCompatibleMetadataConfigurations_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetCompatibleMetadataConfigurations* ns2__GetCompatibleMetadataConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleMetadataConfigurationsResponse* ns2__GetCompatibleMetadataConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetCompatibleMetadataConfigurations_ document
//gsoap ns2  service method-encoding:	GetCompatibleMetadataConfigurations_ literal
//gsoap ns2  service method-action:	GetCompatibleMetadataConfigurations_ http://www.onvif.org/ver10/media/wsdl/GetCompatibleMetadataConfigurations
int __ns2__GetCompatibleMetadataConfigurations_(
    struct _ns2__GetCompatibleMetadataConfigurations* ns2__GetCompatibleMetadataConfigurations,	///< Request parameter
    struct _ns2__GetCompatibleMetadataConfigurationsResponse* ns2__GetCompatibleMetadataConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetCompatibleAudioOutputConfigurations_                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetCompatibleAudioOutputConfigurations_" of service binding "MediaBinding"

/**

Operation details:

This command lists all audio output configurations of a device that are compatible
with a certain media profile. Each returned configuration shall be a valid input
for the 
AddAudioOutputConfiguration command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetCompatibleAudioOutputConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetCompatibleAudioOutputConfigurations_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetCompatibleAudioOutputConfigurations* ns2__GetCompatibleAudioOutputConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleAudioOutputConfigurationsResponse* ns2__GetCompatibleAudioOutputConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetCompatibleAudioOutputConfigurations_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetCompatibleAudioOutputConfigurations* ns2__GetCompatibleAudioOutputConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleAudioOutputConfigurationsResponse* ns2__GetCompatibleAudioOutputConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetCompatibleAudioOutputConfigurations_ document
//gsoap ns2  service method-encoding:	GetCompatibleAudioOutputConfigurations_ literal
//gsoap ns2  service method-action:	GetCompatibleAudioOutputConfigurations_ http://www.onvif.org/ver10/media/wsdl/GetCompatibleAudioOutputConfigurations
int __ns2__GetCompatibleAudioOutputConfigurations_(
    struct _ns2__GetCompatibleAudioOutputConfigurations* ns2__GetCompatibleAudioOutputConfigurations,	///< Request parameter
    struct _ns2__GetCompatibleAudioOutputConfigurationsResponse* ns2__GetCompatibleAudioOutputConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetCompatibleAudioDecoderConfigurations_                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetCompatibleAudioDecoderConfigurations_" of service binding "MediaBinding"

/**

Operation details:

This operation lists all the audio decoder configurations of the device that are
compatible with a certain media profile. Each of the returned configurations shall
be a valid input parameter for the AddAudioDecoderConfiguration command on the
media profile.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetCompatibleAudioDecoderConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetCompatibleAudioDecoderConfigurations_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetCompatibleAudioDecoderConfigurations* ns2__GetCompatibleAudioDecoderConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleAudioDecoderConfigurationsResponse* ns2__GetCompatibleAudioDecoderConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetCompatibleAudioDecoderConfigurations_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetCompatibleAudioDecoderConfigurations* ns2__GetCompatibleAudioDecoderConfigurations,
    // response parameters:
    struct _ns2__GetCompatibleAudioDecoderConfigurationsResponse* ns2__GetCompatibleAudioDecoderConfigurationsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetCompatibleAudioDecoderConfigurations_ document
//gsoap ns2  service method-encoding:	GetCompatibleAudioDecoderConfigurations_ literal
//gsoap ns2  service method-action:	GetCompatibleAudioDecoderConfigurations_ http://www.onvif.org/ver10/media/wsdl/GetCompatibleAudioDecoderConfigurations
int __ns2__GetCompatibleAudioDecoderConfigurations_(
    struct _ns2__GetCompatibleAudioDecoderConfigurations* ns2__GetCompatibleAudioDecoderConfigurations,	///< Request parameter
    struct _ns2__GetCompatibleAudioDecoderConfigurationsResponse* ns2__GetCompatibleAudioDecoderConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__SetVideoSourceConfiguration_                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__SetVideoSourceConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation modifies a video source configuration. The ForcePersistence flag
indicates if the changes shall remain after reboot of the NVT. Running streams
using this configuration may be immediately updated according to the new settings.
The changes are not guaranteed to take effect unless the client requests a new
stream URI and restarts any affected stream. NVC methods for changing a running
stream are out of scope for this specification.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/SetVideoSourceConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__SetVideoSourceConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__SetVideoSourceConfiguration* ns2__SetVideoSourceConfiguration,
    // response parameters:
    struct _ns2__SetVideoSourceConfigurationResponse* ns2__SetVideoSourceConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__SetVideoSourceConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__SetVideoSourceConfiguration* ns2__SetVideoSourceConfiguration,
    // response parameters:
    struct _ns2__SetVideoSourceConfigurationResponse* ns2__SetVideoSourceConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	SetVideoSourceConfiguration_ document
//gsoap ns2  service method-encoding:	SetVideoSourceConfiguration_ literal
//gsoap ns2  service method-action:	SetVideoSourceConfiguration_ http://www.onvif.org/ver10/media/wsdl/SetVideoSourceConfiguration
int __ns2__SetVideoSourceConfiguration_(
    struct _ns2__SetVideoSourceConfiguration* ns2__SetVideoSourceConfiguration,	///< Request parameter
    struct _ns2__SetVideoSourceConfigurationResponse* ns2__SetVideoSourceConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__SetVideoEncoderConfiguration_                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__SetVideoEncoderConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation modifies a video encoder configuration. The ForcePersistence flag
indicates if the changes shall remain after reboot of the NVT. Changes in the Multicast
settings shall always be persistent. Running streams using this configuration may
be immediately updated according to the new settings. The changes are not guaranteed
to take effect unless the client requests a new stream URI and restarts any affected
stream. NVC methods for changing a running stream are out of scope for this specification.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/SetVideoEncoderConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__SetVideoEncoderConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__SetVideoEncoderConfiguration* ns2__SetVideoEncoderConfiguration,
    // response parameters:
    struct _ns2__SetVideoEncoderConfigurationResponse* ns2__SetVideoEncoderConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__SetVideoEncoderConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__SetVideoEncoderConfiguration* ns2__SetVideoEncoderConfiguration,
    // response parameters:
    struct _ns2__SetVideoEncoderConfigurationResponse* ns2__SetVideoEncoderConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	SetVideoEncoderConfiguration_ document
//gsoap ns2  service method-encoding:	SetVideoEncoderConfiguration_ literal
//gsoap ns2  service method-action:	SetVideoEncoderConfiguration_ http://www.onvif.org/ver10/media/wsdl/SetVideoEncoderConfiguration
int __ns2__SetVideoEncoderConfiguration_(
    struct _ns2__SetVideoEncoderConfiguration* ns2__SetVideoEncoderConfiguration,	///< Request parameter
    struct _ns2__SetVideoEncoderConfigurationResponse* ns2__SetVideoEncoderConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__SetAudioSourceConfiguration_                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__SetAudioSourceConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation modifies an audio source configuration. The ForcePersistence flag
indicates if
the changes shall remain after reboot of the NVT. Running streams using this configuration
may be immediately updated according to the new settings. The changes are not guaranteed
to take effect unless the client requests a new stream URI and restarts any affected
stream
NVC methods for changing a running stream are out of scope for this specification.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/SetAudioSourceConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__SetAudioSourceConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__SetAudioSourceConfiguration* ns2__SetAudioSourceConfiguration,
    // response parameters:
    struct _ns2__SetAudioSourceConfigurationResponse* ns2__SetAudioSourceConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__SetAudioSourceConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__SetAudioSourceConfiguration* ns2__SetAudioSourceConfiguration,
    // response parameters:
    struct _ns2__SetAudioSourceConfigurationResponse* ns2__SetAudioSourceConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	SetAudioSourceConfiguration_ document
//gsoap ns2  service method-encoding:	SetAudioSourceConfiguration_ literal
//gsoap ns2  service method-action:	SetAudioSourceConfiguration_ http://www.onvif.org/ver10/media/wsdl/SetAudioSourceConfiguration
int __ns2__SetAudioSourceConfiguration_(
    struct _ns2__SetAudioSourceConfiguration* ns2__SetAudioSourceConfiguration,	///< Request parameter
    struct _ns2__SetAudioSourceConfigurationResponse* ns2__SetAudioSourceConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__SetAudioEncoderConfiguration_                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__SetAudioEncoderConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation modifies an audio encoder configuration. The ForcePersistence flag
indicates if
the changes shall remain after reboot of the NVT. Running streams using this configuration
may be immediately updated
according to the new settings. The changes are not guaranteed to take effect unless
the client
requests a new stream URI and restarts any affected streams. NVC methods for changing
a
running stream are out of scope for this specification.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/SetAudioEncoderConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__SetAudioEncoderConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__SetAudioEncoderConfiguration* ns2__SetAudioEncoderConfiguration,
    // response parameters:
    struct _ns2__SetAudioEncoderConfigurationResponse* ns2__SetAudioEncoderConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__SetAudioEncoderConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__SetAudioEncoderConfiguration* ns2__SetAudioEncoderConfiguration,
    // response parameters:
    struct _ns2__SetAudioEncoderConfigurationResponse* ns2__SetAudioEncoderConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	SetAudioEncoderConfiguration_ document
//gsoap ns2  service method-encoding:	SetAudioEncoderConfiguration_ literal
//gsoap ns2  service method-action:	SetAudioEncoderConfiguration_ http://www.onvif.org/ver10/media/wsdl/SetAudioEncoderConfiguration
int __ns2__SetAudioEncoderConfiguration_(
    struct _ns2__SetAudioEncoderConfiguration* ns2__SetAudioEncoderConfiguration,	///< Request parameter
    struct _ns2__SetAudioEncoderConfigurationResponse* ns2__SetAudioEncoderConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__SetVideoAnalyticsConfiguration_                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__SetVideoAnalyticsConfiguration_" of service binding "MediaBinding"

/**

Operation details:

A video analytics configuration is modified using this command. The ForcePersistence
flag
indicates if the changes shall remain after reboot of the device or not. Running
streams using
this configuration shall be immediately updated according to the new settings.
Otherwise
inconsistencies can occur between the scene description processed by the rule engine
and
the notifications produced by analytics engine and rule engine which reference
the very same
video analytics configuration token.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/SetVideoAnalyticsConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__SetVideoAnalyticsConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__SetVideoAnalyticsConfiguration* ns2__SetVideoAnalyticsConfiguration,
    // response parameters:
    struct _ns2__SetVideoAnalyticsConfigurationResponse* ns2__SetVideoAnalyticsConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__SetVideoAnalyticsConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__SetVideoAnalyticsConfiguration* ns2__SetVideoAnalyticsConfiguration,
    // response parameters:
    struct _ns2__SetVideoAnalyticsConfigurationResponse* ns2__SetVideoAnalyticsConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	SetVideoAnalyticsConfiguration_ document
//gsoap ns2  service method-encoding:	SetVideoAnalyticsConfiguration_ literal
//gsoap ns2  service method-action:	SetVideoAnalyticsConfiguration_ http://www.onvif.org/ver10/media/wsdl/SetVideoAnalyticsConfiguration
int __ns2__SetVideoAnalyticsConfiguration_(
    struct _ns2__SetVideoAnalyticsConfiguration* ns2__SetVideoAnalyticsConfiguration,	///< Request parameter
    struct _ns2__SetVideoAnalyticsConfigurationResponse* ns2__SetVideoAnalyticsConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__SetMetadataConfiguration_                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__SetMetadataConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation modifies a metadata configuration. The ForcePersistence flag indicates
if the
changes shall remain after reboot of the device. Changes in the Multicast settings
shall
always be persistent. Running streams using this configuration may be updated immediately
according to the new settings. The changes are not guaranteed to take effect unless
the client
requests a new stream URI and restarts any affected streams. NVC methods for changing
a
running stream are out of scope for this specification.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/SetMetadataConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__SetMetadataConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__SetMetadataConfiguration* ns2__SetMetadataConfiguration,
    // response parameters:
    struct _ns2__SetMetadataConfigurationResponse* ns2__SetMetadataConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__SetMetadataConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__SetMetadataConfiguration* ns2__SetMetadataConfiguration,
    // response parameters:
    struct _ns2__SetMetadataConfigurationResponse* ns2__SetMetadataConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	SetMetadataConfiguration_ document
//gsoap ns2  service method-encoding:	SetMetadataConfiguration_ literal
//gsoap ns2  service method-action:	SetMetadataConfiguration_ http://www.onvif.org/ver10/media/wsdl/SetMetadataConfiguration
int __ns2__SetMetadataConfiguration_(
    struct _ns2__SetMetadataConfiguration* ns2__SetMetadataConfiguration,	///< Request parameter
    struct _ns2__SetMetadataConfigurationResponse* ns2__SetMetadataConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__SetAudioOutputConfiguration_                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__SetAudioOutputConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation modifies an audio output configuration. The ForcePersistence flag
indicates if
the changes shall remain after reboot of the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/SetAudioOutputConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__SetAudioOutputConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__SetAudioOutputConfiguration* ns2__SetAudioOutputConfiguration,
    // response parameters:
    struct _ns2__SetAudioOutputConfigurationResponse* ns2__SetAudioOutputConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__SetAudioOutputConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__SetAudioOutputConfiguration* ns2__SetAudioOutputConfiguration,
    // response parameters:
    struct _ns2__SetAudioOutputConfigurationResponse* ns2__SetAudioOutputConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	SetAudioOutputConfiguration_ document
//gsoap ns2  service method-encoding:	SetAudioOutputConfiguration_ literal
//gsoap ns2  service method-action:	SetAudioOutputConfiguration_ http://www.onvif.org/ver10/media/wsdl/SetAudioOutputConfiguration
int __ns2__SetAudioOutputConfiguration_(
    struct _ns2__SetAudioOutputConfiguration* ns2__SetAudioOutputConfiguration,	///< Request parameter
    struct _ns2__SetAudioOutputConfigurationResponse* ns2__SetAudioOutputConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__SetAudioDecoderConfiguration_                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__SetAudioDecoderConfiguration_" of service binding "MediaBinding"

/**

Operation details:

This operation modifies an audio decoder configuration. The ForcePersistence flag
indicates if
the changes shall remain after reboot of the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/SetAudioDecoderConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__SetAudioDecoderConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__SetAudioDecoderConfiguration* ns2__SetAudioDecoderConfiguration,
    // response parameters:
    struct _ns2__SetAudioDecoderConfigurationResponse* ns2__SetAudioDecoderConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__SetAudioDecoderConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns2__SetAudioDecoderConfiguration* ns2__SetAudioDecoderConfiguration,
    // response parameters:
    struct _ns2__SetAudioDecoderConfigurationResponse* ns2__SetAudioDecoderConfigurationResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	SetAudioDecoderConfiguration_ document
//gsoap ns2  service method-encoding:	SetAudioDecoderConfiguration_ literal
//gsoap ns2  service method-action:	SetAudioDecoderConfiguration_ http://www.onvif.org/ver10/media/wsdl/SetAudioDecoderConfiguration
int __ns2__SetAudioDecoderConfiguration_(
    struct _ns2__SetAudioDecoderConfiguration* ns2__SetAudioDecoderConfiguration,	///< Request parameter
    struct _ns2__SetAudioDecoderConfigurationResponse* ns2__SetAudioDecoderConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetVideoSourceConfigurationOptions_                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetVideoSourceConfigurationOptions_" of service binding "MediaBinding"

/**

Operation details:

This operation returns the available options  (supported values and ranges for video
source configuration parameters) when the video source parameters are
reconfigured If a video source configuration is specified, the options shall concern
that
particular configuration. If a media profile is specified, the options shall be
compatible with
that media profile.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdlGetVideoSourceConfigurationOptions/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetVideoSourceConfigurationOptions_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetVideoSourceConfigurationOptions* ns2__GetVideoSourceConfigurationOptions,
    // response parameters:
    struct _ns2__GetVideoSourceConfigurationOptionsResponse* ns2__GetVideoSourceConfigurationOptionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetVideoSourceConfigurationOptions_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetVideoSourceConfigurationOptions* ns2__GetVideoSourceConfigurationOptions,
    // response parameters:
    struct _ns2__GetVideoSourceConfigurationOptionsResponse* ns2__GetVideoSourceConfigurationOptionsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetVideoSourceConfigurationOptions_ document
//gsoap ns2  service method-encoding:	GetVideoSourceConfigurationOptions_ literal
//gsoap ns2  service method-action:	GetVideoSourceConfigurationOptions_ http://www.onvif.org/ver10/media/wsdlGetVideoSourceConfigurationOptions/
int __ns2__GetVideoSourceConfigurationOptions_(
    struct _ns2__GetVideoSourceConfigurationOptions* ns2__GetVideoSourceConfigurationOptions,	///< Request parameter
    struct _ns2__GetVideoSourceConfigurationOptionsResponse* ns2__GetVideoSourceConfigurationOptionsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetVideoEncoderConfigurationOptions_                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetVideoEncoderConfigurationOptions_" of service binding "MediaBinding"

/**

Operation details:

This operation returns the available options (supported values and ranges for video
encoder 
				configuration parameters) when the video encoder
parameters are reconfigured. Devices prior to ONVIF 2.0 will
				only return the base encoder settings while devices
from 2.0 onwards will respond with both base and extension settings.<br/>
				This response contains the available video encoder
configuration options. If a video encoder configuration is specified, 
				the options shall concern that particular configuration.
If a media profile is specified, the options shall be 
				compatible with that media profile. If no tokens
are specified, the options shall be considered generic for the device.
			

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetVideoEncoderConfigurationOptions"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetVideoEncoderConfigurationOptions_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetVideoEncoderConfigurationOptions* ns2__GetVideoEncoderConfigurationOptions,
    // response parameters:
    struct _ns2__GetVideoEncoderConfigurationOptionsResponse* ns2__GetVideoEncoderConfigurationOptionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetVideoEncoderConfigurationOptions_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetVideoEncoderConfigurationOptions* ns2__GetVideoEncoderConfigurationOptions,
    // response parameters:
    struct _ns2__GetVideoEncoderConfigurationOptionsResponse* ns2__GetVideoEncoderConfigurationOptionsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetVideoEncoderConfigurationOptions_ document
//gsoap ns2  service method-encoding:	GetVideoEncoderConfigurationOptions_ literal
//gsoap ns2  service method-action:	GetVideoEncoderConfigurationOptions_ http://www.onvif.org/ver10/media/wsdl/GetVideoEncoderConfigurationOptions
int __ns2__GetVideoEncoderConfigurationOptions_(
    struct _ns2__GetVideoEncoderConfigurationOptions* ns2__GetVideoEncoderConfigurationOptions,	///< Request parameter
    struct _ns2__GetVideoEncoderConfigurationOptionsResponse* ns2__GetVideoEncoderConfigurationOptionsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioSourceConfigurationOptions_                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioSourceConfigurationOptions_" of service binding "MediaBinding"

/**

Operation details:

This operation returns the available options (supported values and ranges for audio
source configuration parameters) when the audio source parameters are
reconfigured. If an audio source configuration is specified, the options shall
concern that
particular configuration. If a media profile is specified, the options shall be
compatible with
that media profile.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioSourceConfigurationOptions"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioSourceConfigurationOptions_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioSourceConfigurationOptions* ns2__GetAudioSourceConfigurationOptions,
    // response parameters:
    struct _ns2__GetAudioSourceConfigurationOptionsResponse* ns2__GetAudioSourceConfigurationOptionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioSourceConfigurationOptions_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioSourceConfigurationOptions* ns2__GetAudioSourceConfigurationOptions,
    // response parameters:
    struct _ns2__GetAudioSourceConfigurationOptionsResponse* ns2__GetAudioSourceConfigurationOptionsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioSourceConfigurationOptions_ document
//gsoap ns2  service method-encoding:	GetAudioSourceConfigurationOptions_ literal
//gsoap ns2  service method-action:	GetAudioSourceConfigurationOptions_ http://www.onvif.org/ver10/media/wsdl/GetAudioSourceConfigurationOptions
int __ns2__GetAudioSourceConfigurationOptions_(
    struct _ns2__GetAudioSourceConfigurationOptions* ns2__GetAudioSourceConfigurationOptions,	///< Request parameter
    struct _ns2__GetAudioSourceConfigurationOptionsResponse* ns2__GetAudioSourceConfigurationOptionsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioEncoderConfigurationOptions_                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioEncoderConfigurationOptions_" of service binding "MediaBinding"

/**

Operation details:

This operation returns the available options  (supported values and ranges for audio
encoder configuration parameters) when the audio encoder parameters are
reconfigured.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioEncoderConfigurationOptions"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioEncoderConfigurationOptions_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioEncoderConfigurationOptions* ns2__GetAudioEncoderConfigurationOptions,
    // response parameters:
    struct _ns2__GetAudioEncoderConfigurationOptionsResponse* ns2__GetAudioEncoderConfigurationOptionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioEncoderConfigurationOptions_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioEncoderConfigurationOptions* ns2__GetAudioEncoderConfigurationOptions,
    // response parameters:
    struct _ns2__GetAudioEncoderConfigurationOptionsResponse* ns2__GetAudioEncoderConfigurationOptionsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioEncoderConfigurationOptions_ document
//gsoap ns2  service method-encoding:	GetAudioEncoderConfigurationOptions_ literal
//gsoap ns2  service method-action:	GetAudioEncoderConfigurationOptions_ http://www.onvif.org/ver10/media/wsdl/GetAudioEncoderConfigurationOptions
int __ns2__GetAudioEncoderConfigurationOptions_(
    struct _ns2__GetAudioEncoderConfigurationOptions* ns2__GetAudioEncoderConfigurationOptions,	///< Request parameter
    struct _ns2__GetAudioEncoderConfigurationOptionsResponse* ns2__GetAudioEncoderConfigurationOptionsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetMetadataConfigurationOptions_                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetMetadataConfigurationOptions_" of service binding "MediaBinding"

/**

Operation details:

This operation returns the available options (supported values and ranges for metadata
configuration parameters) for changing the metadata configuration.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetMetadataConfigurationOptions"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetMetadataConfigurationOptions_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetMetadataConfigurationOptions* ns2__GetMetadataConfigurationOptions,
    // response parameters:
    struct _ns2__GetMetadataConfigurationOptionsResponse* ns2__GetMetadataConfigurationOptionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetMetadataConfigurationOptions_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetMetadataConfigurationOptions* ns2__GetMetadataConfigurationOptions,
    // response parameters:
    struct _ns2__GetMetadataConfigurationOptionsResponse* ns2__GetMetadataConfigurationOptionsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetMetadataConfigurationOptions_ document
//gsoap ns2  service method-encoding:	GetMetadataConfigurationOptions_ literal
//gsoap ns2  service method-action:	GetMetadataConfigurationOptions_ http://www.onvif.org/ver10/media/wsdl/GetMetadataConfigurationOptions
int __ns2__GetMetadataConfigurationOptions_(
    struct _ns2__GetMetadataConfigurationOptions* ns2__GetMetadataConfigurationOptions,	///< Request parameter
    struct _ns2__GetMetadataConfigurationOptionsResponse* ns2__GetMetadataConfigurationOptionsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioOutputConfigurationOptions_                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioOutputConfigurationOptions_" of service binding "MediaBinding"

/**

Operation details:

This operation returns the available options (supported values and ranges for audio
output configuration parameters) for configuring an audio output.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioOutputConfigurationOptions"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioOutputConfigurationOptions_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioOutputConfigurationOptions* ns2__GetAudioOutputConfigurationOptions,
    // response parameters:
    struct _ns2__GetAudioOutputConfigurationOptionsResponse* ns2__GetAudioOutputConfigurationOptionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioOutputConfigurationOptions_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioOutputConfigurationOptions* ns2__GetAudioOutputConfigurationOptions,
    // response parameters:
    struct _ns2__GetAudioOutputConfigurationOptionsResponse* ns2__GetAudioOutputConfigurationOptionsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioOutputConfigurationOptions_ document
//gsoap ns2  service method-encoding:	GetAudioOutputConfigurationOptions_ literal
//gsoap ns2  service method-action:	GetAudioOutputConfigurationOptions_ http://www.onvif.org/ver10/media/wsdl/GetAudioOutputConfigurationOptions
int __ns2__GetAudioOutputConfigurationOptions_(
    struct _ns2__GetAudioOutputConfigurationOptions* ns2__GetAudioOutputConfigurationOptions,	///< Request parameter
    struct _ns2__GetAudioOutputConfigurationOptionsResponse* ns2__GetAudioOutputConfigurationOptionsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAudioDecoderConfigurationOptions_                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAudioDecoderConfigurationOptions_" of service binding "MediaBinding"

/**

Operation details:

This command list the audio decoding capabilities for a given profile and configuration
of a
device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetAudioDecoderConfigurationOptions"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAudioDecoderConfigurationOptions_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetAudioDecoderConfigurationOptions* ns2__GetAudioDecoderConfigurationOptions,
    // response parameters:
    struct _ns2__GetAudioDecoderConfigurationOptionsResponse* ns2__GetAudioDecoderConfigurationOptionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAudioDecoderConfigurationOptions_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetAudioDecoderConfigurationOptions* ns2__GetAudioDecoderConfigurationOptions,
    // response parameters:
    struct _ns2__GetAudioDecoderConfigurationOptionsResponse* ns2__GetAudioDecoderConfigurationOptionsResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetAudioDecoderConfigurationOptions_ document
//gsoap ns2  service method-encoding:	GetAudioDecoderConfigurationOptions_ literal
//gsoap ns2  service method-action:	GetAudioDecoderConfigurationOptions_ http://www.onvif.org/ver10/media/wsdl/GetAudioDecoderConfigurationOptions
int __ns2__GetAudioDecoderConfigurationOptions_(
    struct _ns2__GetAudioDecoderConfigurationOptions* ns2__GetAudioDecoderConfigurationOptions,	///< Request parameter
    struct _ns2__GetAudioDecoderConfigurationOptionsResponse* ns2__GetAudioDecoderConfigurationOptionsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetGuaranteedNumberOfVideoEncoderInstances_                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetGuaranteedNumberOfVideoEncoderInstances_" of service binding "MediaBinding"

/**

Operation details:

The GetGuaranteedNumberOfVideoEncoderInstances command can be used to request the
minimum number of guaranteed video encoder instances (applications) per Video Source
Configuration.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/ GetGuaranteedNumberOfVideoEncoderInstances"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetGuaranteedNumberOfVideoEncoderInstances_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetGuaranteedNumberOfVideoEncoderInstances* ns2__GetGuaranteedNumberOfVideoEncoderInstances,
    // response parameters:
    struct _ns2__GetGuaranteedNumberOfVideoEncoderInstancesResponse* ns2__GetGuaranteedNumberOfVideoEncoderInstancesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetGuaranteedNumberOfVideoEncoderInstances_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetGuaranteedNumberOfVideoEncoderInstances* ns2__GetGuaranteedNumberOfVideoEncoderInstances,
    // response parameters:
    struct _ns2__GetGuaranteedNumberOfVideoEncoderInstancesResponse* ns2__GetGuaranteedNumberOfVideoEncoderInstancesResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetGuaranteedNumberOfVideoEncoderInstances_ document
//gsoap ns2  service method-encoding:	GetGuaranteedNumberOfVideoEncoderInstances_ literal
//gsoap ns2  service method-action:	GetGuaranteedNumberOfVideoEncoderInstances_ http://www.onvif.org/ver10/media/wsdl/ GetGuaranteedNumberOfVideoEncoderInstances
int __ns2__GetGuaranteedNumberOfVideoEncoderInstances_(
    struct _ns2__GetGuaranteedNumberOfVideoEncoderInstances* ns2__GetGuaranteedNumberOfVideoEncoderInstances,	///< Request parameter
    struct _ns2__GetGuaranteedNumberOfVideoEncoderInstancesResponse* ns2__GetGuaranteedNumberOfVideoEncoderInstancesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetStreamUri_                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetStreamUri_" of service binding "MediaBinding"

/**

Operation details:

This operation requests a URI that can be used to initiate a live media stream using
RTSP as
the control protocol. The returned URI shall remain valid indefinitely even if
the profile is
changed. The ValidUntilConnect, ValidUntilReboot and Timeout Parameter shall be
set
accordingly (ValidUntilConnect=false, ValidUntilReboot=false, timeout=PT0S). <br/>
				The correct syntax for the StreamSetup element for
these media stream setups defined in 5.1.1 of the streaming specification are as
follows:
				<ol><li>RTP unicast over UDP: StreamType = "RTP_unicast",
TransportProtocol = "UDP"</li>
					<li>RTP over RTSP over HTTP over TCP: StreamType
= "RTP_unicast", TransportProtocol = "HTTP"</li>
					<li>RTP over RTSP over TCP: StreamType =
"RTP_unicast", TransportProtocol = "RTSP"</li>
				</ol><br/>
If a multicast stream is requested the VideoEncoderConfiguration, AudioEncoderConfiguration
and MetadataConfiguration element inside the corresponding 
media profile must be configured with valid multicast settings.<br/>
For full compatibility with other ONVIF services a device should not generate Uris
longer than
128 octets.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetStreamUri"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetStreamUri_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetStreamUri*          ns2__GetStreamUri,
    // response parameters:
    struct _ns2__GetStreamUriResponse*  ns2__GetStreamUriResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetStreamUri_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetStreamUri*          ns2__GetStreamUri,
    // response parameters:
    struct _ns2__GetStreamUriResponse*  ns2__GetStreamUriResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetStreamUri_ document
//gsoap ns2  service method-encoding:	GetStreamUri_ literal
//gsoap ns2  service method-action:	GetStreamUri_ http://www.onvif.org/ver10/media/wsdl/GetStreamUri
int __ns2__GetStreamUri_(
    struct _ns2__GetStreamUri*          ns2__GetStreamUri,	///< Request parameter
    struct _ns2__GetStreamUriResponse*  ns2__GetStreamUriResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__StartMulticastStreaming_                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__StartMulticastStreaming_" of service binding "MediaBinding"

/**

Operation details:

This command starts multicast streaming using a specified media profile of an NVT.
Streaming continues until StopMulticastStreaming is called for the same Profile.
The
streaming shall continue after a reboot of the NVT until a StopMulticastStreaming
request is
received. The multicast address, port and TTL are configured in the
VideoEncoderConfiguration, AudioEncoderConfiguration and MetadataConfiguration
respectively.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/StartMulticastStreaming"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__StartMulticastStreaming_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__StartMulticastStreaming* ns2__StartMulticastStreaming,
    // response parameters:
    struct _ns2__StartMulticastStreamingResponse* ns2__StartMulticastStreamingResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__StartMulticastStreaming_(
    struct soap *soap,
    // request parameters:
    struct _ns2__StartMulticastStreaming* ns2__StartMulticastStreaming,
    // response parameters:
    struct _ns2__StartMulticastStreamingResponse* ns2__StartMulticastStreamingResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	StartMulticastStreaming_ document
//gsoap ns2  service method-encoding:	StartMulticastStreaming_ literal
//gsoap ns2  service method-action:	StartMulticastStreaming_ http://www.onvif.org/ver10/media/wsdl/StartMulticastStreaming
int __ns2__StartMulticastStreaming_(
    struct _ns2__StartMulticastStreaming* ns2__StartMulticastStreaming,	///< Request parameter
    struct _ns2__StartMulticastStreamingResponse* ns2__StartMulticastStreamingResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__StopMulticastStreaming_                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__StopMulticastStreaming_" of service binding "MediaBinding"

/**

Operation details:

This command stop multicast streaming using a specified media profile of an NVT

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/StopMulticastStreaming"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__StopMulticastStreaming_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__StopMulticastStreaming* ns2__StopMulticastStreaming,
    // response parameters:
    struct _ns2__StopMulticastStreamingResponse* ns2__StopMulticastStreamingResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__StopMulticastStreaming_(
    struct soap *soap,
    // request parameters:
    struct _ns2__StopMulticastStreaming* ns2__StopMulticastStreaming,
    // response parameters:
    struct _ns2__StopMulticastStreamingResponse* ns2__StopMulticastStreamingResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	StopMulticastStreaming_ document
//gsoap ns2  service method-encoding:	StopMulticastStreaming_ literal
//gsoap ns2  service method-action:	StopMulticastStreaming_ http://www.onvif.org/ver10/media/wsdl/StopMulticastStreaming
int __ns2__StopMulticastStreaming_(
    struct _ns2__StopMulticastStreaming* ns2__StopMulticastStreaming,	///< Request parameter
    struct _ns2__StopMulticastStreamingResponse* ns2__StopMulticastStreamingResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__SetSynchronizationPoint_                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__SetSynchronizationPoint_" of service binding "MediaBinding"

/**

Operation details:

Synchronization points allow clients to decode and correctly use all data after
the
synchronization point.
For example, if a video stream is configured with a large I-frame distance and
a client loses a
single packet, the client does not display video until the next I-frame is transmitted.
In such
cases, the client can request a Synchronization Point which enforces the NVT to
add an I-Frame as soon as possible. Clients can request Synchronization Points
for profiles. The NVT
shall add synchronization points for all streams associated with this profile.
Similarly, a synchronization point is used to get an update on full PTZ or event
status through
the metadata stream.
If a video stream is associated with the profile, an I-frame shall be added to
this video stream.
If a PTZ metadata stream is associated to the profile,
the PTZ position shall be repeated within the metadata stream.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/SetSynchronizationPoint"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__SetSynchronizationPoint_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__SetSynchronizationPoint* ns2__SetSynchronizationPoint,
    // response parameters:
    struct _ns2__SetSynchronizationPointResponse* ns2__SetSynchronizationPointResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__SetSynchronizationPoint_(
    struct soap *soap,
    // request parameters:
    struct _ns2__SetSynchronizationPoint* ns2__SetSynchronizationPoint,
    // response parameters:
    struct _ns2__SetSynchronizationPointResponse* ns2__SetSynchronizationPointResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	SetSynchronizationPoint_ document
//gsoap ns2  service method-encoding:	SetSynchronizationPoint_ literal
//gsoap ns2  service method-action:	SetSynchronizationPoint_ http://www.onvif.org/ver10/media/wsdl/SetSynchronizationPoint
int __ns2__SetSynchronizationPoint_(
    struct _ns2__SetSynchronizationPoint* ns2__SetSynchronizationPoint,	///< Request parameter
    struct _ns2__SetSynchronizationPointResponse* ns2__SetSynchronizationPointResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetSnapshotUri_                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetSnapshotUri_" of service binding "MediaBinding"

/**

Operation details:

A client uses the GetSnapshotUri command to obtain a JPEG snapshot from the
NVT. The returned URI shall remain valid indefinitely even if the profile is changed.
The
ValidUntilConnect, ValidUntilReboot and Timeout Parameter shall be set accordingly
(ValidUntilConnect=false, ValidUntilReboot=false, timeout=PT0S). The URI can be
used for
acquiring a JPEG image through a HTTP GET operation. The image encoding will always
be
JPEG regardless of the encoding setting in the media profile. The Jpeg settings
(like resolution or quality) shall be taken from the profile

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/media/wsdl/GetSnapshotUri"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetSnapshotUri_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns2__GetSnapshotUri*        ns2__GetSnapshotUri,
    // response parameters:
    struct _ns2__GetSnapshotUriResponse* ns2__GetSnapshotUriResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetSnapshotUri_(
    struct soap *soap,
    // request parameters:
    struct _ns2__GetSnapshotUri*        ns2__GetSnapshotUri,
    // response parameters:
    struct _ns2__GetSnapshotUriResponse* ns2__GetSnapshotUriResponse
  );
@endcode

*/

//gsoap ns2  service method-style:	GetSnapshotUri_ document
//gsoap ns2  service method-encoding:	GetSnapshotUri_ literal
//gsoap ns2  service method-action:	GetSnapshotUri_ http://www.onvif.org/ver10/media/wsdl/GetSnapshotUri
int __ns2__GetSnapshotUri_(
    struct _ns2__GetSnapshotUri*        ns2__GetSnapshotUri,	///< Request parameter
    struct _ns2__GetSnapshotUriResponse* ns2__GetSnapshotUriResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   NotificationConsumerBinding                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns20__Notify                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns20__Notify" of service binding "NotificationConsumerBinding"

/**

Operation details:


  - One-way message

  - SOAP document/literal style messaging

  - SOAP action="http://docs.oasis-open.org/wsn/bw-2/NotificationConsumer/Notify"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns20__Notify(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns4__Notify*                ns4__Notify,
    // response parameters:
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns20__Notify(
    struct soap *soap,
    // request parameters:
    struct _ns4__Notify*                ns4__Notify,
    // response parameters:
  );
@endcode

*/

//gsoap ns20 service method-style:	Notify document
//gsoap ns20 service method-encoding:	Notify literal
//gsoap ns20 service method-action:	Notify http://docs.oasis-open.org/wsn/bw-2/NotificationConsumer/Notify
int __ns20__Notify(
    struct _ns4__Notify*                ns4__Notify,	///< Request parameter
    void	///< One-way message: no response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   PullPointBinding                                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns21__GetMessages                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns21__GetMessages" of service binding "PullPointBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://docs.oasis-open.org/wsn/bw-2/PullPoint/GetMessagesRequest"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns21__GetMessages(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns4__GetMessages*           ns4__GetMessages,
    // response parameters:
    struct _ns4__GetMessagesResponse*   ns4__GetMessagesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns21__GetMessages(
    struct soap *soap,
    // request parameters:
    struct _ns4__GetMessages*           ns4__GetMessages,
    // response parameters:
    struct _ns4__GetMessagesResponse*   ns4__GetMessagesResponse
  );
@endcode

*/

//gsoap ns21 service method-style:	GetMessages document
//gsoap ns21 service method-encoding:	GetMessages literal
//gsoap ns21 service method-action:	GetMessages http://docs.oasis-open.org/wsn/bw-2/PullPoint/GetMessagesRequest
int __ns21__GetMessages(
    struct _ns4__GetMessages*           ns4__GetMessages,	///< Request parameter
    struct _ns4__GetMessagesResponse*   ns4__GetMessagesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns21__DestroyPullPoint                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns21__DestroyPullPoint" of service binding "PullPointBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://docs.oasis-open.org/wsn/bw-2/PullPoint/DestroyPullPointRequest"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns21__DestroyPullPoint(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns4__DestroyPullPoint*      ns4__DestroyPullPoint,
    // response parameters:
    struct _ns4__DestroyPullPointResponse* ns4__DestroyPullPointResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns21__DestroyPullPoint(
    struct soap *soap,
    // request parameters:
    struct _ns4__DestroyPullPoint*      ns4__DestroyPullPoint,
    // response parameters:
    struct _ns4__DestroyPullPointResponse* ns4__DestroyPullPointResponse
  );
@endcode

*/

//gsoap ns21 service method-style:	DestroyPullPoint document
//gsoap ns21 service method-encoding:	DestroyPullPoint literal
//gsoap ns21 service method-action:	DestroyPullPoint http://docs.oasis-open.org/wsn/bw-2/PullPoint/DestroyPullPointRequest
int __ns21__DestroyPullPoint(
    struct _ns4__DestroyPullPoint*      ns4__DestroyPullPoint,	///< Request parameter
    struct _ns4__DestroyPullPointResponse* ns4__DestroyPullPointResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns21__Notify                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns21__Notify" of service binding "PullPointBinding"

/**

Operation details:


  - One-way message

  - SOAP document/literal style messaging

  - SOAP action="http://docs.oasis-open.org/wsn/bw-2/PullPoint/Notify"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns21__Notify(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns4__Notify*                ns4__Notify,
    // response parameters:
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns21__Notify(
    struct soap *soap,
    // request parameters:
    struct _ns4__Notify*                ns4__Notify,
    // response parameters:
  );
@endcode

*/

//gsoap ns21 service method-style:	Notify document
//gsoap ns21 service method-encoding:	Notify literal
//gsoap ns21 service method-action:	Notify http://docs.oasis-open.org/wsn/bw-2/PullPoint/Notify
int __ns21__Notify(
    struct _ns4__Notify*                ns4__Notify,	///< Request parameter
    void	///< One-way message: no response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   CreatePullPointBinding                                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns22__CreatePullPoint                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns22__CreatePullPoint" of service binding "CreatePullPointBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://docs.oasis-open.org/wsn/bw-2/CreatePullPoint/CreatePullPointRequest"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns22__CreatePullPoint(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns4__CreatePullPoint*       ns4__CreatePullPoint,
    // response parameters:
    struct _ns4__CreatePullPointResponse* ns4__CreatePullPointResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns22__CreatePullPoint(
    struct soap *soap,
    // request parameters:
    struct _ns4__CreatePullPoint*       ns4__CreatePullPoint,
    // response parameters:
    struct _ns4__CreatePullPointResponse* ns4__CreatePullPointResponse
  );
@endcode

*/

//gsoap ns22 service method-style:	CreatePullPoint document
//gsoap ns22 service method-encoding:	CreatePullPoint literal
//gsoap ns22 service method-action:	CreatePullPoint http://docs.oasis-open.org/wsn/bw-2/CreatePullPoint/CreatePullPointRequest
int __ns22__CreatePullPoint(
    struct _ns4__CreatePullPoint*       ns4__CreatePullPoint,	///< Request parameter
    struct _ns4__CreatePullPointResponse* ns4__CreatePullPointResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   PausableSubscriptionManagerBinding                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns23__Renew                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns23__Renew" of service binding "PausableSubscriptionManagerBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/RenewRequest"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns23__Renew(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns4__Renew*                 ns4__Renew,
    // response parameters:
    struct _ns4__RenewResponse*         ns4__RenewResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns23__Renew(
    struct soap *soap,
    // request parameters:
    struct _ns4__Renew*                 ns4__Renew,
    // response parameters:
    struct _ns4__RenewResponse*         ns4__RenewResponse
  );
@endcode

*/

//gsoap ns23 service method-style:	Renew document
//gsoap ns23 service method-encoding:	Renew literal
//gsoap ns23 service method-action:	Renew http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/RenewRequest
int __ns23__Renew(
    struct _ns4__Renew*                 ns4__Renew,	///< Request parameter
    struct _ns4__RenewResponse*         ns4__RenewResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns23__Unsubscribe                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns23__Unsubscribe" of service binding "PausableSubscriptionManagerBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/UnsubscribeRequest"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns23__Unsubscribe(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns4__Unsubscribe*           ns4__Unsubscribe,
    // response parameters:
    struct _ns4__UnsubscribeResponse*   ns4__UnsubscribeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns23__Unsubscribe(
    struct soap *soap,
    // request parameters:
    struct _ns4__Unsubscribe*           ns4__Unsubscribe,
    // response parameters:
    struct _ns4__UnsubscribeResponse*   ns4__UnsubscribeResponse
  );
@endcode

*/

//gsoap ns23 service method-style:	Unsubscribe document
//gsoap ns23 service method-encoding:	Unsubscribe literal
//gsoap ns23 service method-action:	Unsubscribe http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/UnsubscribeRequest
int __ns23__Unsubscribe(
    struct _ns4__Unsubscribe*           ns4__Unsubscribe,	///< Request parameter
    struct _ns4__UnsubscribeResponse*   ns4__UnsubscribeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns23__PauseSubscription                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns23__PauseSubscription" of service binding "PausableSubscriptionManagerBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/PauseSubscriptionRequest"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns23__PauseSubscription(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns4__PauseSubscription*     ns4__PauseSubscription,
    // response parameters:
    struct _ns4__PauseSubscriptionResponse* ns4__PauseSubscriptionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns23__PauseSubscription(
    struct soap *soap,
    // request parameters:
    struct _ns4__PauseSubscription*     ns4__PauseSubscription,
    // response parameters:
    struct _ns4__PauseSubscriptionResponse* ns4__PauseSubscriptionResponse
  );
@endcode

*/

//gsoap ns23 service method-style:	PauseSubscription document
//gsoap ns23 service method-encoding:	PauseSubscription literal
//gsoap ns23 service method-action:	PauseSubscription http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/PauseSubscriptionRequest
int __ns23__PauseSubscription(
    struct _ns4__PauseSubscription*     ns4__PauseSubscription,	///< Request parameter
    struct _ns4__PauseSubscriptionResponse* ns4__PauseSubscriptionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns23__ResumeSubscription                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns23__ResumeSubscription" of service binding "PausableSubscriptionManagerBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/ResumeSubscriptionRequest"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns23__ResumeSubscription(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns4__ResumeSubscription*    ns4__ResumeSubscription,
    // response parameters:
    struct _ns4__ResumeSubscriptionResponse* ns4__ResumeSubscriptionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns23__ResumeSubscription(
    struct soap *soap,
    // request parameters:
    struct _ns4__ResumeSubscription*    ns4__ResumeSubscription,
    // response parameters:
    struct _ns4__ResumeSubscriptionResponse* ns4__ResumeSubscriptionResponse
  );
@endcode

*/

//gsoap ns23 service method-style:	ResumeSubscription document
//gsoap ns23 service method-encoding:	ResumeSubscription literal
//gsoap ns23 service method-action:	ResumeSubscription http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/ResumeSubscriptionRequest
int __ns23__ResumeSubscription(
    struct _ns4__ResumeSubscription*    ns4__ResumeSubscription,	///< Request parameter
    struct _ns4__ResumeSubscriptionResponse* ns4__ResumeSubscriptionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   DeviceBinding                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetDeviceInformation                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetDeviceInformation" of service binding "DeviceBinding"

/**

Operation details:

This operation gets basic device information from the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetDeviceInformation"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetDeviceInformation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetDeviceInformation*  ns8__GetDeviceInformation,
    // response parameters:
    struct _ns8__GetDeviceInformationResponse* ns8__GetDeviceInformationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetDeviceInformation(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetDeviceInformation*  ns8__GetDeviceInformation,
    // response parameters:
    struct _ns8__GetDeviceInformationResponse* ns8__GetDeviceInformationResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetDeviceInformation document
//gsoap ns8  service method-encoding:	GetDeviceInformation literal
//gsoap ns8  service method-action:	GetDeviceInformation http://www.onvif.org/ver10/device/wsdl/GetDeviceInformation
int __ns8__GetDeviceInformation(
    struct _ns8__GetDeviceInformation*  ns8__GetDeviceInformation,	///< Request parameter
    struct _ns8__GetDeviceInformationResponse* ns8__GetDeviceInformationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetSystemDateAndTime                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetSystemDateAndTime" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the device system date and time. The device shall support the
				configuration of the daylight saving setting and
of the manual system date and time (if
				applicable) or indication of NTP time (if applicable)
through the SetSystemDateAndTime
				command. <br/>
				If system time and date are set manually, the client
shall include UTCDateTime in the request.<br/>
				A TimeZone token which is not formed according to
the rules of IEEE 1003.1 section 8.3 is considered as invalid timezone.
			

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetSystemDateAndTime"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetSystemDateAndTime(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetSystemDateAndTime*  ns8__SetSystemDateAndTime,
    // response parameters:
    struct _ns8__SetSystemDateAndTimeResponse* ns8__SetSystemDateAndTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetSystemDateAndTime(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetSystemDateAndTime*  ns8__SetSystemDateAndTime,
    // response parameters:
    struct _ns8__SetSystemDateAndTimeResponse* ns8__SetSystemDateAndTimeResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetSystemDateAndTime document
//gsoap ns8  service method-encoding:	SetSystemDateAndTime literal
//gsoap ns8  service method-action:	SetSystemDateAndTime http://www.onvif.org/ver10/device/wsdl/SetSystemDateAndTime
int __ns8__SetSystemDateAndTime(
    struct _ns8__SetSystemDateAndTime*  ns8__SetSystemDateAndTime,	///< Request parameter
    struct _ns8__SetSystemDateAndTimeResponse* ns8__SetSystemDateAndTimeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetSystemDateAndTime                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetSystemDateAndTime" of service binding "DeviceBinding"

/**

Operation details:

This operation gets the device system date and time. The device shall support the
return of
				the daylight saving setting and of the manual system
date and time (if applicable) or indication
				of NTP time (if applicable) through the GetSystemDateAndTime
command.<br/>
				A device shall provide the UTCDateTime information.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetSystemDateAndTime"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetSystemDateAndTime(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetSystemDateAndTime*  ns8__GetSystemDateAndTime,
    // response parameters:
    struct _ns8__GetSystemDateAndTimeResponse* ns8__GetSystemDateAndTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetSystemDateAndTime(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetSystemDateAndTime*  ns8__GetSystemDateAndTime,
    // response parameters:
    struct _ns8__GetSystemDateAndTimeResponse* ns8__GetSystemDateAndTimeResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetSystemDateAndTime document
//gsoap ns8  service method-encoding:	GetSystemDateAndTime literal
//gsoap ns8  service method-action:	GetSystemDateAndTime http://www.onvif.org/ver10/device/wsdl/GetSystemDateAndTime
int __ns8__GetSystemDateAndTime(
    struct _ns8__GetSystemDateAndTime*  ns8__GetSystemDateAndTime,	///< Request parameter
    struct _ns8__GetSystemDateAndTimeResponse* ns8__GetSystemDateAndTimeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetSystemFactoryDefault                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetSystemFactoryDefault" of service binding "DeviceBinding"

/**

Operation details:

This operation reloads the parameters on the device to their factory default values.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetSystemFactoryDefault"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetSystemFactoryDefault(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetSystemFactoryDefault* ns8__SetSystemFactoryDefault,
    // response parameters:
    struct _ns8__SetSystemFactoryDefaultResponse* ns8__SetSystemFactoryDefaultResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetSystemFactoryDefault(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetSystemFactoryDefault* ns8__SetSystemFactoryDefault,
    // response parameters:
    struct _ns8__SetSystemFactoryDefaultResponse* ns8__SetSystemFactoryDefaultResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetSystemFactoryDefault document
//gsoap ns8  service method-encoding:	SetSystemFactoryDefault literal
//gsoap ns8  service method-action:	SetSystemFactoryDefault http://www.onvif.org/ver10/device/wsdl/SetSystemFactoryDefault
int __ns8__SetSystemFactoryDefault(
    struct _ns8__SetSystemFactoryDefault* ns8__SetSystemFactoryDefault,	///< Request parameter
    struct _ns8__SetSystemFactoryDefaultResponse* ns8__SetSystemFactoryDefaultResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__UpgradeSystemFirmware                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__UpgradeSystemFirmware" of service binding "DeviceBinding"

/**

Operation details:

This operation upgrades a device firmware version. After a successful upgrade the
response
				message is sent before the device reboots. The device
should support firmware upgrade
				through the UpgradeSystemFirmware command. The exact
format of the firmware data is
				outside the scope of this standard.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/UpgradeSystemFirmware"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__UpgradeSystemFirmware(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__UpgradeSystemFirmware* ns8__UpgradeSystemFirmware,
    // response parameters:
    struct _ns8__UpgradeSystemFirmwareResponse* ns8__UpgradeSystemFirmwareResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__UpgradeSystemFirmware(
    struct soap *soap,
    // request parameters:
    struct _ns8__UpgradeSystemFirmware* ns8__UpgradeSystemFirmware,
    // response parameters:
    struct _ns8__UpgradeSystemFirmwareResponse* ns8__UpgradeSystemFirmwareResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	UpgradeSystemFirmware document
//gsoap ns8  service method-encoding:	UpgradeSystemFirmware literal
//gsoap ns8  service method-action:	UpgradeSystemFirmware http://www.onvif.org/ver10/device/wsdl/UpgradeSystemFirmware
int __ns8__UpgradeSystemFirmware(
    struct _ns8__UpgradeSystemFirmware* ns8__UpgradeSystemFirmware,	///< Request parameter
    struct _ns8__UpgradeSystemFirmwareResponse* ns8__UpgradeSystemFirmwareResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SystemReboot                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SystemReboot" of service binding "DeviceBinding"

/**

Operation details:

This operation reboots the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SystemReboot"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SystemReboot(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SystemReboot*          ns8__SystemReboot,
    // response parameters:
    struct _ns8__SystemRebootResponse*  ns8__SystemRebootResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SystemReboot(
    struct soap *soap,
    // request parameters:
    struct _ns8__SystemReboot*          ns8__SystemReboot,
    // response parameters:
    struct _ns8__SystemRebootResponse*  ns8__SystemRebootResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SystemReboot document
//gsoap ns8  service method-encoding:	SystemReboot literal
//gsoap ns8  service method-action:	SystemReboot http://www.onvif.org/ver10/device/wsdl/SystemReboot
int __ns8__SystemReboot(
    struct _ns8__SystemReboot*          ns8__SystemReboot,	///< Request parameter
    struct _ns8__SystemRebootResponse*  ns8__SystemRebootResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__RestoreSystem                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__RestoreSystem" of service binding "DeviceBinding"

/**

Operation details:

This operation restores the system backup configuration files(s) previously retrieved
from a
				device. The device should support restore of backup
configuration file(s) through the
				RestoreSystem command. The exact format of the backup
configuration file(s) is outside the
				scope of this standard. If the command is supported,
it shall accept backup files returned by
				the GetSystemBackup command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/RestoreSystem"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__RestoreSystem(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__RestoreSystem*         ns8__RestoreSystem,
    // response parameters:
    struct _ns8__RestoreSystemResponse* ns8__RestoreSystemResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__RestoreSystem(
    struct soap *soap,
    // request parameters:
    struct _ns8__RestoreSystem*         ns8__RestoreSystem,
    // response parameters:
    struct _ns8__RestoreSystemResponse* ns8__RestoreSystemResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	RestoreSystem document
//gsoap ns8  service method-encoding:	RestoreSystem literal
//gsoap ns8  service method-action:	RestoreSystem http://www.onvif.org/ver10/device/wsdl/RestoreSystem
int __ns8__RestoreSystem(
    struct _ns8__RestoreSystem*         ns8__RestoreSystem,	///< Request parameter
    struct _ns8__RestoreSystemResponse* ns8__RestoreSystemResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetSystemBackup                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetSystemBackup" of service binding "DeviceBinding"

/**

Operation details:

This operation is retrieves system backup configuration file(s) from a device. The
device
				should support return of back up configuration file(s)
through the GetSystemBackup command.
				The backup is returned with reference to a name
and mime-type together with binary data.
				The exact format of the backup configuration files
is outside the scope of this standard.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetSystemBackup"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetSystemBackup(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetSystemBackup*       ns8__GetSystemBackup,
    // response parameters:
    struct _ns8__GetSystemBackupResponse* ns8__GetSystemBackupResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetSystemBackup(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetSystemBackup*       ns8__GetSystemBackup,
    // response parameters:
    struct _ns8__GetSystemBackupResponse* ns8__GetSystemBackupResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetSystemBackup document
//gsoap ns8  service method-encoding:	GetSystemBackup literal
//gsoap ns8  service method-action:	GetSystemBackup http://www.onvif.org/ver10/device/wsdl/GetSystemBackup
int __ns8__GetSystemBackup(
    struct _ns8__GetSystemBackup*       ns8__GetSystemBackup,	///< Request parameter
    struct _ns8__GetSystemBackupResponse* ns8__GetSystemBackupResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetSystemLog                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetSystemLog" of service binding "DeviceBinding"

/**

Operation details:

This operation gets a system log from the device. The exact format of the system
logs is outside the scope of this standard.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetSystemLog"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetSystemLog(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetSystemLog*          ns8__GetSystemLog,
    // response parameters:
    struct _ns8__GetSystemLogResponse*  ns8__GetSystemLogResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetSystemLog(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetSystemLog*          ns8__GetSystemLog,
    // response parameters:
    struct _ns8__GetSystemLogResponse*  ns8__GetSystemLogResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetSystemLog document
//gsoap ns8  service method-encoding:	GetSystemLog literal
//gsoap ns8  service method-action:	GetSystemLog http://www.onvif.org/ver10/device/wsdl/GetSystemLog
int __ns8__GetSystemLog(
    struct _ns8__GetSystemLog*          ns8__GetSystemLog,	///< Request parameter
    struct _ns8__GetSystemLogResponse*  ns8__GetSystemLogResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetSystemSupportInformation                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetSystemSupportInformation" of service binding "DeviceBinding"

/**

Operation details:

This operation gets arbitary device diagnostics information from the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetSystemSupportInformation"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetSystemSupportInformation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetSystemSupportInformation* ns8__GetSystemSupportInformation,
    // response parameters:
    struct _ns8__GetSystemSupportInformationResponse* ns8__GetSystemSupportInformationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetSystemSupportInformation(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetSystemSupportInformation* ns8__GetSystemSupportInformation,
    // response parameters:
    struct _ns8__GetSystemSupportInformationResponse* ns8__GetSystemSupportInformationResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetSystemSupportInformation document
//gsoap ns8  service method-encoding:	GetSystemSupportInformation literal
//gsoap ns8  service method-action:	GetSystemSupportInformation http://www.onvif.org/ver10/device/wsdl/GetSystemSupportInformation
int __ns8__GetSystemSupportInformation(
    struct _ns8__GetSystemSupportInformation* ns8__GetSystemSupportInformation,	///< Request parameter
    struct _ns8__GetSystemSupportInformationResponse* ns8__GetSystemSupportInformationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetScopes                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetScopes" of service binding "DeviceBinding"

/**

Operation details:

This operation requests the scope parameters of a device. The scope parameters are
used in
				the device discovery to match a probe message, see
Section 7. The Scope parameters are of
				two different types: <ul>
	<li>Fixed</li>
	<li>Configurable</li>
</ul>
				Fixed scope parameters cannot be altered through
the device management interface but are
				permanent device characteristics part of the device
firmware configurations. The scope type is
				indicated in the scope list returned in the get
scope parameters response. Configurable scope
				parameters can be set throught the set and add scope
parameters operations. 
				The device shall support retrieval of discovery
scope parameters
				through the GetScopes command. As some scope parameters
are mandatory, the client
				always expects a scope list in the response.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetScopes"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetScopes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetScopes*             ns8__GetScopes,
    // response parameters:
    struct _ns8__GetScopesResponse*     ns8__GetScopesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetScopes(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetScopes*             ns8__GetScopes,
    // response parameters:
    struct _ns8__GetScopesResponse*     ns8__GetScopesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetScopes document
//gsoap ns8  service method-encoding:	GetScopes literal
//gsoap ns8  service method-action:	GetScopes http://www.onvif.org/ver10/device/wsdl/GetScopes
int __ns8__GetScopes(
    struct _ns8__GetScopes*             ns8__GetScopes,	///< Request parameter
    struct _ns8__GetScopesResponse*     ns8__GetScopesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetScopes                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetScopes" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the scope parameters of a device. The scope parameters are used
in the
				device discovery to match a probe message.
				This operation replaces all existing configurable
scope parameters (not fixed parameters). If
				this shall be avoided, one should use the scope
add command instead. The device shall
				support configuration of discovery scope parameters
through the SetScopes command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetScopes"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetScopes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetScopes*             ns8__SetScopes,
    // response parameters:
    struct _ns8__SetScopesResponse*     ns8__SetScopesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetScopes(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetScopes*             ns8__SetScopes,
    // response parameters:
    struct _ns8__SetScopesResponse*     ns8__SetScopesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetScopes document
//gsoap ns8  service method-encoding:	SetScopes literal
//gsoap ns8  service method-action:	SetScopes http://www.onvif.org/ver10/device/wsdl/SetScopes
int __ns8__SetScopes(
    struct _ns8__SetScopes*             ns8__SetScopes,	///< Request parameter
    struct _ns8__SetScopesResponse*     ns8__SetScopesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__AddScopes                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__AddScopes" of service binding "DeviceBinding"

/**

Operation details:

This operation adds new configurable scope parameters to a device. The scope parameters
				are used in the device discovery to match a probe
message. The device shall
				support addition of discovery scope parameters through
the AddScopes command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/AddScopes"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__AddScopes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__AddScopes*             ns8__AddScopes,
    // response parameters:
    struct _ns8__AddScopesResponse*     ns8__AddScopesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__AddScopes(
    struct soap *soap,
    // request parameters:
    struct _ns8__AddScopes*             ns8__AddScopes,
    // response parameters:
    struct _ns8__AddScopesResponse*     ns8__AddScopesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	AddScopes document
//gsoap ns8  service method-encoding:	AddScopes literal
//gsoap ns8  service method-action:	AddScopes http://www.onvif.org/ver10/device/wsdl/AddScopes
int __ns8__AddScopes(
    struct _ns8__AddScopes*             ns8__AddScopes,	///< Request parameter
    struct _ns8__AddScopesResponse*     ns8__AddScopesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__RemoveScopes                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__RemoveScopes" of service binding "DeviceBinding"

/**

Operation details:

This operation deletes scope-configurable scope parameters from a device. The scope
				parameters are used in the device discovery to match
a probe message, see Section 7. The
				device shall support deletion of discovery scope
parameters through the RemoveScopes
				command.
				Table

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/RemoveScopes"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__RemoveScopes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__RemoveScopes*          ns8__RemoveScopes,
    // response parameters:
    struct _ns8__RemoveScopesResponse*  ns8__RemoveScopesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__RemoveScopes(
    struct soap *soap,
    // request parameters:
    struct _ns8__RemoveScopes*          ns8__RemoveScopes,
    // response parameters:
    struct _ns8__RemoveScopesResponse*  ns8__RemoveScopesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	RemoveScopes document
//gsoap ns8  service method-encoding:	RemoveScopes literal
//gsoap ns8  service method-action:	RemoveScopes http://www.onvif.org/ver10/device/wsdl/RemoveScopes
int __ns8__RemoveScopes(
    struct _ns8__RemoveScopes*          ns8__RemoveScopes,	///< Request parameter
    struct _ns8__RemoveScopesResponse*  ns8__RemoveScopesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetDiscoveryMode                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetDiscoveryMode" of service binding "DeviceBinding"

/**

Operation details:

This operation gets the discovery mode of a device. See Section 7.2 for the definition
of the
				different device discovery modes. The device shall
support retrieval of the discovery mode
				setting through the GetDiscoveryMode command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetDiscoveryMode"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetDiscoveryMode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetDiscoveryMode*      ns8__GetDiscoveryMode,
    // response parameters:
    struct _ns8__GetDiscoveryModeResponse* ns8__GetDiscoveryModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetDiscoveryMode(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetDiscoveryMode*      ns8__GetDiscoveryMode,
    // response parameters:
    struct _ns8__GetDiscoveryModeResponse* ns8__GetDiscoveryModeResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetDiscoveryMode document
//gsoap ns8  service method-encoding:	GetDiscoveryMode literal
//gsoap ns8  service method-action:	GetDiscoveryMode http://www.onvif.org/ver10/device/wsdl/GetDiscoveryMode
int __ns8__GetDiscoveryMode(
    struct _ns8__GetDiscoveryMode*      ns8__GetDiscoveryMode,	///< Request parameter
    struct _ns8__GetDiscoveryModeResponse* ns8__GetDiscoveryModeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetDiscoveryMode                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetDiscoveryMode" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the discovery mode operation of a device. See Section 7.2 for
the
				definition of the different device discovery modes.
The device shall support configuration of
				the discovery mode setting through the SetDiscoveryMode
command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetDiscoveryMode"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetDiscoveryMode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetDiscoveryMode*      ns8__SetDiscoveryMode,
    // response parameters:
    struct _ns8__SetDiscoveryModeResponse* ns8__SetDiscoveryModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetDiscoveryMode(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetDiscoveryMode*      ns8__SetDiscoveryMode,
    // response parameters:
    struct _ns8__SetDiscoveryModeResponse* ns8__SetDiscoveryModeResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetDiscoveryMode document
//gsoap ns8  service method-encoding:	SetDiscoveryMode literal
//gsoap ns8  service method-action:	SetDiscoveryMode http://www.onvif.org/ver10/device/wsdl/SetDiscoveryMode
int __ns8__SetDiscoveryMode(
    struct _ns8__SetDiscoveryMode*      ns8__SetDiscoveryMode,	///< Request parameter
    struct _ns8__SetDiscoveryModeResponse* ns8__SetDiscoveryModeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetRemoteDiscoveryMode                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetRemoteDiscoveryMode" of service binding "DeviceBinding"

/**

Operation details:

This operation gets the remote discovery mode of a device. See Section 7.4 for the
definition
				of remote discovery extensions. A device that supports
remote discovery shall support
				retrieval of the remote discovery mode setting through
the GetRemoteDiscoveryMode
				command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetRemoteDiscoveryMode"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetRemoteDiscoveryMode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetRemoteDiscoveryMode* ns8__GetRemoteDiscoveryMode,
    // response parameters:
    struct _ns8__GetRemoteDiscoveryModeResponse* ns8__GetRemoteDiscoveryModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetRemoteDiscoveryMode(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetRemoteDiscoveryMode* ns8__GetRemoteDiscoveryMode,
    // response parameters:
    struct _ns8__GetRemoteDiscoveryModeResponse* ns8__GetRemoteDiscoveryModeResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetRemoteDiscoveryMode document
//gsoap ns8  service method-encoding:	GetRemoteDiscoveryMode literal
//gsoap ns8  service method-action:	GetRemoteDiscoveryMode http://www.onvif.org/ver10/device/wsdl/GetRemoteDiscoveryMode
int __ns8__GetRemoteDiscoveryMode(
    struct _ns8__GetRemoteDiscoveryMode* ns8__GetRemoteDiscoveryMode,	///< Request parameter
    struct _ns8__GetRemoteDiscoveryModeResponse* ns8__GetRemoteDiscoveryModeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetRemoteDiscoveryMode                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetRemoteDiscoveryMode" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the remote discovery mode of operation of a device. See Section
7.4 for
				the definition of remote discovery remote extensions.
A device that supports remote discovery
				shall support configuration of the discovery mode
setting through the
				SetRemoteDiscoveryMode command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetRemoteDiscoveryMode"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetRemoteDiscoveryMode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetRemoteDiscoveryMode* ns8__SetRemoteDiscoveryMode,
    // response parameters:
    struct _ns8__SetRemoteDiscoveryModeResponse* ns8__SetRemoteDiscoveryModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetRemoteDiscoveryMode(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetRemoteDiscoveryMode* ns8__SetRemoteDiscoveryMode,
    // response parameters:
    struct _ns8__SetRemoteDiscoveryModeResponse* ns8__SetRemoteDiscoveryModeResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetRemoteDiscoveryMode document
//gsoap ns8  service method-encoding:	SetRemoteDiscoveryMode literal
//gsoap ns8  service method-action:	SetRemoteDiscoveryMode http://www.onvif.org/ver10/device/wsdl/SetRemoteDiscoveryMode
int __ns8__SetRemoteDiscoveryMode(
    struct _ns8__SetRemoteDiscoveryMode* ns8__SetRemoteDiscoveryMode,	///< Request parameter
    struct _ns8__SetRemoteDiscoveryModeResponse* ns8__SetRemoteDiscoveryModeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetDPAddresses                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetDPAddresses" of service binding "DeviceBinding"

/**

Operation details:

This operation gets the remote DP address or addresses from a device. If the device
supports
				remote discovery, as specified in Section 7.4, the
device shall support retrieval of the remote
				DP address(es) through the GetDPAddresses command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetDPAddresses"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetDPAddresses(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetDPAddresses*        ns8__GetDPAddresses,
    // response parameters:
    struct _ns8__GetDPAddressesResponse* ns8__GetDPAddressesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetDPAddresses(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetDPAddresses*        ns8__GetDPAddresses,
    // response parameters:
    struct _ns8__GetDPAddressesResponse* ns8__GetDPAddressesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetDPAddresses document
//gsoap ns8  service method-encoding:	GetDPAddresses literal
//gsoap ns8  service method-action:	GetDPAddresses http://www.onvif.org/ver10/device/wsdl/GetDPAddresses
int __ns8__GetDPAddresses(
    struct _ns8__GetDPAddresses*        ns8__GetDPAddresses,	///< Request parameter
    struct _ns8__GetDPAddressesResponse* ns8__GetDPAddressesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetEndpointReference                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetEndpointReference" of service binding "DeviceBinding"

/**

Operation details:

A client can ask for the device service endpoint reference address property that
can be used
				to derive the password equivalent for remote user
operation. The device shall support the
				GetEndpointReference command returning the address
property of the device service
				endpoint reference.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetEndpointReference"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetEndpointReference(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetEndpointReference*  ns8__GetEndpointReference,
    // response parameters:
    struct _ns8__GetEndpointReferenceResponse* ns8__GetEndpointReferenceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetEndpointReference(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetEndpointReference*  ns8__GetEndpointReference,
    // response parameters:
    struct _ns8__GetEndpointReferenceResponse* ns8__GetEndpointReferenceResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetEndpointReference document
//gsoap ns8  service method-encoding:	GetEndpointReference literal
//gsoap ns8  service method-action:	GetEndpointReference http://www.onvif.org/ver10/device/wsdl/GetEndpointReference
int __ns8__GetEndpointReference(
    struct _ns8__GetEndpointReference*  ns8__GetEndpointReference,	///< Request parameter
    struct _ns8__GetEndpointReferenceResponse* ns8__GetEndpointReferenceResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetRemoteUser                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetRemoteUser" of service binding "DeviceBinding"

/**

Operation details:

This operation returns the configured remote user (if any). A device supporting
remote user
				handling shall support this operation. The user
is only valid for the WS-UserToken profile or
				as a HTTP / RTSP user.<br/>
				The algorithm to use for deriving the password is
described in section 5.12.2.1 of the core specification.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetRemoteUser"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetRemoteUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetRemoteUser*         ns8__GetRemoteUser,
    // response parameters:
    struct _ns8__GetRemoteUserResponse* ns8__GetRemoteUserResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetRemoteUser(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetRemoteUser*         ns8__GetRemoteUser,
    // response parameters:
    struct _ns8__GetRemoteUserResponse* ns8__GetRemoteUserResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetRemoteUser document
//gsoap ns8  service method-encoding:	GetRemoteUser literal
//gsoap ns8  service method-action:	GetRemoteUser http://www.onvif.org/ver10/device/wsdl/GetRemoteUser
int __ns8__GetRemoteUser(
    struct _ns8__GetRemoteUser*         ns8__GetRemoteUser,	///< Request parameter
    struct _ns8__GetRemoteUserResponse* ns8__GetRemoteUserResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetRemoteUser                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetRemoteUser" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the remote user. A device supporting remote user handling shall
support this
				operation. The user is only valid for the WS-UserToken
profile or as a HTTP / RTSP user.<br/>
				The password that is set shall always be the original
(not derived) password.<br/>
				If UseDerivedPassword is set password derivation
shall be done by the device when connecting to a
				remote device.The algorithm to use for deriving
the password is described in section 5.12.2.1 of the core specification.<br/>
				To remove the remote user SetRemoteUser should be
called without the RemoteUser parameter.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetRemoteUser"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetRemoteUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetRemoteUser*         ns8__SetRemoteUser,
    // response parameters:
    struct _ns8__SetRemoteUserResponse* ns8__SetRemoteUserResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetRemoteUser(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetRemoteUser*         ns8__SetRemoteUser,
    // response parameters:
    struct _ns8__SetRemoteUserResponse* ns8__SetRemoteUserResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetRemoteUser document
//gsoap ns8  service method-encoding:	SetRemoteUser literal
//gsoap ns8  service method-action:	SetRemoteUser http://www.onvif.org/ver10/device/wsdl/SetRemoteUser
int __ns8__SetRemoteUser(
    struct _ns8__SetRemoteUser*         ns8__SetRemoteUser,	///< Request parameter
    struct _ns8__SetRemoteUserResponse* ns8__SetRemoteUserResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetUsers                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetUsers" of service binding "DeviceBinding"

/**

Operation details:

This operation lists the registered users and corresponding credentials on a device.
The
				device shall support retrieval of registered device
users and their credentials for the user
				token through the GetUsers command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetUsers"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetUsers(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetUsers*              ns8__GetUsers,
    // response parameters:
    struct _ns8__GetUsersResponse*      ns8__GetUsersResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetUsers(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetUsers*              ns8__GetUsers,
    // response parameters:
    struct _ns8__GetUsersResponse*      ns8__GetUsersResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetUsers document
//gsoap ns8  service method-encoding:	GetUsers literal
//gsoap ns8  service method-action:	GetUsers http://www.onvif.org/ver10/device/wsdl/GetUsers
int __ns8__GetUsers(
    struct _ns8__GetUsers*              ns8__GetUsers,	///< Request parameter
    struct _ns8__GetUsersResponse*      ns8__GetUsersResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__CreateUsers                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__CreateUsers" of service binding "DeviceBinding"

/**

Operation details:

This operation creates new device users and corresponding credentials on a device
for authentication purposes. 
				The device shall support creation of device users
and their credentials through the CreateUsers
				command. Either all users are created successfully
or a fault message shall be returned
				without creating any user.<br/>
				ONVIF compliant devices are recommended to support
password length of at least 28 bytes,
				as clients may follow the password derivation mechanism
which results in 'password
				equivalent' of length 28 bytes, as described in
section 3.1.2 of the ONVIF security white paper.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/CreateUsers"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__CreateUsers(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__CreateUsers*           ns8__CreateUsers,
    // response parameters:
    struct _ns8__CreateUsersResponse*   ns8__CreateUsersResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__CreateUsers(
    struct soap *soap,
    // request parameters:
    struct _ns8__CreateUsers*           ns8__CreateUsers,
    // response parameters:
    struct _ns8__CreateUsersResponse*   ns8__CreateUsersResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	CreateUsers document
//gsoap ns8  service method-encoding:	CreateUsers literal
//gsoap ns8  service method-action:	CreateUsers http://www.onvif.org/ver10/device/wsdl/CreateUsers
int __ns8__CreateUsers(
    struct _ns8__CreateUsers*           ns8__CreateUsers,	///< Request parameter
    struct _ns8__CreateUsersResponse*   ns8__CreateUsersResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__DeleteUsers                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__DeleteUsers" of service binding "DeviceBinding"

/**

Operation details:

This operation deletes users on a device. The device shall support deletion of device
users and their credentials 
				through the DeleteUsers command. A device may have
one or more fixed users
				that cannot be deleted to ensure access to the unit.
Either all users are deleted successfully or a
				fault message shall be returned and no users be
deleted.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/DeleteUsers"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__DeleteUsers(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__DeleteUsers*           ns8__DeleteUsers,
    // response parameters:
    struct _ns8__DeleteUsersResponse*   ns8__DeleteUsersResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__DeleteUsers(
    struct soap *soap,
    // request parameters:
    struct _ns8__DeleteUsers*           ns8__DeleteUsers,
    // response parameters:
    struct _ns8__DeleteUsersResponse*   ns8__DeleteUsersResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	DeleteUsers document
//gsoap ns8  service method-encoding:	DeleteUsers literal
//gsoap ns8  service method-action:	DeleteUsers http://www.onvif.org/ver10/device/wsdl/DeleteUsers
int __ns8__DeleteUsers(
    struct _ns8__DeleteUsers*           ns8__DeleteUsers,	///< Request parameter
    struct _ns8__DeleteUsersResponse*   ns8__DeleteUsersResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetUser                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetUser" of service binding "DeviceBinding"

/**

Operation details:

This operation updates the settings for one or several users on a device for authentication
purposes.
				The device shall support update of device users
and their credentials through the SetUser command. 
				Either all change requests are processed successfully
or a fault message shall be returned and no change requests be processed.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetUser"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetUser*               ns8__SetUser,
    // response parameters:
    struct _ns8__SetUserResponse*       ns8__SetUserResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetUser(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetUser*               ns8__SetUser,
    // response parameters:
    struct _ns8__SetUserResponse*       ns8__SetUserResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetUser document
//gsoap ns8  service method-encoding:	SetUser literal
//gsoap ns8  service method-action:	SetUser http://www.onvif.org/ver10/device/wsdl/SetUser
int __ns8__SetUser(
    struct _ns8__SetUser*               ns8__SetUser,	///< Request parameter
    struct _ns8__SetUserResponse*       ns8__SetUserResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetWsdlUrl                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetWsdlUrl" of service binding "DeviceBinding"

/**

Operation details:

It is possible for an endpoint to request a URL that can be used to retrieve the
complete
				schema and WSDL definitions of a device. The command
gives in return a URL entry point
				where all the necessary product specific WSDL and
schema definitions can be retrieved. The
				device shall provide a URL for WSDL and schema download
through the GetWsdlUrl command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetWsdlUrl"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetWsdlUrl(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetWsdlUrl*            ns8__GetWsdlUrl,
    // response parameters:
    struct _ns8__GetWsdlUrlResponse*    ns8__GetWsdlUrlResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetWsdlUrl(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetWsdlUrl*            ns8__GetWsdlUrl,
    // response parameters:
    struct _ns8__GetWsdlUrlResponse*    ns8__GetWsdlUrlResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetWsdlUrl document
//gsoap ns8  service method-encoding:	GetWsdlUrl literal
//gsoap ns8  service method-action:	GetWsdlUrl http://www.onvif.org/ver10/device/wsdl/GetWsdlUrl
int __ns8__GetWsdlUrl(
    struct _ns8__GetWsdlUrl*            ns8__GetWsdlUrl,	///< Request parameter
    struct _ns8__GetWsdlUrlResponse*    ns8__GetWsdlUrlResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetCapabilities                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetCapabilities" of service binding "DeviceBinding"

/**

Operation details:

Any endpoint can ask for the capabilities of a device using the capability exchange
request
				response operation. The device shall indicate all
its ONVIF compliant capabilities through the
				GetCapabilities command.
				The capability list includes references to the addresses
(XAddr) of the service implementing
				the interface operations in the category. Apart
from the addresses, the
				capabilities only reflect optional functions.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetCapabilities"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetCapabilities(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetCapabilities*       ns8__GetCapabilities,
    // response parameters:
    struct _ns8__GetCapabilitiesResponse* ns8__GetCapabilitiesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetCapabilities(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetCapabilities*       ns8__GetCapabilities,
    // response parameters:
    struct _ns8__GetCapabilitiesResponse* ns8__GetCapabilitiesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetCapabilities document
//gsoap ns8  service method-encoding:	GetCapabilities literal
//gsoap ns8  service method-action:	GetCapabilities http://www.onvif.org/ver10/device/wsdl/GetCapabilities
int __ns8__GetCapabilities(
    struct _ns8__GetCapabilities*       ns8__GetCapabilities,	///< Request parameter
    struct _ns8__GetCapabilitiesResponse* ns8__GetCapabilitiesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetDPAddresses                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetDPAddresses" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the remote DP address or addresses on a device. If the device
supports
				remote discovery, as specified in Section 7.4, the
device shall support configuration of the
				remote DP address(es) through the SetDPAddresses
command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetDPAddresses"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetDPAddresses(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetDPAddresses*        ns8__SetDPAddresses,
    // response parameters:
    struct _ns8__SetDPAddressesResponse* ns8__SetDPAddressesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetDPAddresses(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetDPAddresses*        ns8__SetDPAddresses,
    // response parameters:
    struct _ns8__SetDPAddressesResponse* ns8__SetDPAddressesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetDPAddresses document
//gsoap ns8  service method-encoding:	SetDPAddresses literal
//gsoap ns8  service method-action:	SetDPAddresses http://www.onvif.org/ver10/device/wsdl/SetDPAddresses
int __ns8__SetDPAddresses(
    struct _ns8__SetDPAddresses*        ns8__SetDPAddresses,	///< Request parameter
    struct _ns8__SetDPAddressesResponse* ns8__SetDPAddressesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetHostname                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetHostname" of service binding "DeviceBinding"

/**

Operation details:

This operation is used by an endpoint to get the hostname from a device. The device
shall
				return its hostname configurations through the GetHostname
command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetHostname"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetHostname(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetHostname*           ns8__GetHostname,
    // response parameters:
    struct _ns8__GetHostnameResponse*   ns8__GetHostnameResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetHostname(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetHostname*           ns8__GetHostname,
    // response parameters:
    struct _ns8__GetHostnameResponse*   ns8__GetHostnameResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetHostname document
//gsoap ns8  service method-encoding:	GetHostname literal
//gsoap ns8  service method-action:	GetHostname http://www.onvif.org/ver10/device/wsdl/GetHostname
int __ns8__GetHostname(
    struct _ns8__GetHostname*           ns8__GetHostname,	///< Request parameter
    struct _ns8__GetHostnameResponse*   ns8__GetHostnameResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetHostname                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetHostname" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the hostname on a device. It shall be possible to set the device
hostname
				configurations through the SetHostname command.<br/>
				A device shall accept string formated according
to RFC 1123 section 2.1 or alternatively to RFC 952, 
				other string shall be considered as invalid strings.

			

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetHostname"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetHostname(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetHostname*           ns8__SetHostname,
    // response parameters:
    struct _ns8__SetHostnameResponse*   ns8__SetHostnameResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetHostname(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetHostname*           ns8__SetHostname,
    // response parameters:
    struct _ns8__SetHostnameResponse*   ns8__SetHostnameResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetHostname document
//gsoap ns8  service method-encoding:	SetHostname literal
//gsoap ns8  service method-action:	SetHostname http://www.onvif.org/ver10/device/wsdl/SetHostname
int __ns8__SetHostname(
    struct _ns8__SetHostname*           ns8__SetHostname,	///< Request parameter
    struct _ns8__SetHostnameResponse*   ns8__SetHostnameResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetDNS                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetDNS" of service binding "DeviceBinding"

/**

Operation details:

This operation gets the DNS settings from a device. The device shall return its
DNS
				configurations through the GetDNS command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetDNS"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetDNS(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetDNS*                ns8__GetDNS,
    // response parameters:
    struct _ns8__GetDNSResponse*        ns8__GetDNSResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetDNS(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetDNS*                ns8__GetDNS,
    // response parameters:
    struct _ns8__GetDNSResponse*        ns8__GetDNSResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetDNS document
//gsoap ns8  service method-encoding:	GetDNS literal
//gsoap ns8  service method-action:	GetDNS http://www.onvif.org/ver10/device/wsdl/GetDNS
int __ns8__GetDNS(
    struct _ns8__GetDNS*                ns8__GetDNS,	///< Request parameter
    struct _ns8__GetDNSResponse*        ns8__GetDNSResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetDNS                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetDNS" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the DNS settings on a device. It shall be possible to set the
device DNS
				configurations through the SetDNS command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetDNS"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetDNS(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetDNS*                ns8__SetDNS,
    // response parameters:
    struct _ns8__SetDNSResponse*        ns8__SetDNSResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetDNS(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetDNS*                ns8__SetDNS,
    // response parameters:
    struct _ns8__SetDNSResponse*        ns8__SetDNSResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetDNS document
//gsoap ns8  service method-encoding:	SetDNS literal
//gsoap ns8  service method-action:	SetDNS http://www.onvif.org/ver10/device/wsdl/SetDNS
int __ns8__SetDNS(
    struct _ns8__SetDNS*                ns8__SetDNS,	///< Request parameter
    struct _ns8__SetDNSResponse*        ns8__SetDNSResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetNTP                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetNTP" of service binding "DeviceBinding"

/**

Operation details:

This operation gets the NTP settings from a device. If the device supports NTP,
it shall be
				possible to get the NTP server settings through
the GetNTP command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetNTP"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetNTP(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetNTP*                ns8__GetNTP,
    // response parameters:
    struct _ns8__GetNTPResponse*        ns8__GetNTPResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetNTP(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetNTP*                ns8__GetNTP,
    // response parameters:
    struct _ns8__GetNTPResponse*        ns8__GetNTPResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetNTP document
//gsoap ns8  service method-encoding:	GetNTP literal
//gsoap ns8  service method-action:	GetNTP http://www.onvif.org/ver10/device/wsdl/GetNTP
int __ns8__GetNTP(
    struct _ns8__GetNTP*                ns8__GetNTP,	///< Request parameter
    struct _ns8__GetNTPResponse*        ns8__GetNTPResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetNTP                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetNTP" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the NTP settings on a device. If the device supports NTP, it
shall be
				possible to set the NTP server settings through
the SetNTP command.<br/>
				A device shall accept string formated according
to RFC 1123 section 2.1 or alternatively to RFC 952, 
				other string shall be considered as invalid strings.
<br/>
				Changes to the NTP server list will not affect the
clock mode DateTimeType. Use SetSystemDateAndTime to activate NTP operation.
			

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetNTP"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetNTP(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetNTP*                ns8__SetNTP,
    // response parameters:
    struct _ns8__SetNTPResponse*        ns8__SetNTPResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetNTP(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetNTP*                ns8__SetNTP,
    // response parameters:
    struct _ns8__SetNTPResponse*        ns8__SetNTPResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetNTP document
//gsoap ns8  service method-encoding:	SetNTP literal
//gsoap ns8  service method-action:	SetNTP http://www.onvif.org/ver10/device/wsdl/SetNTP
int __ns8__SetNTP(
    struct _ns8__SetNTP*                ns8__SetNTP,	///< Request parameter
    struct _ns8__SetNTPResponse*        ns8__SetNTPResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetDynamicDNS                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetDynamicDNS" of service binding "DeviceBinding"

/**

Operation details:

This operation gets the dynamic DNS settings from a device. If the device supports
dynamic
				DNS as specified in [RFC 2136] and [RFC 4702], it
shall be possible to get the type, name
				and TTL through the GetDynamicDNS command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetDynamicDNS"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetDynamicDNS(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetDynamicDNS*         ns8__GetDynamicDNS,
    // response parameters:
    struct _ns8__GetDynamicDNSResponse* ns8__GetDynamicDNSResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetDynamicDNS(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetDynamicDNS*         ns8__GetDynamicDNS,
    // response parameters:
    struct _ns8__GetDynamicDNSResponse* ns8__GetDynamicDNSResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetDynamicDNS document
//gsoap ns8  service method-encoding:	GetDynamicDNS literal
//gsoap ns8  service method-action:	GetDynamicDNS http://www.onvif.org/ver10/device/wsdl/GetDynamicDNS
int __ns8__GetDynamicDNS(
    struct _ns8__GetDynamicDNS*         ns8__GetDynamicDNS,	///< Request parameter
    struct _ns8__GetDynamicDNSResponse* ns8__GetDynamicDNSResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetDynamicDNS                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetDynamicDNS" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the dynamic DNS settings on a device. If the device supports
dynamic
				DNS as specified in [RFC 2136] and [RFC 4702], it
shall be possible to set the type, name
				and TTL through the SetDynamicDNS command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetDynamicDNS"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetDynamicDNS(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetDynamicDNS*         ns8__SetDynamicDNS,
    // response parameters:
    struct _ns8__SetDynamicDNSResponse* ns8__SetDynamicDNSResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetDynamicDNS(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetDynamicDNS*         ns8__SetDynamicDNS,
    // response parameters:
    struct _ns8__SetDynamicDNSResponse* ns8__SetDynamicDNSResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetDynamicDNS document
//gsoap ns8  service method-encoding:	SetDynamicDNS literal
//gsoap ns8  service method-action:	SetDynamicDNS http://www.onvif.org/ver10/device/wsdl/SetDynamicDNS
int __ns8__SetDynamicDNS(
    struct _ns8__SetDynamicDNS*         ns8__SetDynamicDNS,	///< Request parameter
    struct _ns8__SetDynamicDNSResponse* ns8__SetDynamicDNSResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetNetworkInterfaces                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetNetworkInterfaces" of service binding "DeviceBinding"

/**

Operation details:

This operation gets the network interface configuration from a device. The device
shall
				support return of network interface configuration
settings as defined by the NetworkInterface
				type through the GetNetworkInterfaces command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetNetworkInterfaces"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetNetworkInterfaces(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetNetworkInterfaces*  ns8__GetNetworkInterfaces,
    // response parameters:
    struct _ns8__GetNetworkInterfacesResponse* ns8__GetNetworkInterfacesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetNetworkInterfaces(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetNetworkInterfaces*  ns8__GetNetworkInterfaces,
    // response parameters:
    struct _ns8__GetNetworkInterfacesResponse* ns8__GetNetworkInterfacesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetNetworkInterfaces document
//gsoap ns8  service method-encoding:	GetNetworkInterfaces literal
//gsoap ns8  service method-action:	GetNetworkInterfaces http://www.onvif.org/ver10/device/wsdl/GetNetworkInterfaces
int __ns8__GetNetworkInterfaces(
    struct _ns8__GetNetworkInterfaces*  ns8__GetNetworkInterfaces,	///< Request parameter
    struct _ns8__GetNetworkInterfacesResponse* ns8__GetNetworkInterfacesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetNetworkInterfaces                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetNetworkInterfaces" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the network interface configuration on a device. The device
shall support
				network configuration of supported network interfaces
through the SetNetworkInterfaces
				command.<br/>
				For interoperability with a client unaware of the
IEEE 802.11 extension a device shall retain
				its IEEE 802.11 configuration if the IEEE 802.11
configuration element isnt present in the
				request.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetNetworkInterfaces"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetNetworkInterfaces(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetNetworkInterfaces*  ns8__SetNetworkInterfaces,
    // response parameters:
    struct _ns8__SetNetworkInterfacesResponse* ns8__SetNetworkInterfacesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetNetworkInterfaces(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetNetworkInterfaces*  ns8__SetNetworkInterfaces,
    // response parameters:
    struct _ns8__SetNetworkInterfacesResponse* ns8__SetNetworkInterfacesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetNetworkInterfaces document
//gsoap ns8  service method-encoding:	SetNetworkInterfaces literal
//gsoap ns8  service method-action:	SetNetworkInterfaces http://www.onvif.org/ver10/device/wsdl/SetNetworkInterfaces
int __ns8__SetNetworkInterfaces(
    struct _ns8__SetNetworkInterfaces*  ns8__SetNetworkInterfaces,	///< Request parameter
    struct _ns8__SetNetworkInterfacesResponse* ns8__SetNetworkInterfacesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetNetworkProtocols                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetNetworkProtocols" of service binding "DeviceBinding"

/**

Operation details:

This operation gets defined network protocols from a device. The device shall support
the
				GetNetworkProtocols command returning configured
network protocols.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetNetworkProtocols"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetNetworkProtocols(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetNetworkProtocols*   ns8__GetNetworkProtocols,
    // response parameters:
    struct _ns8__GetNetworkProtocolsResponse* ns8__GetNetworkProtocolsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetNetworkProtocols(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetNetworkProtocols*   ns8__GetNetworkProtocols,
    // response parameters:
    struct _ns8__GetNetworkProtocolsResponse* ns8__GetNetworkProtocolsResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetNetworkProtocols document
//gsoap ns8  service method-encoding:	GetNetworkProtocols literal
//gsoap ns8  service method-action:	GetNetworkProtocols http://www.onvif.org/ver10/device/wsdl/GetNetworkProtocols
int __ns8__GetNetworkProtocols(
    struct _ns8__GetNetworkProtocols*   ns8__GetNetworkProtocols,	///< Request parameter
    struct _ns8__GetNetworkProtocolsResponse* ns8__GetNetworkProtocolsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetNetworkProtocols                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetNetworkProtocols" of service binding "DeviceBinding"

/**

Operation details:

This operation configures defined network protocols on a device. The device shall
support
				configuration of defined network protocols through
the SetNetworkProtocols command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetNetworkProtocols"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetNetworkProtocols(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetNetworkProtocols*   ns8__SetNetworkProtocols,
    // response parameters:
    struct _ns8__SetNetworkProtocolsResponse* ns8__SetNetworkProtocolsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetNetworkProtocols(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetNetworkProtocols*   ns8__SetNetworkProtocols,
    // response parameters:
    struct _ns8__SetNetworkProtocolsResponse* ns8__SetNetworkProtocolsResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetNetworkProtocols document
//gsoap ns8  service method-encoding:	SetNetworkProtocols literal
//gsoap ns8  service method-action:	SetNetworkProtocols http://www.onvif.org/ver10/device/wsdl/SetNetworkProtocols
int __ns8__SetNetworkProtocols(
    struct _ns8__SetNetworkProtocols*   ns8__SetNetworkProtocols,	///< Request parameter
    struct _ns8__SetNetworkProtocolsResponse* ns8__SetNetworkProtocolsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetNetworkDefaultGateway                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetNetworkDefaultGateway" of service binding "DeviceBinding"

/**

Operation details:

This operation gets the default gateway settings from a device. The device shall
support the
				GetNetworkDefaultGateway command returning configured
default gateway address(es).

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetNetworkDefaultGateway"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetNetworkDefaultGateway(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetNetworkDefaultGateway* ns8__GetNetworkDefaultGateway,
    // response parameters:
    struct _ns8__GetNetworkDefaultGatewayResponse* ns8__GetNetworkDefaultGatewayResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetNetworkDefaultGateway(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetNetworkDefaultGateway* ns8__GetNetworkDefaultGateway,
    // response parameters:
    struct _ns8__GetNetworkDefaultGatewayResponse* ns8__GetNetworkDefaultGatewayResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetNetworkDefaultGateway document
//gsoap ns8  service method-encoding:	GetNetworkDefaultGateway literal
//gsoap ns8  service method-action:	GetNetworkDefaultGateway http://www.onvif.org/ver10/device/wsdl/GetNetworkDefaultGateway
int __ns8__GetNetworkDefaultGateway(
    struct _ns8__GetNetworkDefaultGateway* ns8__GetNetworkDefaultGateway,	///< Request parameter
    struct _ns8__GetNetworkDefaultGatewayResponse* ns8__GetNetworkDefaultGatewayResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetNetworkDefaultGateway                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetNetworkDefaultGateway" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the default gateway settings on a device. The device shall support
				configuration of default gateway through the SetNetworkDefaultGateway
command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetNetworkDefaultGateway"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetNetworkDefaultGateway(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetNetworkDefaultGateway* ns8__SetNetworkDefaultGateway,
    // response parameters:
    struct _ns8__SetNetworkDefaultGatewayResponse* ns8__SetNetworkDefaultGatewayResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetNetworkDefaultGateway(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetNetworkDefaultGateway* ns8__SetNetworkDefaultGateway,
    // response parameters:
    struct _ns8__SetNetworkDefaultGatewayResponse* ns8__SetNetworkDefaultGatewayResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetNetworkDefaultGateway document
//gsoap ns8  service method-encoding:	SetNetworkDefaultGateway literal
//gsoap ns8  service method-action:	SetNetworkDefaultGateway http://www.onvif.org/ver10/device/wsdl/SetNetworkDefaultGateway
int __ns8__SetNetworkDefaultGateway(
    struct _ns8__SetNetworkDefaultGateway* ns8__SetNetworkDefaultGateway,	///< Request parameter
    struct _ns8__SetNetworkDefaultGatewayResponse* ns8__SetNetworkDefaultGatewayResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetZeroConfiguration                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetZeroConfiguration" of service binding "DeviceBinding"

/**

Operation details:

This operation gets the zero-configuration from a device. If the device supports
dynamic IP
				configuration according to [RFC3927], it shall support
the return of IPv4 zero configuration
				address and status through the GetZeroConfiguration
command.<br/>
			Use GetCapalities to get if zero-zero-configuration is supported
or not.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetZeroConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetZeroConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetZeroConfiguration*  ns8__GetZeroConfiguration,
    // response parameters:
    struct _ns8__GetZeroConfigurationResponse* ns8__GetZeroConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetZeroConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetZeroConfiguration*  ns8__GetZeroConfiguration,
    // response parameters:
    struct _ns8__GetZeroConfigurationResponse* ns8__GetZeroConfigurationResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetZeroConfiguration document
//gsoap ns8  service method-encoding:	GetZeroConfiguration literal
//gsoap ns8  service method-action:	GetZeroConfiguration http://www.onvif.org/ver10/device/wsdl/GetZeroConfiguration
int __ns8__GetZeroConfiguration(
    struct _ns8__GetZeroConfiguration*  ns8__GetZeroConfiguration,	///< Request parameter
    struct _ns8__GetZeroConfigurationResponse* ns8__GetZeroConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetZeroConfiguration                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetZeroConfiguration" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the zero-configuration. Use GetCapalities to get if zero-zero-configuration
is supported or not.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetZeroConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetZeroConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetZeroConfiguration*  ns8__SetZeroConfiguration,
    // response parameters:
    struct _ns8__SetZeroConfigurationResponse* ns8__SetZeroConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetZeroConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetZeroConfiguration*  ns8__SetZeroConfiguration,
    // response parameters:
    struct _ns8__SetZeroConfigurationResponse* ns8__SetZeroConfigurationResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetZeroConfiguration document
//gsoap ns8  service method-encoding:	SetZeroConfiguration literal
//gsoap ns8  service method-action:	SetZeroConfiguration http://www.onvif.org/ver10/device/wsdl/SetZeroConfiguration
int __ns8__SetZeroConfiguration(
    struct _ns8__SetZeroConfiguration*  ns8__SetZeroConfiguration,	///< Request parameter
    struct _ns8__SetZeroConfigurationResponse* ns8__SetZeroConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetIPAddressFilter                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetIPAddressFilter" of service binding "DeviceBinding"

/**

Operation details:

This operation gets the IP address filter settings from a device. If the device
supports device
				access control based on IP filtering rules (denied
or accepted ranges of IP addresses), the
				device shall support the GetIPAddressFilter command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetIPAddressFilter"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetIPAddressFilter(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetIPAddressFilter*    ns8__GetIPAddressFilter,
    // response parameters:
    struct _ns8__GetIPAddressFilterResponse* ns8__GetIPAddressFilterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetIPAddressFilter(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetIPAddressFilter*    ns8__GetIPAddressFilter,
    // response parameters:
    struct _ns8__GetIPAddressFilterResponse* ns8__GetIPAddressFilterResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetIPAddressFilter document
//gsoap ns8  service method-encoding:	GetIPAddressFilter literal
//gsoap ns8  service method-action:	GetIPAddressFilter http://www.onvif.org/ver10/device/wsdl/GetIPAddressFilter
int __ns8__GetIPAddressFilter(
    struct _ns8__GetIPAddressFilter*    ns8__GetIPAddressFilter,	///< Request parameter
    struct _ns8__GetIPAddressFilterResponse* ns8__GetIPAddressFilterResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetIPAddressFilter                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetIPAddressFilter" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the IP address filter settings on a device. If the device supports
device
				access control based on IP filtering rules (denied
or accepted ranges of IP addresses), the
				device shall support configuration of IP filtering
rules through the SetIPAddressFilter
				command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetIPAddressFilter"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetIPAddressFilter(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetIPAddressFilter*    ns8__SetIPAddressFilter,
    // response parameters:
    struct _ns8__SetIPAddressFilterResponse* ns8__SetIPAddressFilterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetIPAddressFilter(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetIPAddressFilter*    ns8__SetIPAddressFilter,
    // response parameters:
    struct _ns8__SetIPAddressFilterResponse* ns8__SetIPAddressFilterResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetIPAddressFilter document
//gsoap ns8  service method-encoding:	SetIPAddressFilter literal
//gsoap ns8  service method-action:	SetIPAddressFilter http://www.onvif.org/ver10/device/wsdl/SetIPAddressFilter
int __ns8__SetIPAddressFilter(
    struct _ns8__SetIPAddressFilter*    ns8__SetIPAddressFilter,	///< Request parameter
    struct _ns8__SetIPAddressFilterResponse* ns8__SetIPAddressFilterResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__AddIPAddressFilter                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__AddIPAddressFilter" of service binding "DeviceBinding"

/**

Operation details:

This operation adds an IP filter address to a device. If the device supports device
access
				control based on IP filtering rules (denied or accepted
ranges of IP addresses), the device
				shall support adding of IP filtering addresses through
the AddIPAddressFilter command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/AddIPAddressFilter"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__AddIPAddressFilter(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__AddIPAddressFilter*    ns8__AddIPAddressFilter,
    // response parameters:
    struct _ns8__AddIPAddressFilterResponse* ns8__AddIPAddressFilterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__AddIPAddressFilter(
    struct soap *soap,
    // request parameters:
    struct _ns8__AddIPAddressFilter*    ns8__AddIPAddressFilter,
    // response parameters:
    struct _ns8__AddIPAddressFilterResponse* ns8__AddIPAddressFilterResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	AddIPAddressFilter document
//gsoap ns8  service method-encoding:	AddIPAddressFilter literal
//gsoap ns8  service method-action:	AddIPAddressFilter http://www.onvif.org/ver10/device/wsdl/AddIPAddressFilter
int __ns8__AddIPAddressFilter(
    struct _ns8__AddIPAddressFilter*    ns8__AddIPAddressFilter,	///< Request parameter
    struct _ns8__AddIPAddressFilterResponse* ns8__AddIPAddressFilterResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__RemoveIPAddressFilter                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__RemoveIPAddressFilter" of service binding "DeviceBinding"

/**

Operation details:

This operation deletes an IP filter address from a device. If the device supports
device access
				control based on IP filtering rules (denied or accepted
ranges of IP addresses), the device
				shall support deletion of IP filtering addresses
through the RemoveIPAddressFilter command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/RemoveIPAddressFilter"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__RemoveIPAddressFilter(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__RemoveIPAddressFilter* ns8__RemoveIPAddressFilter,
    // response parameters:
    struct _ns8__RemoveIPAddressFilterResponse* ns8__RemoveIPAddressFilterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__RemoveIPAddressFilter(
    struct soap *soap,
    // request parameters:
    struct _ns8__RemoveIPAddressFilter* ns8__RemoveIPAddressFilter,
    // response parameters:
    struct _ns8__RemoveIPAddressFilterResponse* ns8__RemoveIPAddressFilterResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	RemoveIPAddressFilter document
//gsoap ns8  service method-encoding:	RemoveIPAddressFilter literal
//gsoap ns8  service method-action:	RemoveIPAddressFilter http://www.onvif.org/ver10/device/wsdl/RemoveIPAddressFilter
int __ns8__RemoveIPAddressFilter(
    struct _ns8__RemoveIPAddressFilter* ns8__RemoveIPAddressFilter,	///< Request parameter
    struct _ns8__RemoveIPAddressFilterResponse* ns8__RemoveIPAddressFilterResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetAccessPolicy                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetAccessPolicy" of service binding "DeviceBinding"

/**

Operation details:

Access to different services and sub-sets of services should be subject to access
control. The
				WS-Security framework gives the prerequisite for
end-point authentication. Authorization
				decisions can then be taken using an access security
policy. This standard does not mandate
				any particular policy description format or security
policy but this is up to the device
				manufacturer or system provider to choose policy
and policy description format of choice.
				However, an access policy (in arbitrary format)
can be requested using this command. If the
				device supports access policy settings based on
WS-Security authentication, then the device
				shall support this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetAccessPolicy"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetAccessPolicy(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetAccessPolicy*       ns8__GetAccessPolicy,
    // response parameters:
    struct _ns8__GetAccessPolicyResponse* ns8__GetAccessPolicyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetAccessPolicy(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetAccessPolicy*       ns8__GetAccessPolicy,
    // response parameters:
    struct _ns8__GetAccessPolicyResponse* ns8__GetAccessPolicyResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetAccessPolicy document
//gsoap ns8  service method-encoding:	GetAccessPolicy literal
//gsoap ns8  service method-action:	GetAccessPolicy http://www.onvif.org/ver10/device/wsdl/GetAccessPolicy
int __ns8__GetAccessPolicy(
    struct _ns8__GetAccessPolicy*       ns8__GetAccessPolicy,	///< Request parameter
    struct _ns8__GetAccessPolicyResponse* ns8__GetAccessPolicyResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetAccessPolicy                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetAccessPolicy" of service binding "DeviceBinding"

/**

Operation details:

This command sets the device access security policy (for more details on the access
security
				policy see the Get command). If the device supports
access policy settings
				based on WS-Security authentication, then the device
shall support this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetAccessPolicy"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetAccessPolicy(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetAccessPolicy*       ns8__SetAccessPolicy,
    // response parameters:
    struct _ns8__SetAccessPolicyResponse* ns8__SetAccessPolicyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetAccessPolicy(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetAccessPolicy*       ns8__SetAccessPolicy,
    // response parameters:
    struct _ns8__SetAccessPolicyResponse* ns8__SetAccessPolicyResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetAccessPolicy document
//gsoap ns8  service method-encoding:	SetAccessPolicy literal
//gsoap ns8  service method-action:	SetAccessPolicy http://www.onvif.org/ver10/device/wsdl/SetAccessPolicy
int __ns8__SetAccessPolicy(
    struct _ns8__SetAccessPolicy*       ns8__SetAccessPolicy,	///< Request parameter
    struct _ns8__SetAccessPolicyResponse* ns8__SetAccessPolicyResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__CreateCertificate                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__CreateCertificate" of service binding "DeviceBinding"

/**

Operation details:

This operation generates a private/public key pair and also can create a self-signed
device
				certificate as a result of key pair generation.
The certificate is created using a suitable
				onboard key pair generation mechanism.<br/>
				If a device supports onboard key pair generation,
the device that supports TLS shall support
				this certificate creation command. And also, if
a device supports onboard key pair generation,
				the device that support IEEE 802.1X shall support
this command for the purpose of key pair
				generation. Certificates and key pairs are identified
using certificate IDs. These IDs are either
				chosen by the certificate generation requester or
by the device (in case that no ID value is
				given).

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/CreateCertificate"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__CreateCertificate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__CreateCertificate*     ns8__CreateCertificate,
    // response parameters:
    struct _ns8__CreateCertificateResponse* ns8__CreateCertificateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__CreateCertificate(
    struct soap *soap,
    // request parameters:
    struct _ns8__CreateCertificate*     ns8__CreateCertificate,
    // response parameters:
    struct _ns8__CreateCertificateResponse* ns8__CreateCertificateResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	CreateCertificate document
//gsoap ns8  service method-encoding:	CreateCertificate literal
//gsoap ns8  service method-action:	CreateCertificate http://www.onvif.org/ver10/device/wsdl/CreateCertificate
int __ns8__CreateCertificate(
    struct _ns8__CreateCertificate*     ns8__CreateCertificate,	///< Request parameter
    struct _ns8__CreateCertificateResponse* ns8__CreateCertificateResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetCertificates                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetCertificates" of service binding "DeviceBinding"

/**

Operation details:

This operation gets all device server certificates (including self-signed) for the
purpose of TLS
				authentication and all device client certificates
for the purpose of IEEE 802.1X authentication.
				This command lists only the TLS server certificates
and IEEE 802.1X client certificates for the
				device (neither trusted CA certificates nor trusted
root certificates). The certificates are
				returned as binary data. A device that supports
TLS shall support this command and the
				certificates shall be encoded using ASN.1 [X.681],
[X.682], [X.683] DER [X.690] encoding
				rules.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetCertificates"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetCertificates(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetCertificates*       ns8__GetCertificates,
    // response parameters:
    struct _ns8__GetCertificatesResponse* ns8__GetCertificatesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetCertificates(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetCertificates*       ns8__GetCertificates,
    // response parameters:
    struct _ns8__GetCertificatesResponse* ns8__GetCertificatesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetCertificates document
//gsoap ns8  service method-encoding:	GetCertificates literal
//gsoap ns8  service method-action:	GetCertificates http://www.onvif.org/ver10/device/wsdl/GetCertificates
int __ns8__GetCertificates(
    struct _ns8__GetCertificates*       ns8__GetCertificates,	///< Request parameter
    struct _ns8__GetCertificatesResponse* ns8__GetCertificatesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetCertificatesStatus                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetCertificatesStatus" of service binding "DeviceBinding"

/**

Operation details:

This operation is specific to TLS functionality. This operation gets the status
				(enabled/disabled) of the device TLS server certificates.
A device that supports TLS shall
				support this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetCertificatesStatus"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetCertificatesStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetCertificatesStatus* ns8__GetCertificatesStatus,
    // response parameters:
    struct _ns8__GetCertificatesStatusResponse* ns8__GetCertificatesStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetCertificatesStatus(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetCertificatesStatus* ns8__GetCertificatesStatus,
    // response parameters:
    struct _ns8__GetCertificatesStatusResponse* ns8__GetCertificatesStatusResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetCertificatesStatus document
//gsoap ns8  service method-encoding:	GetCertificatesStatus literal
//gsoap ns8  service method-action:	GetCertificatesStatus http://www.onvif.org/ver10/device/wsdl/GetCertificatesStatus
int __ns8__GetCertificatesStatus(
    struct _ns8__GetCertificatesStatus* ns8__GetCertificatesStatus,	///< Request parameter
    struct _ns8__GetCertificatesStatusResponse* ns8__GetCertificatesStatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetCertificatesStatus                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetCertificatesStatus" of service binding "DeviceBinding"

/**

Operation details:

This operation is specific to TLS functionality. This operation sets the status
(enable/disable)
				of the device TLS server certificates. A device
that supports TLS shall support this command.
				Typically only one device server certificate is
allowed to be enabled at a time.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetCertificatesStatus"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetCertificatesStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetCertificatesStatus* ns8__SetCertificatesStatus,
    // response parameters:
    struct _ns8__SetCertificatesStatusResponse* ns8__SetCertificatesStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetCertificatesStatus(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetCertificatesStatus* ns8__SetCertificatesStatus,
    // response parameters:
    struct _ns8__SetCertificatesStatusResponse* ns8__SetCertificatesStatusResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetCertificatesStatus document
//gsoap ns8  service method-encoding:	SetCertificatesStatus literal
//gsoap ns8  service method-action:	SetCertificatesStatus http://www.onvif.org/ver10/device/wsdl/SetCertificatesStatus
int __ns8__SetCertificatesStatus(
    struct _ns8__SetCertificatesStatus* ns8__SetCertificatesStatus,	///< Request parameter
    struct _ns8__SetCertificatesStatusResponse* ns8__SetCertificatesStatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__DeleteCertificates                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__DeleteCertificates" of service binding "DeviceBinding"

/**

Operation details:

This operation deletes a certificate or multiple certificates. The device MAY also
delete a
				private/public key pair which is coupled with the
certificate to be deleted. The device that
				support either TLS or IEEE 802.1X shall support
the deletion of a certificate or multiple
				certificates through this command. Either all certificates
are deleted successfully or a fault
				message shall be returned without deleting any certificate.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/DeleteCertificates"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__DeleteCertificates(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__DeleteCertificates*    ns8__DeleteCertificates,
    // response parameters:
    struct _ns8__DeleteCertificatesResponse* ns8__DeleteCertificatesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__DeleteCertificates(
    struct soap *soap,
    // request parameters:
    struct _ns8__DeleteCertificates*    ns8__DeleteCertificates,
    // response parameters:
    struct _ns8__DeleteCertificatesResponse* ns8__DeleteCertificatesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	DeleteCertificates document
//gsoap ns8  service method-encoding:	DeleteCertificates literal
//gsoap ns8  service method-action:	DeleteCertificates http://www.onvif.org/ver10/device/wsdl/DeleteCertificates
int __ns8__DeleteCertificates(
    struct _ns8__DeleteCertificates*    ns8__DeleteCertificates,	///< Request parameter
    struct _ns8__DeleteCertificatesResponse* ns8__DeleteCertificatesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetPkcs10Request                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetPkcs10Request" of service binding "DeviceBinding"

/**

Operation details:

This operation requests a PKCS #10 certificate signature request from the device.
The
				returned information field shall be either formatted
exactly as specified in [PKCS#10] or PEM
				encoded [PKCS#10] format. In order for this command
to work, the device must already have
				a private/public key pair. This key pair should
be referred by CertificateID as specified in the
				input parameter description. This CertificateID
refers to the key pair generated using
				CreateCertificate command.<br/>
				A device that support onboard key pair generation
that supports either TLS or IEEE 802.1X
				using client certificate shall support this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetPkcs10Request"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetPkcs10Request(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetPkcs10Request*      ns8__GetPkcs10Request,
    // response parameters:
    struct _ns8__GetPkcs10RequestResponse* ns8__GetPkcs10RequestResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetPkcs10Request(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetPkcs10Request*      ns8__GetPkcs10Request,
    // response parameters:
    struct _ns8__GetPkcs10RequestResponse* ns8__GetPkcs10RequestResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetPkcs10Request document
//gsoap ns8  service method-encoding:	GetPkcs10Request literal
//gsoap ns8  service method-action:	GetPkcs10Request http://www.onvif.org/ver10/device/wsdl/GetPkcs10Request
int __ns8__GetPkcs10Request(
    struct _ns8__GetPkcs10Request*      ns8__GetPkcs10Request,	///< Request parameter
    struct _ns8__GetPkcs10RequestResponse* ns8__GetPkcs10RequestResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__LoadCertificates                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__LoadCertificates" of service binding "DeviceBinding"

/**

Operation details:

TLS server certificate(s) or IEEE 802.1X client certificate(s) created using the
PKCS#10
				certificate request command can be loaded into the
device using this command (see Section
				8.4.13). The certificate ID in the request shall
be present. The device may sort the received
				certificate(s) based on the public key and subject
information in the certificate(s).
				The certificate ID in the request will be the ID
value the client wish to have. The device is
				supposed to scan the generated key pairs present
in the device to identify which is the
				correspondent key pair with the loaded certificate
and then make the link between the
				certificate and the key pair.<br/>
				A device that supports onboard key pair generation
that support either TLS or IEEE 802.1X
				shall support this command.<br/>
				The certificates shall be encoded using ASN.1 [X.681],
[X.682], [X.683] DER [X.690] encoding
				rules.<br/>
				This command is applicable to any device type, although
the parameter name is called for
				historical reasons NVTCertificate.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/LoadCertificates"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__LoadCertificates(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__LoadCertificates*      ns8__LoadCertificates,
    // response parameters:
    struct _ns8__LoadCertificatesResponse* ns8__LoadCertificatesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__LoadCertificates(
    struct soap *soap,
    // request parameters:
    struct _ns8__LoadCertificates*      ns8__LoadCertificates,
    // response parameters:
    struct _ns8__LoadCertificatesResponse* ns8__LoadCertificatesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	LoadCertificates document
//gsoap ns8  service method-encoding:	LoadCertificates literal
//gsoap ns8  service method-action:	LoadCertificates http://www.onvif.org/ver10/device/wsdl/LoadCertificates
int __ns8__LoadCertificates(
    struct _ns8__LoadCertificates*      ns8__LoadCertificates,	///< Request parameter
    struct _ns8__LoadCertificatesResponse* ns8__LoadCertificatesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetClientCertificateMode                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetClientCertificateMode" of service binding "DeviceBinding"

/**

Operation details:

This operation is specific to TLS functionality. This operation gets the status
				(enabled/disabled) of the device TLS client authentication.
A device that supports TLS shall
				support this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetClientCertificateMode"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetClientCertificateMode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetClientCertificateMode* ns8__GetClientCertificateMode,
    // response parameters:
    struct _ns8__GetClientCertificateModeResponse* ns8__GetClientCertificateModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetClientCertificateMode(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetClientCertificateMode* ns8__GetClientCertificateMode,
    // response parameters:
    struct _ns8__GetClientCertificateModeResponse* ns8__GetClientCertificateModeResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetClientCertificateMode document
//gsoap ns8  service method-encoding:	GetClientCertificateMode literal
//gsoap ns8  service method-action:	GetClientCertificateMode http://www.onvif.org/ver10/device/wsdl/GetClientCertificateMode
int __ns8__GetClientCertificateMode(
    struct _ns8__GetClientCertificateMode* ns8__GetClientCertificateMode,	///< Request parameter
    struct _ns8__GetClientCertificateModeResponse* ns8__GetClientCertificateModeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetClientCertificateMode                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetClientCertificateMode" of service binding "DeviceBinding"

/**

Operation details:

This operation is specific to TLS functionality. This operation sets the status
				(enabled/disabled) of the device TLS client authentication.
A device that supports TLS shall
				support this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetClientCertificateMode"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetClientCertificateMode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetClientCertificateMode* ns8__SetClientCertificateMode,
    // response parameters:
    struct _ns8__SetClientCertificateModeResponse* ns8__SetClientCertificateModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetClientCertificateMode(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetClientCertificateMode* ns8__SetClientCertificateMode,
    // response parameters:
    struct _ns8__SetClientCertificateModeResponse* ns8__SetClientCertificateModeResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetClientCertificateMode document
//gsoap ns8  service method-encoding:	SetClientCertificateMode literal
//gsoap ns8  service method-action:	SetClientCertificateMode http://www.onvif.org/ver10/device/wsdl/SetClientCertificateMode
int __ns8__SetClientCertificateMode(
    struct _ns8__SetClientCertificateMode* ns8__SetClientCertificateMode,	///< Request parameter
    struct _ns8__SetClientCertificateModeResponse* ns8__SetClientCertificateModeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetRelayOutputs                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetRelayOutputs" of service binding "DeviceBinding"

/**

Operation details:

This operation gets a list of all available relay outputs and their settings.<br/>
				This method has been depricated with version 2.0.
Refer to the DeviceIO service.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetRelayOutputs"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetRelayOutputs(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetRelayOutputs*       ns8__GetRelayOutputs,
    // response parameters:
    struct _ns8__GetRelayOutputsResponse* ns8__GetRelayOutputsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetRelayOutputs(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetRelayOutputs*       ns8__GetRelayOutputs,
    // response parameters:
    struct _ns8__GetRelayOutputsResponse* ns8__GetRelayOutputsResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetRelayOutputs document
//gsoap ns8  service method-encoding:	GetRelayOutputs literal
//gsoap ns8  service method-action:	GetRelayOutputs http://www.onvif.org/ver10/device/wsdl/GetRelayOutputs
int __ns8__GetRelayOutputs(
    struct _ns8__GetRelayOutputs*       ns8__GetRelayOutputs,	///< Request parameter
    struct _ns8__GetRelayOutputsResponse* ns8__GetRelayOutputsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetRelayOutputSettings                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetRelayOutputSettings" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the settings of a relay output.
				<br/>This method has been depricated with version
2.0. Refer to the DeviceIO service.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetRelayOutputSettings"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetRelayOutputSettings(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetRelayOutputSettings* ns8__SetRelayOutputSettings,
    // response parameters:
    struct _ns8__SetRelayOutputSettingsResponse* ns8__SetRelayOutputSettingsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetRelayOutputSettings(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetRelayOutputSettings* ns8__SetRelayOutputSettings,
    // response parameters:
    struct _ns8__SetRelayOutputSettingsResponse* ns8__SetRelayOutputSettingsResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetRelayOutputSettings document
//gsoap ns8  service method-encoding:	SetRelayOutputSettings literal
//gsoap ns8  service method-action:	SetRelayOutputSettings http://www.onvif.org/ver10/device/wsdl/SetRelayOutputSettings
int __ns8__SetRelayOutputSettings(
    struct _ns8__SetRelayOutputSettings* ns8__SetRelayOutputSettings,	///< Request parameter
    struct _ns8__SetRelayOutputSettingsResponse* ns8__SetRelayOutputSettingsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetRelayOutputState                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetRelayOutputState" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the state of a relay output.
				<br/>This method has been depricated with version
2.0. Refer to the DeviceIO service.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetRelayOutputState"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetRelayOutputState(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetRelayOutputState*   ns8__SetRelayOutputState,
    // response parameters:
    struct _ns8__SetRelayOutputStateResponse* ns8__SetRelayOutputStateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetRelayOutputState(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetRelayOutputState*   ns8__SetRelayOutputState,
    // response parameters:
    struct _ns8__SetRelayOutputStateResponse* ns8__SetRelayOutputStateResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetRelayOutputState document
//gsoap ns8  service method-encoding:	SetRelayOutputState literal
//gsoap ns8  service method-action:	SetRelayOutputState http://www.onvif.org/ver10/device/wsdl/SetRelayOutputState
int __ns8__SetRelayOutputState(
    struct _ns8__SetRelayOutputState*   ns8__SetRelayOutputState,	///< Request parameter
    struct _ns8__SetRelayOutputStateResponse* ns8__SetRelayOutputStateResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SendAuxiliaryCommand                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SendAuxiliaryCommand" of service binding "DeviceBinding"

/**

Operation details:

This section describes operations to manage auxiliary commands supported by a device,
such
				as controlling an Infrared (IR) lamp, a heater or
a wiper or a thermometer that is connected to
				the device.<br/>
				The supported commands can be retrieved by the AuxiliaryData
parameter which derives from
				GetCapabilities command response. The command transmitted
by using this command should
				1 There is no GetRelayState command; the current
logical state of the relay output is transmitted via notification
				and their properties.<br/>
				match one of the supported commands listed in the
AuxiliaryData response. If the capability
				command response lists only irlampon command, then
the SendAuxiliaryCommand argument
				will be irlampon, which may indicate turning the
connected IR lamp on.
				A device that indicates auxiliary service capability
shall support this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SendAuxiliaryCommand"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SendAuxiliaryCommand(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SendAuxiliaryCommand*  ns8__SendAuxiliaryCommand,
    // response parameters:
    struct _ns8__SendAuxiliaryCommandResponse* ns8__SendAuxiliaryCommandResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SendAuxiliaryCommand(
    struct soap *soap,
    // request parameters:
    struct _ns8__SendAuxiliaryCommand*  ns8__SendAuxiliaryCommand,
    // response parameters:
    struct _ns8__SendAuxiliaryCommandResponse* ns8__SendAuxiliaryCommandResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SendAuxiliaryCommand document
//gsoap ns8  service method-encoding:	SendAuxiliaryCommand literal
//gsoap ns8  service method-action:	SendAuxiliaryCommand http://www.onvif.org/ver10/device/wsdl/SendAuxiliaryCommand
int __ns8__SendAuxiliaryCommand(
    struct _ns8__SendAuxiliaryCommand*  ns8__SendAuxiliaryCommand,	///< Request parameter
    struct _ns8__SendAuxiliaryCommandResponse* ns8__SendAuxiliaryCommandResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetCACertificates                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetCACertificates" of service binding "DeviceBinding"

/**

Operation details:

CA certificates will be loaded into a device and be used for the sake of following
two cases.
				The one is for the purpose of TLS client authentication
in TLS server function. The other one
				is for the purpose of Authentication Server authentication
in IEEE 802.1X function. This
				operation gets all CA certificates loaded into a
device. A device that supports either TLS client
				authentication or IEEE 802.1X shall support this
command and the returned certificates shall
				be encoded using ASN.1 [X.681], [X.682], [X.683]
DER [X.690] encoding rules.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetCACertificates"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetCACertificates(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetCACertificates*     ns8__GetCACertificates,
    // response parameters:
    struct _ns8__GetCACertificatesResponse* ns8__GetCACertificatesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetCACertificates(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetCACertificates*     ns8__GetCACertificates,
    // response parameters:
    struct _ns8__GetCACertificatesResponse* ns8__GetCACertificatesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetCACertificates document
//gsoap ns8  service method-encoding:	GetCACertificates literal
//gsoap ns8  service method-action:	GetCACertificates http://www.onvif.org/ver10/device/wsdl/GetCACertificates
int __ns8__GetCACertificates(
    struct _ns8__GetCACertificates*     ns8__GetCACertificates,	///< Request parameter
    struct _ns8__GetCACertificatesResponse* ns8__GetCACertificatesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__LoadCertificateWithPrivateKey                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__LoadCertificateWithPrivateKey" of service binding "DeviceBinding"

/**

Operation details:

There might be some cases that a Certificate Authority or some other equivalent
creates a
				certificate without having PKCS#10 certificate signing
request. In such cases, the certificate
				will be bundled in conjunction with its private
key. This command will be used for such use
				case scenarios. The certificate ID in the request
is optionally set to the ID value the client
				wish to have. If the certificate ID is not specified
in the request, device can choose the ID
				accordingly.<br/>
				This operation imports a private/public key pair
into the device.
				The certificates shall be encoded using ASN.1 [X.681],
[X.682], [X.683] DER [X.690] encoding
				rules.<br/>
				A device that does not support onboard key pair
generation and support either TLS or IEEE
				802.1X using client certificate shall support this
command. A device that support onboard key
				pair generation MAY support this command. The security
policy of a device that supports this
				operation should make sure that the private key
is sufficiently protected.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/LoadCertificateWithPrivateKey"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__LoadCertificateWithPrivateKey(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__LoadCertificateWithPrivateKey* ns8__LoadCertificateWithPrivateKey,
    // response parameters:
    struct _ns8__LoadCertificateWithPrivateKeyResponse* ns8__LoadCertificateWithPrivateKeyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__LoadCertificateWithPrivateKey(
    struct soap *soap,
    // request parameters:
    struct _ns8__LoadCertificateWithPrivateKey* ns8__LoadCertificateWithPrivateKey,
    // response parameters:
    struct _ns8__LoadCertificateWithPrivateKeyResponse* ns8__LoadCertificateWithPrivateKeyResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	LoadCertificateWithPrivateKey document
//gsoap ns8  service method-encoding:	LoadCertificateWithPrivateKey literal
//gsoap ns8  service method-action:	LoadCertificateWithPrivateKey http://www.onvif.org/ver10/device/wsdl/LoadCertificateWithPrivateKey
int __ns8__LoadCertificateWithPrivateKey(
    struct _ns8__LoadCertificateWithPrivateKey* ns8__LoadCertificateWithPrivateKey,	///< Request parameter
    struct _ns8__LoadCertificateWithPrivateKeyResponse* ns8__LoadCertificateWithPrivateKeyResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetCertificateInformation                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetCertificateInformation" of service binding "DeviceBinding"

/**

Operation details:

This operation requests the information of a certificate specified by certificate
ID. The device
				should respond with its Issuer DN, Subject
DN, Key usage, "Extended key usage, Key
				Length, Version, Serial Number, Signature
Algorithm and Validity data as the
				information of the certificate, as long as the device
can retrieve such information from the
				specified certificate.<br/>
				A device that supports either TLS or IEEE 802.1X
should support this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetCertificateInformation"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetCertificateInformation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetCertificateInformation* ns8__GetCertificateInformation,
    // response parameters:
    struct _ns8__GetCertificateInformationResponse* ns8__GetCertificateInformationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetCertificateInformation(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetCertificateInformation* ns8__GetCertificateInformation,
    // response parameters:
    struct _ns8__GetCertificateInformationResponse* ns8__GetCertificateInformationResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetCertificateInformation document
//gsoap ns8  service method-encoding:	GetCertificateInformation literal
//gsoap ns8  service method-action:	GetCertificateInformation http://www.onvif.org/ver10/device/wsdl/GetCertificateInformation
int __ns8__GetCertificateInformation(
    struct _ns8__GetCertificateInformation* ns8__GetCertificateInformation,	///< Request parameter
    struct _ns8__GetCertificateInformationResponse* ns8__GetCertificateInformationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__LoadCACertificates                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__LoadCACertificates" of service binding "DeviceBinding"

/**

Operation details:

This command is used when it is necessary to load trusted CA certificates or trusted
root
				certificates for the purpose of verification for
its counterpart i.e. client certificate verification in
				TLS function or server certificate verification
in IEEE 802.1X function.<br/>
				A device that support either TLS or IEEE 802.1X
shall support this command. As for the
				supported certificate format, either DER format
or PEM format is possible to be used. But a
				device that support this command shall support at
least DER format as supported format type.
				The device may sort the received certificate(s)
based on the public key and subject
				information in the certificate(s). Either all CA
certificates are loaded successfully or a fault
				message shall be returned without loading any CA
certificate.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/LoadCACertificates"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__LoadCACertificates(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__LoadCACertificates*    ns8__LoadCACertificates,
    // response parameters:
    struct _ns8__LoadCACertificatesResponse* ns8__LoadCACertificatesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__LoadCACertificates(
    struct soap *soap,
    // request parameters:
    struct _ns8__LoadCACertificates*    ns8__LoadCACertificates,
    // response parameters:
    struct _ns8__LoadCACertificatesResponse* ns8__LoadCACertificatesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	LoadCACertificates document
//gsoap ns8  service method-encoding:	LoadCACertificates literal
//gsoap ns8  service method-action:	LoadCACertificates http://www.onvif.org/ver10/device/wsdl/LoadCACertificates
int __ns8__LoadCACertificates(
    struct _ns8__LoadCACertificates*    ns8__LoadCACertificates,	///< Request parameter
    struct _ns8__LoadCACertificatesResponse* ns8__LoadCACertificatesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__CreateDot1XConfiguration                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__CreateDot1XConfiguration" of service binding "DeviceBinding"

/**

Operation details:

This operation newly creates IEEE 802.1X configuration parameter set of the device.
The
				device shall support this command if it supports
IEEE 802.1X. If the device receives this
				request with already existing configuration token
(Dot1XConfigurationToken) specification, the
				device should respond with 'ter:ReferenceToken '
error to indicate there is some configuration
				conflict.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/CreateDot1XConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__CreateDot1XConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__CreateDot1XConfiguration* ns8__CreateDot1XConfiguration,
    // response parameters:
    struct _ns8__CreateDot1XConfigurationResponse* ns8__CreateDot1XConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__CreateDot1XConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns8__CreateDot1XConfiguration* ns8__CreateDot1XConfiguration,
    // response parameters:
    struct _ns8__CreateDot1XConfigurationResponse* ns8__CreateDot1XConfigurationResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	CreateDot1XConfiguration document
//gsoap ns8  service method-encoding:	CreateDot1XConfiguration literal
//gsoap ns8  service method-action:	CreateDot1XConfiguration http://www.onvif.org/ver10/device/wsdl/CreateDot1XConfiguration
int __ns8__CreateDot1XConfiguration(
    struct _ns8__CreateDot1XConfiguration* ns8__CreateDot1XConfiguration,	///< Request parameter
    struct _ns8__CreateDot1XConfigurationResponse* ns8__CreateDot1XConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetDot1XConfiguration                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetDot1XConfiguration" of service binding "DeviceBinding"

/**

Operation details:

While the CreateDot1XConfiguration command is trying to create a new configuration
				parameter set, this operation modifies existing
IEEE 802.1X configuration parameter set of
				the device. A device that support IEEE 802.1X shall
support this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetDot1XConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetDot1XConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetDot1XConfiguration* ns8__SetDot1XConfiguration,
    // response parameters:
    struct _ns8__SetDot1XConfigurationResponse* ns8__SetDot1XConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetDot1XConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetDot1XConfiguration* ns8__SetDot1XConfiguration,
    // response parameters:
    struct _ns8__SetDot1XConfigurationResponse* ns8__SetDot1XConfigurationResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetDot1XConfiguration document
//gsoap ns8  service method-encoding:	SetDot1XConfiguration literal
//gsoap ns8  service method-action:	SetDot1XConfiguration http://www.onvif.org/ver10/device/wsdl/SetDot1XConfiguration
int __ns8__SetDot1XConfiguration(
    struct _ns8__SetDot1XConfiguration* ns8__SetDot1XConfiguration,	///< Request parameter
    struct _ns8__SetDot1XConfigurationResponse* ns8__SetDot1XConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetDot1XConfiguration                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetDot1XConfiguration" of service binding "DeviceBinding"

/**

Operation details:

This operation gets one IEEE 802.1X configuration parameter set from the device
by
				specifying the configuration token (Dot1XConfigurationToken).<br/>
				A device that supports IEEE 802.1X shall support
this command.
				Regardless of whether the 802.1X method in the retrieved
configuration has a password or
				not, the device shall not include the Password element
in the response.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetDot1XConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetDot1XConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetDot1XConfiguration* ns8__GetDot1XConfiguration,
    // response parameters:
    struct _ns8__GetDot1XConfigurationResponse* ns8__GetDot1XConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetDot1XConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetDot1XConfiguration* ns8__GetDot1XConfiguration,
    // response parameters:
    struct _ns8__GetDot1XConfigurationResponse* ns8__GetDot1XConfigurationResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetDot1XConfiguration document
//gsoap ns8  service method-encoding:	GetDot1XConfiguration literal
//gsoap ns8  service method-action:	GetDot1XConfiguration http://www.onvif.org/ver10/device/wsdl/GetDot1XConfiguration
int __ns8__GetDot1XConfiguration(
    struct _ns8__GetDot1XConfiguration* ns8__GetDot1XConfiguration,	///< Request parameter
    struct _ns8__GetDot1XConfigurationResponse* ns8__GetDot1XConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetDot1XConfigurations                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetDot1XConfigurations" of service binding "DeviceBinding"

/**

Operation details:

This operation gets all the existing IEEE 802.1X configuration parameter sets from
the device.
				The device shall respond with all the IEEE 802.1X
configurations so that the client can get to
				know how many IEEE 802.1X configurations are existing
and how they are configured.<br/>
				A device that support IEEE 802.1X shall support
this command.<br/>
				Regardless of whether the 802.1X method in the retrieved
configuration has a password or
				not, the device shall not include the Password element
in the response.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetDot1XConfigurations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetDot1XConfigurations* ns8__GetDot1XConfigurations,
    // response parameters:
    struct _ns8__GetDot1XConfigurationsResponse* ns8__GetDot1XConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetDot1XConfigurations(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetDot1XConfigurations* ns8__GetDot1XConfigurations,
    // response parameters:
    struct _ns8__GetDot1XConfigurationsResponse* ns8__GetDot1XConfigurationsResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetDot1XConfigurations document
//gsoap ns8  service method-encoding:	GetDot1XConfigurations literal
//gsoap ns8  service method-action:	GetDot1XConfigurations http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurations
int __ns8__GetDot1XConfigurations(
    struct _ns8__GetDot1XConfigurations* ns8__GetDot1XConfigurations,	///< Request parameter
    struct _ns8__GetDot1XConfigurationsResponse* ns8__GetDot1XConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__DeleteDot1XConfiguration                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__DeleteDot1XConfiguration" of service binding "DeviceBinding"

/**

Operation details:

This operation deletes an IEEE 802.1X configuration parameter set from the device.
Which
				configuration should be deleted is specified by
the 'Dot1XConfigurationToken' in the request.
				A device that support IEEE 802.1X shall support
this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/DeleteDot1XConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__DeleteDot1XConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__DeleteDot1XConfiguration* ns8__DeleteDot1XConfiguration,
    // response parameters:
    struct _ns8__DeleteDot1XConfigurationResponse* ns8__DeleteDot1XConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__DeleteDot1XConfiguration(
    struct soap *soap,
    // request parameters:
    struct _ns8__DeleteDot1XConfiguration* ns8__DeleteDot1XConfiguration,
    // response parameters:
    struct _ns8__DeleteDot1XConfigurationResponse* ns8__DeleteDot1XConfigurationResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	DeleteDot1XConfiguration document
//gsoap ns8  service method-encoding:	DeleteDot1XConfiguration literal
//gsoap ns8  service method-action:	DeleteDot1XConfiguration http://www.onvif.org/ver10/device/wsdl/DeleteDot1XConfiguration
int __ns8__DeleteDot1XConfiguration(
    struct _ns8__DeleteDot1XConfiguration* ns8__DeleteDot1XConfiguration,	///< Request parameter
    struct _ns8__DeleteDot1XConfigurationResponse* ns8__DeleteDot1XConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetDot11Capabilities                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetDot11Capabilities" of service binding "DeviceBinding"

/**

Operation details:

This operation returns the IEEE802.11 capabilities. The device shall support
				this operation.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetDot11Capabilities"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetDot11Capabilities(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetDot11Capabilities*  ns8__GetDot11Capabilities,
    // response parameters:
    struct _ns8__GetDot11CapabilitiesResponse* ns8__GetDot11CapabilitiesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetDot11Capabilities(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetDot11Capabilities*  ns8__GetDot11Capabilities,
    // response parameters:
    struct _ns8__GetDot11CapabilitiesResponse* ns8__GetDot11CapabilitiesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetDot11Capabilities document
//gsoap ns8  service method-encoding:	GetDot11Capabilities literal
//gsoap ns8  service method-action:	GetDot11Capabilities http://www.onvif.org/ver10/device/wsdl/GetDot11Capabilities
int __ns8__GetDot11Capabilities(
    struct _ns8__GetDot11Capabilities*  ns8__GetDot11Capabilities,	///< Request parameter
    struct _ns8__GetDot11CapabilitiesResponse* ns8__GetDot11CapabilitiesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetDot11Status                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetDot11Status" of service binding "DeviceBinding"

/**

Operation details:

This operation returns the status of a wireless network interface. The device shall
support this
				command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetDot11Status"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetDot11Status(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetDot11Status*        ns8__GetDot11Status,
    // response parameters:
    struct _ns8__GetDot11StatusResponse* ns8__GetDot11StatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetDot11Status(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetDot11Status*        ns8__GetDot11Status,
    // response parameters:
    struct _ns8__GetDot11StatusResponse* ns8__GetDot11StatusResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetDot11Status document
//gsoap ns8  service method-encoding:	GetDot11Status literal
//gsoap ns8  service method-action:	GetDot11Status http://www.onvif.org/ver10/device/wsdl/GetDot11Status
int __ns8__GetDot11Status(
    struct _ns8__GetDot11Status*        ns8__GetDot11Status,	///< Request parameter
    struct _ns8__GetDot11StatusResponse* ns8__GetDot11StatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__ScanAvailableDot11Networks                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__ScanAvailableDot11Networks" of service binding "DeviceBinding"

/**

Operation details:

This operation returns a lists of the wireless networks in range of the device.
A device should
				support this operation.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/ScanAvailableDot11Networks"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__ScanAvailableDot11Networks(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__ScanAvailableDot11Networks* ns8__ScanAvailableDot11Networks,
    // response parameters:
    struct _ns8__ScanAvailableDot11NetworksResponse* ns8__ScanAvailableDot11NetworksResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__ScanAvailableDot11Networks(
    struct soap *soap,
    // request parameters:
    struct _ns8__ScanAvailableDot11Networks* ns8__ScanAvailableDot11Networks,
    // response parameters:
    struct _ns8__ScanAvailableDot11NetworksResponse* ns8__ScanAvailableDot11NetworksResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	ScanAvailableDot11Networks document
//gsoap ns8  service method-encoding:	ScanAvailableDot11Networks literal
//gsoap ns8  service method-action:	ScanAvailableDot11Networks http://www.onvif.org/ver10/device/wsdl/ScanAvailableDot11Networks
int __ns8__ScanAvailableDot11Networks(
    struct _ns8__ScanAvailableDot11Networks* ns8__ScanAvailableDot11Networks,	///< Request parameter
    struct _ns8__ScanAvailableDot11NetworksResponse* ns8__ScanAvailableDot11NetworksResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetSystemUris                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetSystemUris" of service binding "DeviceBinding"

/**

Operation details:

This operation is used to retrieve URIs from which system information may be downloaded
				using HTTP. URIs may be returned for the following
system information:<br/>
				System Logs. Multiple system logs may be returned,
of different types. The exact format of
				the system logs is outside the scope of this specification.<br/>
				Support Information. This consists of arbitrary
device diagnostics information from a device.
				The exact format of the diagnostic information is
outside the scope of this specification.<br/>
				System Backup. The received file is a backup file
that can be used to restore the current
				device configuration at a later date. The exact
format of the backup configuration file is
				outside the scope of this specification.<br/>
				If the device allows retrieval of system logs, support
information or system backup data, it
				should make them available via HTTP GET. If it does,
it shall support the GetSystemUris
				command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetSystemUris"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetSystemUris(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetSystemUris*         ns8__GetSystemUris,
    // response parameters:
    struct _ns8__GetSystemUrisResponse* ns8__GetSystemUrisResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetSystemUris(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetSystemUris*         ns8__GetSystemUris,
    // response parameters:
    struct _ns8__GetSystemUrisResponse* ns8__GetSystemUrisResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetSystemUris document
//gsoap ns8  service method-encoding:	GetSystemUris literal
//gsoap ns8  service method-action:	GetSystemUris http://www.onvif.org/ver10/device/wsdl/GetSystemUris
int __ns8__GetSystemUris(
    struct _ns8__GetSystemUris*         ns8__GetSystemUris,	///< Request parameter
    struct _ns8__GetSystemUrisResponse* ns8__GetSystemUrisResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__StartFirmwareUpgrade                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__StartFirmwareUpgrade" of service binding "DeviceBinding"

/**

Operation details:

This operation initiates a firmware upgrade using the HTTP POST mechanism. The response
				to the command includes an HTTP URL to which the
upgrade file may be uploaded. The
				actual upgrade takes place as soon as the HTTP POST
operation has completed. The device
				should support firmware upgrade through the StartFirmwareUpgrade
command. The exact
				format of the firmware data is outside the scope
of this specification.
				Firmware upgrade over HTTP may be achieved using
the following steps:<ol>
	<li>Client calls StartFirmwareUpgrade.</li>
	<li>Server responds with upload URI and optional delay value.</li>
	<li>Client waits for delay duration if specified by server.</li>
	<li>Client transmits the firmware image to the upload URI using HTTP POST.</li>
	<li>Server reprograms itself using the uploaded image, then reboots.</li>
</ol>
				If the firmware upgrade fails because the upgrade
file was invalid, the HTTP POST response
				shall be 415 Unsupported Media Type. If the
firmware upgrade fails due to an error at the
				device, the HTTP POST response shall be 500 Internal
Server Error.<br/>
				The value of the Content-Type header in the HTTP
POST request shall be application/octetstream.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/StartFirmwareUpgrade"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__StartFirmwareUpgrade(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__StartFirmwareUpgrade*  ns8__StartFirmwareUpgrade,
    // response parameters:
    struct _ns8__StartFirmwareUpgradeResponse* ns8__StartFirmwareUpgradeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__StartFirmwareUpgrade(
    struct soap *soap,
    // request parameters:
    struct _ns8__StartFirmwareUpgrade*  ns8__StartFirmwareUpgrade,
    // response parameters:
    struct _ns8__StartFirmwareUpgradeResponse* ns8__StartFirmwareUpgradeResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	StartFirmwareUpgrade document
//gsoap ns8  service method-encoding:	StartFirmwareUpgrade literal
//gsoap ns8  service method-action:	StartFirmwareUpgrade http://www.onvif.org/ver10/device/wsdl/StartFirmwareUpgrade
int __ns8__StartFirmwareUpgrade(
    struct _ns8__StartFirmwareUpgrade*  ns8__StartFirmwareUpgrade,	///< Request parameter
    struct _ns8__StartFirmwareUpgradeResponse* ns8__StartFirmwareUpgradeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__StartSystemRestore                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__StartSystemRestore" of service binding "DeviceBinding"

/**

Operation details:

This operation initiates a system restore from backed up configuration data using
the HTTP
				POST mechanism. The response to the command includes
an HTTP URL to which the backup
				file may be uploaded. The actual restore takes place
as soon as the HTTP POST operation
				has completed. Devices should support system restore
through the StartSystemRestore
				command. The exact format of the backup configuration
data is outside the scope of this
				specification.<br/>
				System restore over HTTP may be achieved using the
following steps:<ol>
	<li>Client calls StartSystemRestore.</li>
	<li>Server responds with upload URI.</li>
	<li>Client transmits the configuration data to the upload URI using HTTP
POST.</li>
	<li>Server applies the uploaded configuration, then reboots if necessary.</li>
</ol>
				If the system restore fails because the uploaded
file was invalid, the HTTP POST response
				shall be 415 Unsupported Media Type. If the
system restore fails due to an error at the
				device, the HTTP POST response shall be 500 Internal
Server Error.<br/>
				The value of the Content-Type header in the HTTP
POST request shall be application/octetstream.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/StartSystemRestore"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__StartSystemRestore(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__StartSystemRestore*    ns8__StartSystemRestore,
    // response parameters:
    struct _ns8__StartSystemRestoreResponse* ns8__StartSystemRestoreResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__StartSystemRestore(
    struct soap *soap,
    // request parameters:
    struct _ns8__StartSystemRestore*    ns8__StartSystemRestore,
    // response parameters:
    struct _ns8__StartSystemRestoreResponse* ns8__StartSystemRestoreResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	StartSystemRestore document
//gsoap ns8  service method-encoding:	StartSystemRestore literal
//gsoap ns8  service method-action:	StartSystemRestore http://www.onvif.org/ver10/device/wsdl/StartSystemRestore
int __ns8__StartSystemRestore(
    struct _ns8__StartSystemRestore*    ns8__StartSystemRestore,	///< Request parameter
    struct _ns8__StartSystemRestoreResponse* ns8__StartSystemRestoreResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetServices                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetServices" of service binding "DeviceBinding"

/**

Operation details:

Returns information about services on the device. Either information about all services
or the selected services can be returned.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetServices"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetServices(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetServices*           ns8__GetServices,
    // response parameters:
    struct _ns8__GetServicesResponse*   ns8__GetServicesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetServices(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetServices*           ns8__GetServices,
    // response parameters:
    struct _ns8__GetServicesResponse*   ns8__GetServicesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetServices document
//gsoap ns8  service method-encoding:	GetServices literal
//gsoap ns8  service method-action:	GetServices http://www.onvif.org/ver10/device/wsdl/GetServices
int __ns8__GetServices(
    struct _ns8__GetServices*           ns8__GetServices,	///< Request parameter
    struct _ns8__GetServicesResponse*   ns8__GetServicesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetServiceCapabilities                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetServiceCapabilities" of service binding "DeviceBinding"

/**

Operation details:

Returns the capabilities of the device service. The result is returned in a typed
answer.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetServiceCapabilities"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetServiceCapabilities(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetServiceCapabilities* ns8__GetServiceCapabilities,
    // response parameters:
    struct _ns8__GetServiceCapabilitiesResponse* ns8__GetServiceCapabilitiesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetServiceCapabilities(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetServiceCapabilities* ns8__GetServiceCapabilities,
    // response parameters:
    struct _ns8__GetServiceCapabilitiesResponse* ns8__GetServiceCapabilitiesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetServiceCapabilities document
//gsoap ns8  service method-encoding:	GetServiceCapabilities literal
//gsoap ns8  service method-action:	GetServiceCapabilities http://www.onvif.org/ver10/device/wsdl/GetServiceCapabilities
int __ns8__GetServiceCapabilities(
    struct _ns8__GetServiceCapabilities* ns8__GetServiceCapabilities,	///< Request parameter
    struct _ns8__GetServiceCapabilitiesResponse* ns8__GetServiceCapabilitiesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetDeviceInformation_                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetDeviceInformation_" of service binding "DeviceBinding"

/**

Operation details:

This operation gets basic device information from the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetDeviceInformation"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetDeviceInformation_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetDeviceInformation*  ns8__GetDeviceInformation,
    // response parameters:
    struct _ns8__GetDeviceInformationResponse* ns8__GetDeviceInformationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetDeviceInformation_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetDeviceInformation*  ns8__GetDeviceInformation,
    // response parameters:
    struct _ns8__GetDeviceInformationResponse* ns8__GetDeviceInformationResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetDeviceInformation_ document
//gsoap ns8  service method-encoding:	GetDeviceInformation_ literal
//gsoap ns8  service method-action:	GetDeviceInformation_ http://www.onvif.org/ver10/device/wsdl/GetDeviceInformation
int __ns8__GetDeviceInformation_(
    struct _ns8__GetDeviceInformation*  ns8__GetDeviceInformation,	///< Request parameter
    struct _ns8__GetDeviceInformationResponse* ns8__GetDeviceInformationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetSystemDateAndTime_                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetSystemDateAndTime_" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the device system date and time. The device shall support the
				configuration of the daylight saving setting and
of the manual system date and time (if
				applicable) or indication of NTP time (if applicable)
through the SetSystemDateAndTime
				command. <br/>
				If system time and date are set manually, the client
shall include UTCDateTime in the request.<br/>
				A TimeZone token which is not formed according to
the rules of IEEE 1003.1 section 8.3 is considered as invalid timezone.
			

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetSystemDateAndTime"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetSystemDateAndTime_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetSystemDateAndTime*  ns8__SetSystemDateAndTime,
    // response parameters:
    struct _ns8__SetSystemDateAndTimeResponse* ns8__SetSystemDateAndTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetSystemDateAndTime_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetSystemDateAndTime*  ns8__SetSystemDateAndTime,
    // response parameters:
    struct _ns8__SetSystemDateAndTimeResponse* ns8__SetSystemDateAndTimeResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetSystemDateAndTime_ document
//gsoap ns8  service method-encoding:	SetSystemDateAndTime_ literal
//gsoap ns8  service method-action:	SetSystemDateAndTime_ http://www.onvif.org/ver10/device/wsdl/SetSystemDateAndTime
int __ns8__SetSystemDateAndTime_(
    struct _ns8__SetSystemDateAndTime*  ns8__SetSystemDateAndTime,	///< Request parameter
    struct _ns8__SetSystemDateAndTimeResponse* ns8__SetSystemDateAndTimeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetSystemDateAndTime_                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetSystemDateAndTime_" of service binding "DeviceBinding"

/**

Operation details:

This operation gets the device system date and time. The device shall support the
return of
				the daylight saving setting and of the manual system
date and time (if applicable) or indication
				of NTP time (if applicable) through the GetSystemDateAndTime
command.<br/>
				A device shall provide the UTCDateTime information.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetSystemDateAndTime"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetSystemDateAndTime_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetSystemDateAndTime*  ns8__GetSystemDateAndTime,
    // response parameters:
    struct _ns8__GetSystemDateAndTimeResponse* ns8__GetSystemDateAndTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetSystemDateAndTime_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetSystemDateAndTime*  ns8__GetSystemDateAndTime,
    // response parameters:
    struct _ns8__GetSystemDateAndTimeResponse* ns8__GetSystemDateAndTimeResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetSystemDateAndTime_ document
//gsoap ns8  service method-encoding:	GetSystemDateAndTime_ literal
//gsoap ns8  service method-action:	GetSystemDateAndTime_ http://www.onvif.org/ver10/device/wsdl/GetSystemDateAndTime
int __ns8__GetSystemDateAndTime_(
    struct _ns8__GetSystemDateAndTime*  ns8__GetSystemDateAndTime,	///< Request parameter
    struct _ns8__GetSystemDateAndTimeResponse* ns8__GetSystemDateAndTimeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetSystemFactoryDefault_                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetSystemFactoryDefault_" of service binding "DeviceBinding"

/**

Operation details:

This operation reloads the parameters on the device to their factory default values.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetSystemFactoryDefault"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetSystemFactoryDefault_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetSystemFactoryDefault* ns8__SetSystemFactoryDefault,
    // response parameters:
    struct _ns8__SetSystemFactoryDefaultResponse* ns8__SetSystemFactoryDefaultResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetSystemFactoryDefault_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetSystemFactoryDefault* ns8__SetSystemFactoryDefault,
    // response parameters:
    struct _ns8__SetSystemFactoryDefaultResponse* ns8__SetSystemFactoryDefaultResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetSystemFactoryDefault_ document
//gsoap ns8  service method-encoding:	SetSystemFactoryDefault_ literal
//gsoap ns8  service method-action:	SetSystemFactoryDefault_ http://www.onvif.org/ver10/device/wsdl/SetSystemFactoryDefault
int __ns8__SetSystemFactoryDefault_(
    struct _ns8__SetSystemFactoryDefault* ns8__SetSystemFactoryDefault,	///< Request parameter
    struct _ns8__SetSystemFactoryDefaultResponse* ns8__SetSystemFactoryDefaultResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__UpgradeSystemFirmware_                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__UpgradeSystemFirmware_" of service binding "DeviceBinding"

/**

Operation details:

This operation upgrades a device firmware version. After a successful upgrade the
response
				message is sent before the device reboots. The device
should support firmware upgrade
				through the UpgradeSystemFirmware command. The exact
format of the firmware data is
				outside the scope of this standard.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/UpgradeSystemFirmware"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__UpgradeSystemFirmware_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__UpgradeSystemFirmware* ns8__UpgradeSystemFirmware,
    // response parameters:
    struct _ns8__UpgradeSystemFirmwareResponse* ns8__UpgradeSystemFirmwareResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__UpgradeSystemFirmware_(
    struct soap *soap,
    // request parameters:
    struct _ns8__UpgradeSystemFirmware* ns8__UpgradeSystemFirmware,
    // response parameters:
    struct _ns8__UpgradeSystemFirmwareResponse* ns8__UpgradeSystemFirmwareResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	UpgradeSystemFirmware_ document
//gsoap ns8  service method-encoding:	UpgradeSystemFirmware_ literal
//gsoap ns8  service method-action:	UpgradeSystemFirmware_ http://www.onvif.org/ver10/device/wsdl/UpgradeSystemFirmware
int __ns8__UpgradeSystemFirmware_(
    struct _ns8__UpgradeSystemFirmware* ns8__UpgradeSystemFirmware,	///< Request parameter
    struct _ns8__UpgradeSystemFirmwareResponse* ns8__UpgradeSystemFirmwareResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SystemReboot_                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SystemReboot_" of service binding "DeviceBinding"

/**

Operation details:

This operation reboots the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SystemReboot"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SystemReboot_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SystemReboot*          ns8__SystemReboot,
    // response parameters:
    struct _ns8__SystemRebootResponse*  ns8__SystemRebootResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SystemReboot_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SystemReboot*          ns8__SystemReboot,
    // response parameters:
    struct _ns8__SystemRebootResponse*  ns8__SystemRebootResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SystemReboot_ document
//gsoap ns8  service method-encoding:	SystemReboot_ literal
//gsoap ns8  service method-action:	SystemReboot_ http://www.onvif.org/ver10/device/wsdl/SystemReboot
int __ns8__SystemReboot_(
    struct _ns8__SystemReboot*          ns8__SystemReboot,	///< Request parameter
    struct _ns8__SystemRebootResponse*  ns8__SystemRebootResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__RestoreSystem_                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__RestoreSystem_" of service binding "DeviceBinding"

/**

Operation details:

This operation restores the system backup configuration files(s) previously retrieved
from a
				device. The device should support restore of backup
configuration file(s) through the
				RestoreSystem command. The exact format of the backup
configuration file(s) is outside the
				scope of this standard. If the command is supported,
it shall accept backup files returned by
				the GetSystemBackup command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/RestoreSystem"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__RestoreSystem_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__RestoreSystem*         ns8__RestoreSystem,
    // response parameters:
    struct _ns8__RestoreSystemResponse* ns8__RestoreSystemResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__RestoreSystem_(
    struct soap *soap,
    // request parameters:
    struct _ns8__RestoreSystem*         ns8__RestoreSystem,
    // response parameters:
    struct _ns8__RestoreSystemResponse* ns8__RestoreSystemResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	RestoreSystem_ document
//gsoap ns8  service method-encoding:	RestoreSystem_ literal
//gsoap ns8  service method-action:	RestoreSystem_ http://www.onvif.org/ver10/device/wsdl/RestoreSystem
int __ns8__RestoreSystem_(
    struct _ns8__RestoreSystem*         ns8__RestoreSystem,	///< Request parameter
    struct _ns8__RestoreSystemResponse* ns8__RestoreSystemResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetSystemBackup_                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetSystemBackup_" of service binding "DeviceBinding"

/**

Operation details:

This operation is retrieves system backup configuration file(s) from a device. The
device
				should support return of back up configuration file(s)
through the GetSystemBackup command.
				The backup is returned with reference to a name
and mime-type together with binary data.
				The exact format of the backup configuration files
is outside the scope of this standard.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetSystemBackup"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetSystemBackup_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetSystemBackup*       ns8__GetSystemBackup,
    // response parameters:
    struct _ns8__GetSystemBackupResponse* ns8__GetSystemBackupResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetSystemBackup_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetSystemBackup*       ns8__GetSystemBackup,
    // response parameters:
    struct _ns8__GetSystemBackupResponse* ns8__GetSystemBackupResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetSystemBackup_ document
//gsoap ns8  service method-encoding:	GetSystemBackup_ literal
//gsoap ns8  service method-action:	GetSystemBackup_ http://www.onvif.org/ver10/device/wsdl/GetSystemBackup
int __ns8__GetSystemBackup_(
    struct _ns8__GetSystemBackup*       ns8__GetSystemBackup,	///< Request parameter
    struct _ns8__GetSystemBackupResponse* ns8__GetSystemBackupResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetSystemLog_                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetSystemLog_" of service binding "DeviceBinding"

/**

Operation details:

This operation gets a system log from the device. The exact format of the system
logs is outside the scope of this standard.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetSystemLog"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetSystemLog_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetSystemLog*          ns8__GetSystemLog,
    // response parameters:
    struct _ns8__GetSystemLogResponse*  ns8__GetSystemLogResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetSystemLog_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetSystemLog*          ns8__GetSystemLog,
    // response parameters:
    struct _ns8__GetSystemLogResponse*  ns8__GetSystemLogResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetSystemLog_ document
//gsoap ns8  service method-encoding:	GetSystemLog_ literal
//gsoap ns8  service method-action:	GetSystemLog_ http://www.onvif.org/ver10/device/wsdl/GetSystemLog
int __ns8__GetSystemLog_(
    struct _ns8__GetSystemLog*          ns8__GetSystemLog,	///< Request parameter
    struct _ns8__GetSystemLogResponse*  ns8__GetSystemLogResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetSystemSupportInformation_                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetSystemSupportInformation_" of service binding "DeviceBinding"

/**

Operation details:

This operation gets arbitary device diagnostics information from the device.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetSystemSupportInformation"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetSystemSupportInformation_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetSystemSupportInformation* ns8__GetSystemSupportInformation,
    // response parameters:
    struct _ns8__GetSystemSupportInformationResponse* ns8__GetSystemSupportInformationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetSystemSupportInformation_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetSystemSupportInformation* ns8__GetSystemSupportInformation,
    // response parameters:
    struct _ns8__GetSystemSupportInformationResponse* ns8__GetSystemSupportInformationResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetSystemSupportInformation_ document
//gsoap ns8  service method-encoding:	GetSystemSupportInformation_ literal
//gsoap ns8  service method-action:	GetSystemSupportInformation_ http://www.onvif.org/ver10/device/wsdl/GetSystemSupportInformation
int __ns8__GetSystemSupportInformation_(
    struct _ns8__GetSystemSupportInformation* ns8__GetSystemSupportInformation,	///< Request parameter
    struct _ns8__GetSystemSupportInformationResponse* ns8__GetSystemSupportInformationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetScopes_                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetScopes_" of service binding "DeviceBinding"

/**

Operation details:

This operation requests the scope parameters of a device. The scope parameters are
used in
				the device discovery to match a probe message, see
Section 7. The Scope parameters are of
				two different types: <ul>
	<li>Fixed</li>
	<li>Configurable</li>
</ul>
				Fixed scope parameters cannot be altered through
the device management interface but are
				permanent device characteristics part of the device
firmware configurations. The scope type is
				indicated in the scope list returned in the get
scope parameters response. Configurable scope
				parameters can be set throught the set and add scope
parameters operations. 
				The device shall support retrieval of discovery
scope parameters
				through the GetScopes command. As some scope parameters
are mandatory, the client
				always expects a scope list in the response.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetScopes"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetScopes_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetScopes*             ns8__GetScopes,
    // response parameters:
    struct _ns8__GetScopesResponse*     ns8__GetScopesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetScopes_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetScopes*             ns8__GetScopes,
    // response parameters:
    struct _ns8__GetScopesResponse*     ns8__GetScopesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetScopes_ document
//gsoap ns8  service method-encoding:	GetScopes_ literal
//gsoap ns8  service method-action:	GetScopes_ http://www.onvif.org/ver10/device/wsdl/GetScopes
int __ns8__GetScopes_(
    struct _ns8__GetScopes*             ns8__GetScopes,	///< Request parameter
    struct _ns8__GetScopesResponse*     ns8__GetScopesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetScopes_                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetScopes_" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the scope parameters of a device. The scope parameters are used
in the
				device discovery to match a probe message.
				This operation replaces all existing configurable
scope parameters (not fixed parameters). If
				this shall be avoided, one should use the scope
add command instead. The device shall
				support configuration of discovery scope parameters
through the SetScopes command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetScopes"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetScopes_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetScopes*             ns8__SetScopes,
    // response parameters:
    struct _ns8__SetScopesResponse*     ns8__SetScopesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetScopes_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetScopes*             ns8__SetScopes,
    // response parameters:
    struct _ns8__SetScopesResponse*     ns8__SetScopesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetScopes_ document
//gsoap ns8  service method-encoding:	SetScopes_ literal
//gsoap ns8  service method-action:	SetScopes_ http://www.onvif.org/ver10/device/wsdl/SetScopes
int __ns8__SetScopes_(
    struct _ns8__SetScopes*             ns8__SetScopes,	///< Request parameter
    struct _ns8__SetScopesResponse*     ns8__SetScopesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__AddScopes_                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__AddScopes_" of service binding "DeviceBinding"

/**

Operation details:

This operation adds new configurable scope parameters to a device. The scope parameters
				are used in the device discovery to match a probe
message. The device shall
				support addition of discovery scope parameters through
the AddScopes command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/AddScopes"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__AddScopes_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__AddScopes*             ns8__AddScopes,
    // response parameters:
    struct _ns8__AddScopesResponse*     ns8__AddScopesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__AddScopes_(
    struct soap *soap,
    // request parameters:
    struct _ns8__AddScopes*             ns8__AddScopes,
    // response parameters:
    struct _ns8__AddScopesResponse*     ns8__AddScopesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	AddScopes_ document
//gsoap ns8  service method-encoding:	AddScopes_ literal
//gsoap ns8  service method-action:	AddScopes_ http://www.onvif.org/ver10/device/wsdl/AddScopes
int __ns8__AddScopes_(
    struct _ns8__AddScopes*             ns8__AddScopes,	///< Request parameter
    struct _ns8__AddScopesResponse*     ns8__AddScopesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__RemoveScopes_                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__RemoveScopes_" of service binding "DeviceBinding"

/**

Operation details:

This operation deletes scope-configurable scope parameters from a device. The scope
				parameters are used in the device discovery to match
a probe message, see Section 7. The
				device shall support deletion of discovery scope
parameters through the RemoveScopes
				command.
				Table

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/RemoveScopes"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__RemoveScopes_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__RemoveScopes*          ns8__RemoveScopes,
    // response parameters:
    struct _ns8__RemoveScopesResponse*  ns8__RemoveScopesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__RemoveScopes_(
    struct soap *soap,
    // request parameters:
    struct _ns8__RemoveScopes*          ns8__RemoveScopes,
    // response parameters:
    struct _ns8__RemoveScopesResponse*  ns8__RemoveScopesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	RemoveScopes_ document
//gsoap ns8  service method-encoding:	RemoveScopes_ literal
//gsoap ns8  service method-action:	RemoveScopes_ http://www.onvif.org/ver10/device/wsdl/RemoveScopes
int __ns8__RemoveScopes_(
    struct _ns8__RemoveScopes*          ns8__RemoveScopes,	///< Request parameter
    struct _ns8__RemoveScopesResponse*  ns8__RemoveScopesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetDiscoveryMode_                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetDiscoveryMode_" of service binding "DeviceBinding"

/**

Operation details:

This operation gets the discovery mode of a device. See Section 7.2 for the definition
of the
				different device discovery modes. The device shall
support retrieval of the discovery mode
				setting through the GetDiscoveryMode command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetDiscoveryMode"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetDiscoveryMode_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetDiscoveryMode*      ns8__GetDiscoveryMode,
    // response parameters:
    struct _ns8__GetDiscoveryModeResponse* ns8__GetDiscoveryModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetDiscoveryMode_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetDiscoveryMode*      ns8__GetDiscoveryMode,
    // response parameters:
    struct _ns8__GetDiscoveryModeResponse* ns8__GetDiscoveryModeResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetDiscoveryMode_ document
//gsoap ns8  service method-encoding:	GetDiscoveryMode_ literal
//gsoap ns8  service method-action:	GetDiscoveryMode_ http://www.onvif.org/ver10/device/wsdl/GetDiscoveryMode
int __ns8__GetDiscoveryMode_(
    struct _ns8__GetDiscoveryMode*      ns8__GetDiscoveryMode,	///< Request parameter
    struct _ns8__GetDiscoveryModeResponse* ns8__GetDiscoveryModeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetDiscoveryMode_                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetDiscoveryMode_" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the discovery mode operation of a device. See Section 7.2 for
the
				definition of the different device discovery modes.
The device shall support configuration of
				the discovery mode setting through the SetDiscoveryMode
command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetDiscoveryMode"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetDiscoveryMode_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetDiscoveryMode*      ns8__SetDiscoveryMode,
    // response parameters:
    struct _ns8__SetDiscoveryModeResponse* ns8__SetDiscoveryModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetDiscoveryMode_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetDiscoveryMode*      ns8__SetDiscoveryMode,
    // response parameters:
    struct _ns8__SetDiscoveryModeResponse* ns8__SetDiscoveryModeResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetDiscoveryMode_ document
//gsoap ns8  service method-encoding:	SetDiscoveryMode_ literal
//gsoap ns8  service method-action:	SetDiscoveryMode_ http://www.onvif.org/ver10/device/wsdl/SetDiscoveryMode
int __ns8__SetDiscoveryMode_(
    struct _ns8__SetDiscoveryMode*      ns8__SetDiscoveryMode,	///< Request parameter
    struct _ns8__SetDiscoveryModeResponse* ns8__SetDiscoveryModeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetRemoteDiscoveryMode_                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetRemoteDiscoveryMode_" of service binding "DeviceBinding"

/**

Operation details:

This operation gets the remote discovery mode of a device. See Section 7.4 for the
definition
				of remote discovery extensions. A device that supports
remote discovery shall support
				retrieval of the remote discovery mode setting through
the GetRemoteDiscoveryMode
				command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetRemoteDiscoveryMode"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetRemoteDiscoveryMode_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetRemoteDiscoveryMode* ns8__GetRemoteDiscoveryMode,
    // response parameters:
    struct _ns8__GetRemoteDiscoveryModeResponse* ns8__GetRemoteDiscoveryModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetRemoteDiscoveryMode_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetRemoteDiscoveryMode* ns8__GetRemoteDiscoveryMode,
    // response parameters:
    struct _ns8__GetRemoteDiscoveryModeResponse* ns8__GetRemoteDiscoveryModeResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetRemoteDiscoveryMode_ document
//gsoap ns8  service method-encoding:	GetRemoteDiscoveryMode_ literal
//gsoap ns8  service method-action:	GetRemoteDiscoveryMode_ http://www.onvif.org/ver10/device/wsdl/GetRemoteDiscoveryMode
int __ns8__GetRemoteDiscoveryMode_(
    struct _ns8__GetRemoteDiscoveryMode* ns8__GetRemoteDiscoveryMode,	///< Request parameter
    struct _ns8__GetRemoteDiscoveryModeResponse* ns8__GetRemoteDiscoveryModeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetRemoteDiscoveryMode_                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetRemoteDiscoveryMode_" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the remote discovery mode of operation of a device. See Section
7.4 for
				the definition of remote discovery remote extensions.
A device that supports remote discovery
				shall support configuration of the discovery mode
setting through the
				SetRemoteDiscoveryMode command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetRemoteDiscoveryMode"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetRemoteDiscoveryMode_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetRemoteDiscoveryMode* ns8__SetRemoteDiscoveryMode,
    // response parameters:
    struct _ns8__SetRemoteDiscoveryModeResponse* ns8__SetRemoteDiscoveryModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetRemoteDiscoveryMode_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetRemoteDiscoveryMode* ns8__SetRemoteDiscoveryMode,
    // response parameters:
    struct _ns8__SetRemoteDiscoveryModeResponse* ns8__SetRemoteDiscoveryModeResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetRemoteDiscoveryMode_ document
//gsoap ns8  service method-encoding:	SetRemoteDiscoveryMode_ literal
//gsoap ns8  service method-action:	SetRemoteDiscoveryMode_ http://www.onvif.org/ver10/device/wsdl/SetRemoteDiscoveryMode
int __ns8__SetRemoteDiscoveryMode_(
    struct _ns8__SetRemoteDiscoveryMode* ns8__SetRemoteDiscoveryMode,	///< Request parameter
    struct _ns8__SetRemoteDiscoveryModeResponse* ns8__SetRemoteDiscoveryModeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetDPAddresses_                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetDPAddresses_" of service binding "DeviceBinding"

/**

Operation details:

This operation gets the remote DP address or addresses from a device. If the device
supports
				remote discovery, as specified in Section 7.4, the
device shall support retrieval of the remote
				DP address(es) through the GetDPAddresses command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetDPAddresses"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetDPAddresses_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetDPAddresses*        ns8__GetDPAddresses,
    // response parameters:
    struct _ns8__GetDPAddressesResponse* ns8__GetDPAddressesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetDPAddresses_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetDPAddresses*        ns8__GetDPAddresses,
    // response parameters:
    struct _ns8__GetDPAddressesResponse* ns8__GetDPAddressesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetDPAddresses_ document
//gsoap ns8  service method-encoding:	GetDPAddresses_ literal
//gsoap ns8  service method-action:	GetDPAddresses_ http://www.onvif.org/ver10/device/wsdl/GetDPAddresses
int __ns8__GetDPAddresses_(
    struct _ns8__GetDPAddresses*        ns8__GetDPAddresses,	///< Request parameter
    struct _ns8__GetDPAddressesResponse* ns8__GetDPAddressesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetEndpointReference_                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetEndpointReference_" of service binding "DeviceBinding"

/**

Operation details:

A client can ask for the device service endpoint reference address property that
can be used
				to derive the password equivalent for remote user
operation. The device shall support the
				GetEndpointReference command returning the address
property of the device service
				endpoint reference.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetEndpointReference"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetEndpointReference_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetEndpointReference*  ns8__GetEndpointReference,
    // response parameters:
    struct _ns8__GetEndpointReferenceResponse* ns8__GetEndpointReferenceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetEndpointReference_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetEndpointReference*  ns8__GetEndpointReference,
    // response parameters:
    struct _ns8__GetEndpointReferenceResponse* ns8__GetEndpointReferenceResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetEndpointReference_ document
//gsoap ns8  service method-encoding:	GetEndpointReference_ literal
//gsoap ns8  service method-action:	GetEndpointReference_ http://www.onvif.org/ver10/device/wsdl/GetEndpointReference
int __ns8__GetEndpointReference_(
    struct _ns8__GetEndpointReference*  ns8__GetEndpointReference,	///< Request parameter
    struct _ns8__GetEndpointReferenceResponse* ns8__GetEndpointReferenceResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetRemoteUser_                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetRemoteUser_" of service binding "DeviceBinding"

/**

Operation details:

This operation returns the configured remote user (if any). A device supporting
remote user
				handling shall support this operation. The user
is only valid for the WS-UserToken profile or
				as a HTTP / RTSP user.<br/>
				The algorithm to use for deriving the password is
described in section 5.12.2.1 of the core specification.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetRemoteUser"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetRemoteUser_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetRemoteUser*         ns8__GetRemoteUser,
    // response parameters:
    struct _ns8__GetRemoteUserResponse* ns8__GetRemoteUserResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetRemoteUser_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetRemoteUser*         ns8__GetRemoteUser,
    // response parameters:
    struct _ns8__GetRemoteUserResponse* ns8__GetRemoteUserResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetRemoteUser_ document
//gsoap ns8  service method-encoding:	GetRemoteUser_ literal
//gsoap ns8  service method-action:	GetRemoteUser_ http://www.onvif.org/ver10/device/wsdl/GetRemoteUser
int __ns8__GetRemoteUser_(
    struct _ns8__GetRemoteUser*         ns8__GetRemoteUser,	///< Request parameter
    struct _ns8__GetRemoteUserResponse* ns8__GetRemoteUserResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetRemoteUser_                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetRemoteUser_" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the remote user. A device supporting remote user handling shall
support this
				operation. The user is only valid for the WS-UserToken
profile or as a HTTP / RTSP user.<br/>
				The password that is set shall always be the original
(not derived) password.<br/>
				If UseDerivedPassword is set password derivation
shall be done by the device when connecting to a
				remote device.The algorithm to use for deriving
the password is described in section 5.12.2.1 of the core specification.<br/>
				To remove the remote user SetRemoteUser should be
called without the RemoteUser parameter.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetRemoteUser"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetRemoteUser_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetRemoteUser*         ns8__SetRemoteUser,
    // response parameters:
    struct _ns8__SetRemoteUserResponse* ns8__SetRemoteUserResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetRemoteUser_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetRemoteUser*         ns8__SetRemoteUser,
    // response parameters:
    struct _ns8__SetRemoteUserResponse* ns8__SetRemoteUserResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetRemoteUser_ document
//gsoap ns8  service method-encoding:	SetRemoteUser_ literal
//gsoap ns8  service method-action:	SetRemoteUser_ http://www.onvif.org/ver10/device/wsdl/SetRemoteUser
int __ns8__SetRemoteUser_(
    struct _ns8__SetRemoteUser*         ns8__SetRemoteUser,	///< Request parameter
    struct _ns8__SetRemoteUserResponse* ns8__SetRemoteUserResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetUsers_                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetUsers_" of service binding "DeviceBinding"

/**

Operation details:

This operation lists the registered users and corresponding credentials on a device.
The
				device shall support retrieval of registered device
users and their credentials for the user
				token through the GetUsers command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetUsers"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetUsers_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetUsers*              ns8__GetUsers,
    // response parameters:
    struct _ns8__GetUsersResponse*      ns8__GetUsersResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetUsers_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetUsers*              ns8__GetUsers,
    // response parameters:
    struct _ns8__GetUsersResponse*      ns8__GetUsersResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetUsers_ document
//gsoap ns8  service method-encoding:	GetUsers_ literal
//gsoap ns8  service method-action:	GetUsers_ http://www.onvif.org/ver10/device/wsdl/GetUsers
int __ns8__GetUsers_(
    struct _ns8__GetUsers*              ns8__GetUsers,	///< Request parameter
    struct _ns8__GetUsersResponse*      ns8__GetUsersResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__CreateUsers_                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__CreateUsers_" of service binding "DeviceBinding"

/**

Operation details:

This operation creates new device users and corresponding credentials on a device
for authentication purposes. 
				The device shall support creation of device users
and their credentials through the CreateUsers
				command. Either all users are created successfully
or a fault message shall be returned
				without creating any user.<br/>
				ONVIF compliant devices are recommended to support
password length of at least 28 bytes,
				as clients may follow the password derivation mechanism
which results in 'password
				equivalent' of length 28 bytes, as described in
section 3.1.2 of the ONVIF security white paper.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/CreateUsers"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__CreateUsers_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__CreateUsers*           ns8__CreateUsers,
    // response parameters:
    struct _ns8__CreateUsersResponse*   ns8__CreateUsersResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__CreateUsers_(
    struct soap *soap,
    // request parameters:
    struct _ns8__CreateUsers*           ns8__CreateUsers,
    // response parameters:
    struct _ns8__CreateUsersResponse*   ns8__CreateUsersResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	CreateUsers_ document
//gsoap ns8  service method-encoding:	CreateUsers_ literal
//gsoap ns8  service method-action:	CreateUsers_ http://www.onvif.org/ver10/device/wsdl/CreateUsers
int __ns8__CreateUsers_(
    struct _ns8__CreateUsers*           ns8__CreateUsers,	///< Request parameter
    struct _ns8__CreateUsersResponse*   ns8__CreateUsersResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__DeleteUsers_                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__DeleteUsers_" of service binding "DeviceBinding"

/**

Operation details:

This operation deletes users on a device. The device shall support deletion of device
users and their credentials 
				through the DeleteUsers command. A device may have
one or more fixed users
				that cannot be deleted to ensure access to the unit.
Either all users are deleted successfully or a
				fault message shall be returned and no users be
deleted.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/DeleteUsers"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__DeleteUsers_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__DeleteUsers*           ns8__DeleteUsers,
    // response parameters:
    struct _ns8__DeleteUsersResponse*   ns8__DeleteUsersResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__DeleteUsers_(
    struct soap *soap,
    // request parameters:
    struct _ns8__DeleteUsers*           ns8__DeleteUsers,
    // response parameters:
    struct _ns8__DeleteUsersResponse*   ns8__DeleteUsersResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	DeleteUsers_ document
//gsoap ns8  service method-encoding:	DeleteUsers_ literal
//gsoap ns8  service method-action:	DeleteUsers_ http://www.onvif.org/ver10/device/wsdl/DeleteUsers
int __ns8__DeleteUsers_(
    struct _ns8__DeleteUsers*           ns8__DeleteUsers,	///< Request parameter
    struct _ns8__DeleteUsersResponse*   ns8__DeleteUsersResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetUser_                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetUser_" of service binding "DeviceBinding"

/**

Operation details:

This operation updates the settings for one or several users on a device for authentication
purposes.
				The device shall support update of device users
and their credentials through the SetUser command. 
				Either all change requests are processed successfully
or a fault message shall be returned and no change requests be processed.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetUser"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetUser_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetUser*               ns8__SetUser,
    // response parameters:
    struct _ns8__SetUserResponse*       ns8__SetUserResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetUser_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetUser*               ns8__SetUser,
    // response parameters:
    struct _ns8__SetUserResponse*       ns8__SetUserResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetUser_ document
//gsoap ns8  service method-encoding:	SetUser_ literal
//gsoap ns8  service method-action:	SetUser_ http://www.onvif.org/ver10/device/wsdl/SetUser
int __ns8__SetUser_(
    struct _ns8__SetUser*               ns8__SetUser,	///< Request parameter
    struct _ns8__SetUserResponse*       ns8__SetUserResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetWsdlUrl_                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetWsdlUrl_" of service binding "DeviceBinding"

/**

Operation details:

It is possible for an endpoint to request a URL that can be used to retrieve the
complete
				schema and WSDL definitions of a device. The command
gives in return a URL entry point
				where all the necessary product specific WSDL and
schema definitions can be retrieved. The
				device shall provide a URL for WSDL and schema download
through the GetWsdlUrl command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetWsdlUrl"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetWsdlUrl_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetWsdlUrl*            ns8__GetWsdlUrl,
    // response parameters:
    struct _ns8__GetWsdlUrlResponse*    ns8__GetWsdlUrlResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetWsdlUrl_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetWsdlUrl*            ns8__GetWsdlUrl,
    // response parameters:
    struct _ns8__GetWsdlUrlResponse*    ns8__GetWsdlUrlResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetWsdlUrl_ document
//gsoap ns8  service method-encoding:	GetWsdlUrl_ literal
//gsoap ns8  service method-action:	GetWsdlUrl_ http://www.onvif.org/ver10/device/wsdl/GetWsdlUrl
int __ns8__GetWsdlUrl_(
    struct _ns8__GetWsdlUrl*            ns8__GetWsdlUrl,	///< Request parameter
    struct _ns8__GetWsdlUrlResponse*    ns8__GetWsdlUrlResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetCapabilities_                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetCapabilities_" of service binding "DeviceBinding"

/**

Operation details:

Any endpoint can ask for the capabilities of a device using the capability exchange
request
				response operation. The device shall indicate all
its ONVIF compliant capabilities through the
				GetCapabilities command.
				The capability list includes references to the addresses
(XAddr) of the service implementing
				the interface operations in the category. Apart
from the addresses, the
				capabilities only reflect optional functions.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetCapabilities"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetCapabilities_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetCapabilities*       ns8__GetCapabilities,
    // response parameters:
    struct _ns8__GetCapabilitiesResponse* ns8__GetCapabilitiesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetCapabilities_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetCapabilities*       ns8__GetCapabilities,
    // response parameters:
    struct _ns8__GetCapabilitiesResponse* ns8__GetCapabilitiesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetCapabilities_ document
//gsoap ns8  service method-encoding:	GetCapabilities_ literal
//gsoap ns8  service method-action:	GetCapabilities_ http://www.onvif.org/ver10/device/wsdl/GetCapabilities
int __ns8__GetCapabilities_(
    struct _ns8__GetCapabilities*       ns8__GetCapabilities,	///< Request parameter
    struct _ns8__GetCapabilitiesResponse* ns8__GetCapabilitiesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetDPAddresses_                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetDPAddresses_" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the remote DP address or addresses on a device. If the device
supports
				remote discovery, as specified in Section 7.4, the
device shall support configuration of the
				remote DP address(es) through the SetDPAddresses
command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetDPAddresses"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetDPAddresses_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetDPAddresses*        ns8__SetDPAddresses,
    // response parameters:
    struct _ns8__SetDPAddressesResponse* ns8__SetDPAddressesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetDPAddresses_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetDPAddresses*        ns8__SetDPAddresses,
    // response parameters:
    struct _ns8__SetDPAddressesResponse* ns8__SetDPAddressesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetDPAddresses_ document
//gsoap ns8  service method-encoding:	SetDPAddresses_ literal
//gsoap ns8  service method-action:	SetDPAddresses_ http://www.onvif.org/ver10/device/wsdl/SetDPAddresses
int __ns8__SetDPAddresses_(
    struct _ns8__SetDPAddresses*        ns8__SetDPAddresses,	///< Request parameter
    struct _ns8__SetDPAddressesResponse* ns8__SetDPAddressesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetHostname_                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetHostname_" of service binding "DeviceBinding"

/**

Operation details:

This operation is used by an endpoint to get the hostname from a device. The device
shall
				return its hostname configurations through the GetHostname
command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetHostname"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetHostname_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetHostname*           ns8__GetHostname,
    // response parameters:
    struct _ns8__GetHostnameResponse*   ns8__GetHostnameResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetHostname_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetHostname*           ns8__GetHostname,
    // response parameters:
    struct _ns8__GetHostnameResponse*   ns8__GetHostnameResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetHostname_ document
//gsoap ns8  service method-encoding:	GetHostname_ literal
//gsoap ns8  service method-action:	GetHostname_ http://www.onvif.org/ver10/device/wsdl/GetHostname
int __ns8__GetHostname_(
    struct _ns8__GetHostname*           ns8__GetHostname,	///< Request parameter
    struct _ns8__GetHostnameResponse*   ns8__GetHostnameResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetHostname_                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetHostname_" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the hostname on a device. It shall be possible to set the device
hostname
				configurations through the SetHostname command.<br/>
				A device shall accept string formated according
to RFC 1123 section 2.1 or alternatively to RFC 952, 
				other string shall be considered as invalid strings.

			

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetHostname"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetHostname_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetHostname*           ns8__SetHostname,
    // response parameters:
    struct _ns8__SetHostnameResponse*   ns8__SetHostnameResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetHostname_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetHostname*           ns8__SetHostname,
    // response parameters:
    struct _ns8__SetHostnameResponse*   ns8__SetHostnameResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetHostname_ document
//gsoap ns8  service method-encoding:	SetHostname_ literal
//gsoap ns8  service method-action:	SetHostname_ http://www.onvif.org/ver10/device/wsdl/SetHostname
int __ns8__SetHostname_(
    struct _ns8__SetHostname*           ns8__SetHostname,	///< Request parameter
    struct _ns8__SetHostnameResponse*   ns8__SetHostnameResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetHostnameFromDHCP                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetHostnameFromDHCP" of service binding "DeviceBinding"

/**

Operation details:

This operation controls whether the hostname is set manually or retrieved via DHCP.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetHostnameFromDHCP"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetHostnameFromDHCP(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetHostnameFromDHCP*   ns8__SetHostnameFromDHCP,
    // response parameters:
    struct _ns8__SetHostnameFromDHCPResponse* ns8__SetHostnameFromDHCPResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetHostnameFromDHCP(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetHostnameFromDHCP*   ns8__SetHostnameFromDHCP,
    // response parameters:
    struct _ns8__SetHostnameFromDHCPResponse* ns8__SetHostnameFromDHCPResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetHostnameFromDHCP document
//gsoap ns8  service method-encoding:	SetHostnameFromDHCP literal
//gsoap ns8  service method-action:	SetHostnameFromDHCP http://www.onvif.org/ver10/device/wsdl/SetHostnameFromDHCP
int __ns8__SetHostnameFromDHCP(
    struct _ns8__SetHostnameFromDHCP*   ns8__SetHostnameFromDHCP,	///< Request parameter
    struct _ns8__SetHostnameFromDHCPResponse* ns8__SetHostnameFromDHCPResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetDNS_                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetDNS_" of service binding "DeviceBinding"

/**

Operation details:

This operation gets the DNS settings from a device. The device shall return its
DNS
				configurations through the GetDNS command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetDNS"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetDNS_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetDNS*                ns8__GetDNS,
    // response parameters:
    struct _ns8__GetDNSResponse*        ns8__GetDNSResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetDNS_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetDNS*                ns8__GetDNS,
    // response parameters:
    struct _ns8__GetDNSResponse*        ns8__GetDNSResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetDNS_ document
//gsoap ns8  service method-encoding:	GetDNS_ literal
//gsoap ns8  service method-action:	GetDNS_ http://www.onvif.org/ver10/device/wsdl/GetDNS
int __ns8__GetDNS_(
    struct _ns8__GetDNS*                ns8__GetDNS,	///< Request parameter
    struct _ns8__GetDNSResponse*        ns8__GetDNSResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetDNS_                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetDNS_" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the DNS settings on a device. It shall be possible to set the
device DNS
				configurations through the SetDNS command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetDNS"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetDNS_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetDNS*                ns8__SetDNS,
    // response parameters:
    struct _ns8__SetDNSResponse*        ns8__SetDNSResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetDNS_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetDNS*                ns8__SetDNS,
    // response parameters:
    struct _ns8__SetDNSResponse*        ns8__SetDNSResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetDNS_ document
//gsoap ns8  service method-encoding:	SetDNS_ literal
//gsoap ns8  service method-action:	SetDNS_ http://www.onvif.org/ver10/device/wsdl/SetDNS
int __ns8__SetDNS_(
    struct _ns8__SetDNS*                ns8__SetDNS,	///< Request parameter
    struct _ns8__SetDNSResponse*        ns8__SetDNSResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetNTP_                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetNTP_" of service binding "DeviceBinding"

/**

Operation details:

This operation gets the NTP settings from a device. If the device supports NTP,
it shall be
				possible to get the NTP server settings through
the GetNTP command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetNTP"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetNTP_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetNTP*                ns8__GetNTP,
    // response parameters:
    struct _ns8__GetNTPResponse*        ns8__GetNTPResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetNTP_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetNTP*                ns8__GetNTP,
    // response parameters:
    struct _ns8__GetNTPResponse*        ns8__GetNTPResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetNTP_ document
//gsoap ns8  service method-encoding:	GetNTP_ literal
//gsoap ns8  service method-action:	GetNTP_ http://www.onvif.org/ver10/device/wsdl/GetNTP
int __ns8__GetNTP_(
    struct _ns8__GetNTP*                ns8__GetNTP,	///< Request parameter
    struct _ns8__GetNTPResponse*        ns8__GetNTPResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetNTP_                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetNTP_" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the NTP settings on a device. If the device supports NTP, it
shall be
				possible to set the NTP server settings through
the SetNTP command.<br/>
				A device shall accept string formated according
to RFC 1123 section 2.1 or alternatively to RFC 952, 
				other string shall be considered as invalid strings.
<br/>
				Changes to the NTP server list will not affect the
clock mode DateTimeType. Use SetSystemDateAndTime to activate NTP operation.
			

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetNTP"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetNTP_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetNTP*                ns8__SetNTP,
    // response parameters:
    struct _ns8__SetNTPResponse*        ns8__SetNTPResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetNTP_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetNTP*                ns8__SetNTP,
    // response parameters:
    struct _ns8__SetNTPResponse*        ns8__SetNTPResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetNTP_ document
//gsoap ns8  service method-encoding:	SetNTP_ literal
//gsoap ns8  service method-action:	SetNTP_ http://www.onvif.org/ver10/device/wsdl/SetNTP
int __ns8__SetNTP_(
    struct _ns8__SetNTP*                ns8__SetNTP,	///< Request parameter
    struct _ns8__SetNTPResponse*        ns8__SetNTPResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetDynamicDNS_                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetDynamicDNS_" of service binding "DeviceBinding"

/**

Operation details:

This operation gets the dynamic DNS settings from a device. If the device supports
dynamic
				DNS as specified in [RFC 2136] and [RFC 4702], it
shall be possible to get the type, name
				and TTL through the GetDynamicDNS command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetDynamicDNS"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetDynamicDNS_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetDynamicDNS*         ns8__GetDynamicDNS,
    // response parameters:
    struct _ns8__GetDynamicDNSResponse* ns8__GetDynamicDNSResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetDynamicDNS_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetDynamicDNS*         ns8__GetDynamicDNS,
    // response parameters:
    struct _ns8__GetDynamicDNSResponse* ns8__GetDynamicDNSResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetDynamicDNS_ document
//gsoap ns8  service method-encoding:	GetDynamicDNS_ literal
//gsoap ns8  service method-action:	GetDynamicDNS_ http://www.onvif.org/ver10/device/wsdl/GetDynamicDNS
int __ns8__GetDynamicDNS_(
    struct _ns8__GetDynamicDNS*         ns8__GetDynamicDNS,	///< Request parameter
    struct _ns8__GetDynamicDNSResponse* ns8__GetDynamicDNSResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetDynamicDNS_                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetDynamicDNS_" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the dynamic DNS settings on a device. If the device supports
dynamic
				DNS as specified in [RFC 2136] and [RFC 4702], it
shall be possible to set the type, name
				and TTL through the SetDynamicDNS command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetDynamicDNS"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetDynamicDNS_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetDynamicDNS*         ns8__SetDynamicDNS,
    // response parameters:
    struct _ns8__SetDynamicDNSResponse* ns8__SetDynamicDNSResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetDynamicDNS_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetDynamicDNS*         ns8__SetDynamicDNS,
    // response parameters:
    struct _ns8__SetDynamicDNSResponse* ns8__SetDynamicDNSResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetDynamicDNS_ document
//gsoap ns8  service method-encoding:	SetDynamicDNS_ literal
//gsoap ns8  service method-action:	SetDynamicDNS_ http://www.onvif.org/ver10/device/wsdl/SetDynamicDNS
int __ns8__SetDynamicDNS_(
    struct _ns8__SetDynamicDNS*         ns8__SetDynamicDNS,	///< Request parameter
    struct _ns8__SetDynamicDNSResponse* ns8__SetDynamicDNSResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetNetworkInterfaces_                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetNetworkInterfaces_" of service binding "DeviceBinding"

/**

Operation details:

This operation gets the network interface configuration from a device. The device
shall
				support return of network interface configuration
settings as defined by the NetworkInterface
				type through the GetNetworkInterfaces command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetNetworkInterfaces"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetNetworkInterfaces_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetNetworkInterfaces*  ns8__GetNetworkInterfaces,
    // response parameters:
    struct _ns8__GetNetworkInterfacesResponse* ns8__GetNetworkInterfacesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetNetworkInterfaces_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetNetworkInterfaces*  ns8__GetNetworkInterfaces,
    // response parameters:
    struct _ns8__GetNetworkInterfacesResponse* ns8__GetNetworkInterfacesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetNetworkInterfaces_ document
//gsoap ns8  service method-encoding:	GetNetworkInterfaces_ literal
//gsoap ns8  service method-action:	GetNetworkInterfaces_ http://www.onvif.org/ver10/device/wsdl/GetNetworkInterfaces
int __ns8__GetNetworkInterfaces_(
    struct _ns8__GetNetworkInterfaces*  ns8__GetNetworkInterfaces,	///< Request parameter
    struct _ns8__GetNetworkInterfacesResponse* ns8__GetNetworkInterfacesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetNetworkInterfaces_                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetNetworkInterfaces_" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the network interface configuration on a device. The device
shall support
				network configuration of supported network interfaces
through the SetNetworkInterfaces
				command.<br/>
				For interoperability with a client unaware of the
IEEE 802.11 extension a device shall retain
				its IEEE 802.11 configuration if the IEEE 802.11
configuration element isnt present in the
				request.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetNetworkInterfaces"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetNetworkInterfaces_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetNetworkInterfaces*  ns8__SetNetworkInterfaces,
    // response parameters:
    struct _ns8__SetNetworkInterfacesResponse* ns8__SetNetworkInterfacesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetNetworkInterfaces_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetNetworkInterfaces*  ns8__SetNetworkInterfaces,
    // response parameters:
    struct _ns8__SetNetworkInterfacesResponse* ns8__SetNetworkInterfacesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetNetworkInterfaces_ document
//gsoap ns8  service method-encoding:	SetNetworkInterfaces_ literal
//gsoap ns8  service method-action:	SetNetworkInterfaces_ http://www.onvif.org/ver10/device/wsdl/SetNetworkInterfaces
int __ns8__SetNetworkInterfaces_(
    struct _ns8__SetNetworkInterfaces*  ns8__SetNetworkInterfaces,	///< Request parameter
    struct _ns8__SetNetworkInterfacesResponse* ns8__SetNetworkInterfacesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetNetworkProtocols_                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetNetworkProtocols_" of service binding "DeviceBinding"

/**

Operation details:

This operation gets defined network protocols from a device. The device shall support
the
				GetNetworkProtocols command returning configured
network protocols.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetNetworkProtocols"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetNetworkProtocols_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetNetworkProtocols*   ns8__GetNetworkProtocols,
    // response parameters:
    struct _ns8__GetNetworkProtocolsResponse* ns8__GetNetworkProtocolsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetNetworkProtocols_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetNetworkProtocols*   ns8__GetNetworkProtocols,
    // response parameters:
    struct _ns8__GetNetworkProtocolsResponse* ns8__GetNetworkProtocolsResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetNetworkProtocols_ document
//gsoap ns8  service method-encoding:	GetNetworkProtocols_ literal
//gsoap ns8  service method-action:	GetNetworkProtocols_ http://www.onvif.org/ver10/device/wsdl/GetNetworkProtocols
int __ns8__GetNetworkProtocols_(
    struct _ns8__GetNetworkProtocols*   ns8__GetNetworkProtocols,	///< Request parameter
    struct _ns8__GetNetworkProtocolsResponse* ns8__GetNetworkProtocolsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetNetworkProtocols_                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetNetworkProtocols_" of service binding "DeviceBinding"

/**

Operation details:

This operation configures defined network protocols on a device. The device shall
support
				configuration of defined network protocols through
the SetNetworkProtocols command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetNetworkProtocols"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetNetworkProtocols_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetNetworkProtocols*   ns8__SetNetworkProtocols,
    // response parameters:
    struct _ns8__SetNetworkProtocolsResponse* ns8__SetNetworkProtocolsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetNetworkProtocols_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetNetworkProtocols*   ns8__SetNetworkProtocols,
    // response parameters:
    struct _ns8__SetNetworkProtocolsResponse* ns8__SetNetworkProtocolsResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetNetworkProtocols_ document
//gsoap ns8  service method-encoding:	SetNetworkProtocols_ literal
//gsoap ns8  service method-action:	SetNetworkProtocols_ http://www.onvif.org/ver10/device/wsdl/SetNetworkProtocols
int __ns8__SetNetworkProtocols_(
    struct _ns8__SetNetworkProtocols*   ns8__SetNetworkProtocols,	///< Request parameter
    struct _ns8__SetNetworkProtocolsResponse* ns8__SetNetworkProtocolsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetNetworkDefaultGateway_                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetNetworkDefaultGateway_" of service binding "DeviceBinding"

/**

Operation details:

This operation gets the default gateway settings from a device. The device shall
support the
				GetNetworkDefaultGateway command returning configured
default gateway address(es).

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetNetworkDefaultGateway"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetNetworkDefaultGateway_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetNetworkDefaultGateway* ns8__GetNetworkDefaultGateway,
    // response parameters:
    struct _ns8__GetNetworkDefaultGatewayResponse* ns8__GetNetworkDefaultGatewayResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetNetworkDefaultGateway_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetNetworkDefaultGateway* ns8__GetNetworkDefaultGateway,
    // response parameters:
    struct _ns8__GetNetworkDefaultGatewayResponse* ns8__GetNetworkDefaultGatewayResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetNetworkDefaultGateway_ document
//gsoap ns8  service method-encoding:	GetNetworkDefaultGateway_ literal
//gsoap ns8  service method-action:	GetNetworkDefaultGateway_ http://www.onvif.org/ver10/device/wsdl/GetNetworkDefaultGateway
int __ns8__GetNetworkDefaultGateway_(
    struct _ns8__GetNetworkDefaultGateway* ns8__GetNetworkDefaultGateway,	///< Request parameter
    struct _ns8__GetNetworkDefaultGatewayResponse* ns8__GetNetworkDefaultGatewayResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetNetworkDefaultGateway_                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetNetworkDefaultGateway_" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the default gateway settings on a device. The device shall support
				configuration of default gateway through the SetNetworkDefaultGateway
command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetNetworkDefaultGateway"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetNetworkDefaultGateway_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetNetworkDefaultGateway* ns8__SetNetworkDefaultGateway,
    // response parameters:
    struct _ns8__SetNetworkDefaultGatewayResponse* ns8__SetNetworkDefaultGatewayResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetNetworkDefaultGateway_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetNetworkDefaultGateway* ns8__SetNetworkDefaultGateway,
    // response parameters:
    struct _ns8__SetNetworkDefaultGatewayResponse* ns8__SetNetworkDefaultGatewayResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetNetworkDefaultGateway_ document
//gsoap ns8  service method-encoding:	SetNetworkDefaultGateway_ literal
//gsoap ns8  service method-action:	SetNetworkDefaultGateway_ http://www.onvif.org/ver10/device/wsdl/SetNetworkDefaultGateway
int __ns8__SetNetworkDefaultGateway_(
    struct _ns8__SetNetworkDefaultGateway* ns8__SetNetworkDefaultGateway,	///< Request parameter
    struct _ns8__SetNetworkDefaultGatewayResponse* ns8__SetNetworkDefaultGatewayResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetZeroConfiguration_                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetZeroConfiguration_" of service binding "DeviceBinding"

/**

Operation details:

This operation gets the zero-configuration from a device. If the device supports
dynamic IP
				configuration according to [RFC3927], it shall support
the return of IPv4 zero configuration
				address and status through the GetZeroConfiguration
command.<br/>
			Use GetCapalities to get if zero-zero-configuration is supported
or not.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetZeroConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetZeroConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetZeroConfiguration*  ns8__GetZeroConfiguration,
    // response parameters:
    struct _ns8__GetZeroConfigurationResponse* ns8__GetZeroConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetZeroConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetZeroConfiguration*  ns8__GetZeroConfiguration,
    // response parameters:
    struct _ns8__GetZeroConfigurationResponse* ns8__GetZeroConfigurationResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetZeroConfiguration_ document
//gsoap ns8  service method-encoding:	GetZeroConfiguration_ literal
//gsoap ns8  service method-action:	GetZeroConfiguration_ http://www.onvif.org/ver10/device/wsdl/GetZeroConfiguration
int __ns8__GetZeroConfiguration_(
    struct _ns8__GetZeroConfiguration*  ns8__GetZeroConfiguration,	///< Request parameter
    struct _ns8__GetZeroConfigurationResponse* ns8__GetZeroConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetZeroConfiguration_                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetZeroConfiguration_" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the zero-configuration. Use GetCapalities to get if zero-zero-configuration
is supported or not.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetZeroConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetZeroConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetZeroConfiguration*  ns8__SetZeroConfiguration,
    // response parameters:
    struct _ns8__SetZeroConfigurationResponse* ns8__SetZeroConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetZeroConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetZeroConfiguration*  ns8__SetZeroConfiguration,
    // response parameters:
    struct _ns8__SetZeroConfigurationResponse* ns8__SetZeroConfigurationResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetZeroConfiguration_ document
//gsoap ns8  service method-encoding:	SetZeroConfiguration_ literal
//gsoap ns8  service method-action:	SetZeroConfiguration_ http://www.onvif.org/ver10/device/wsdl/SetZeroConfiguration
int __ns8__SetZeroConfiguration_(
    struct _ns8__SetZeroConfiguration*  ns8__SetZeroConfiguration,	///< Request parameter
    struct _ns8__SetZeroConfigurationResponse* ns8__SetZeroConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetIPAddressFilter_                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetIPAddressFilter_" of service binding "DeviceBinding"

/**

Operation details:

This operation gets the IP address filter settings from a device. If the device
supports device
				access control based on IP filtering rules (denied
or accepted ranges of IP addresses), the
				device shall support the GetIPAddressFilter command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetIPAddressFilter"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetIPAddressFilter_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetIPAddressFilter*    ns8__GetIPAddressFilter,
    // response parameters:
    struct _ns8__GetIPAddressFilterResponse* ns8__GetIPAddressFilterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetIPAddressFilter_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetIPAddressFilter*    ns8__GetIPAddressFilter,
    // response parameters:
    struct _ns8__GetIPAddressFilterResponse* ns8__GetIPAddressFilterResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetIPAddressFilter_ document
//gsoap ns8  service method-encoding:	GetIPAddressFilter_ literal
//gsoap ns8  service method-action:	GetIPAddressFilter_ http://www.onvif.org/ver10/device/wsdl/GetIPAddressFilter
int __ns8__GetIPAddressFilter_(
    struct _ns8__GetIPAddressFilter*    ns8__GetIPAddressFilter,	///< Request parameter
    struct _ns8__GetIPAddressFilterResponse* ns8__GetIPAddressFilterResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetIPAddressFilter_                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetIPAddressFilter_" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the IP address filter settings on a device. If the device supports
device
				access control based on IP filtering rules (denied
or accepted ranges of IP addresses), the
				device shall support configuration of IP filtering
rules through the SetIPAddressFilter
				command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetIPAddressFilter"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetIPAddressFilter_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetIPAddressFilter*    ns8__SetIPAddressFilter,
    // response parameters:
    struct _ns8__SetIPAddressFilterResponse* ns8__SetIPAddressFilterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetIPAddressFilter_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetIPAddressFilter*    ns8__SetIPAddressFilter,
    // response parameters:
    struct _ns8__SetIPAddressFilterResponse* ns8__SetIPAddressFilterResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetIPAddressFilter_ document
//gsoap ns8  service method-encoding:	SetIPAddressFilter_ literal
//gsoap ns8  service method-action:	SetIPAddressFilter_ http://www.onvif.org/ver10/device/wsdl/SetIPAddressFilter
int __ns8__SetIPAddressFilter_(
    struct _ns8__SetIPAddressFilter*    ns8__SetIPAddressFilter,	///< Request parameter
    struct _ns8__SetIPAddressFilterResponse* ns8__SetIPAddressFilterResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__AddIPAddressFilter_                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__AddIPAddressFilter_" of service binding "DeviceBinding"

/**

Operation details:

This operation adds an IP filter address to a device. If the device supports device
access
				control based on IP filtering rules (denied or accepted
ranges of IP addresses), the device
				shall support adding of IP filtering addresses through
the AddIPAddressFilter command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/AddIPAddressFilter"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__AddIPAddressFilter_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__AddIPAddressFilter*    ns8__AddIPAddressFilter,
    // response parameters:
    struct _ns8__AddIPAddressFilterResponse* ns8__AddIPAddressFilterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__AddIPAddressFilter_(
    struct soap *soap,
    // request parameters:
    struct _ns8__AddIPAddressFilter*    ns8__AddIPAddressFilter,
    // response parameters:
    struct _ns8__AddIPAddressFilterResponse* ns8__AddIPAddressFilterResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	AddIPAddressFilter_ document
//gsoap ns8  service method-encoding:	AddIPAddressFilter_ literal
//gsoap ns8  service method-action:	AddIPAddressFilter_ http://www.onvif.org/ver10/device/wsdl/AddIPAddressFilter
int __ns8__AddIPAddressFilter_(
    struct _ns8__AddIPAddressFilter*    ns8__AddIPAddressFilter,	///< Request parameter
    struct _ns8__AddIPAddressFilterResponse* ns8__AddIPAddressFilterResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__RemoveIPAddressFilter_                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__RemoveIPAddressFilter_" of service binding "DeviceBinding"

/**

Operation details:

This operation deletes an IP filter address from a device. If the device supports
device access
				control based on IP filtering rules (denied or accepted
ranges of IP addresses), the device
				shall support deletion of IP filtering addresses
through the RemoveIPAddressFilter command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/RemoveIPAddressFilter"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__RemoveIPAddressFilter_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__RemoveIPAddressFilter* ns8__RemoveIPAddressFilter,
    // response parameters:
    struct _ns8__RemoveIPAddressFilterResponse* ns8__RemoveIPAddressFilterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__RemoveIPAddressFilter_(
    struct soap *soap,
    // request parameters:
    struct _ns8__RemoveIPAddressFilter* ns8__RemoveIPAddressFilter,
    // response parameters:
    struct _ns8__RemoveIPAddressFilterResponse* ns8__RemoveIPAddressFilterResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	RemoveIPAddressFilter_ document
//gsoap ns8  service method-encoding:	RemoveIPAddressFilter_ literal
//gsoap ns8  service method-action:	RemoveIPAddressFilter_ http://www.onvif.org/ver10/device/wsdl/RemoveIPAddressFilter
int __ns8__RemoveIPAddressFilter_(
    struct _ns8__RemoveIPAddressFilter* ns8__RemoveIPAddressFilter,	///< Request parameter
    struct _ns8__RemoveIPAddressFilterResponse* ns8__RemoveIPAddressFilterResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetAccessPolicy_                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetAccessPolicy_" of service binding "DeviceBinding"

/**

Operation details:

Access to different services and sub-sets of services should be subject to access
control. The
				WS-Security framework gives the prerequisite for
end-point authentication. Authorization
				decisions can then be taken using an access security
policy. This standard does not mandate
				any particular policy description format or security
policy but this is up to the device
				manufacturer or system provider to choose policy
and policy description format of choice.
				However, an access policy (in arbitrary format)
can be requested using this command. If the
				device supports access policy settings based on
WS-Security authentication, then the device
				shall support this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetAccessPolicy"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetAccessPolicy_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetAccessPolicy*       ns8__GetAccessPolicy,
    // response parameters:
    struct _ns8__GetAccessPolicyResponse* ns8__GetAccessPolicyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetAccessPolicy_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetAccessPolicy*       ns8__GetAccessPolicy,
    // response parameters:
    struct _ns8__GetAccessPolicyResponse* ns8__GetAccessPolicyResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetAccessPolicy_ document
//gsoap ns8  service method-encoding:	GetAccessPolicy_ literal
//gsoap ns8  service method-action:	GetAccessPolicy_ http://www.onvif.org/ver10/device/wsdl/GetAccessPolicy
int __ns8__GetAccessPolicy_(
    struct _ns8__GetAccessPolicy*       ns8__GetAccessPolicy,	///< Request parameter
    struct _ns8__GetAccessPolicyResponse* ns8__GetAccessPolicyResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetAccessPolicy_                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetAccessPolicy_" of service binding "DeviceBinding"

/**

Operation details:

This command sets the device access security policy (for more details on the access
security
				policy see the Get command). If the device supports
access policy settings
				based on WS-Security authentication, then the device
shall support this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetAccessPolicy"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetAccessPolicy_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetAccessPolicy*       ns8__SetAccessPolicy,
    // response parameters:
    struct _ns8__SetAccessPolicyResponse* ns8__SetAccessPolicyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetAccessPolicy_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetAccessPolicy*       ns8__SetAccessPolicy,
    // response parameters:
    struct _ns8__SetAccessPolicyResponse* ns8__SetAccessPolicyResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetAccessPolicy_ document
//gsoap ns8  service method-encoding:	SetAccessPolicy_ literal
//gsoap ns8  service method-action:	SetAccessPolicy_ http://www.onvif.org/ver10/device/wsdl/SetAccessPolicy
int __ns8__SetAccessPolicy_(
    struct _ns8__SetAccessPolicy*       ns8__SetAccessPolicy,	///< Request parameter
    struct _ns8__SetAccessPolicyResponse* ns8__SetAccessPolicyResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__CreateCertificate_                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__CreateCertificate_" of service binding "DeviceBinding"

/**

Operation details:

This operation generates a private/public key pair and also can create a self-signed
device
				certificate as a result of key pair generation.
The certificate is created using a suitable
				onboard key pair generation mechanism.<br/>
				If a device supports onboard key pair generation,
the device that supports TLS shall support
				this certificate creation command. And also, if
a device supports onboard key pair generation,
				the device that support IEEE 802.1X shall support
this command for the purpose of key pair
				generation. Certificates and key pairs are identified
using certificate IDs. These IDs are either
				chosen by the certificate generation requester or
by the device (in case that no ID value is
				given).

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/CreateCertificate"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__CreateCertificate_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__CreateCertificate*     ns8__CreateCertificate,
    // response parameters:
    struct _ns8__CreateCertificateResponse* ns8__CreateCertificateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__CreateCertificate_(
    struct soap *soap,
    // request parameters:
    struct _ns8__CreateCertificate*     ns8__CreateCertificate,
    // response parameters:
    struct _ns8__CreateCertificateResponse* ns8__CreateCertificateResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	CreateCertificate_ document
//gsoap ns8  service method-encoding:	CreateCertificate_ literal
//gsoap ns8  service method-action:	CreateCertificate_ http://www.onvif.org/ver10/device/wsdl/CreateCertificate
int __ns8__CreateCertificate_(
    struct _ns8__CreateCertificate*     ns8__CreateCertificate,	///< Request parameter
    struct _ns8__CreateCertificateResponse* ns8__CreateCertificateResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetCertificates_                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetCertificates_" of service binding "DeviceBinding"

/**

Operation details:

This operation gets all device server certificates (including self-signed) for the
purpose of TLS
				authentication and all device client certificates
for the purpose of IEEE 802.1X authentication.
				This command lists only the TLS server certificates
and IEEE 802.1X client certificates for the
				device (neither trusted CA certificates nor trusted
root certificates). The certificates are
				returned as binary data. A device that supports
TLS shall support this command and the
				certificates shall be encoded using ASN.1 [X.681],
[X.682], [X.683] DER [X.690] encoding
				rules.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetCertificates"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetCertificates_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetCertificates*       ns8__GetCertificates,
    // response parameters:
    struct _ns8__GetCertificatesResponse* ns8__GetCertificatesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetCertificates_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetCertificates*       ns8__GetCertificates,
    // response parameters:
    struct _ns8__GetCertificatesResponse* ns8__GetCertificatesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetCertificates_ document
//gsoap ns8  service method-encoding:	GetCertificates_ literal
//gsoap ns8  service method-action:	GetCertificates_ http://www.onvif.org/ver10/device/wsdl/GetCertificates
int __ns8__GetCertificates_(
    struct _ns8__GetCertificates*       ns8__GetCertificates,	///< Request parameter
    struct _ns8__GetCertificatesResponse* ns8__GetCertificatesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetCertificatesStatus_                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetCertificatesStatus_" of service binding "DeviceBinding"

/**

Operation details:

This operation is specific to TLS functionality. This operation gets the status
				(enabled/disabled) of the device TLS server certificates.
A device that supports TLS shall
				support this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetCertificatesStatus"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetCertificatesStatus_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetCertificatesStatus* ns8__GetCertificatesStatus,
    // response parameters:
    struct _ns8__GetCertificatesStatusResponse* ns8__GetCertificatesStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetCertificatesStatus_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetCertificatesStatus* ns8__GetCertificatesStatus,
    // response parameters:
    struct _ns8__GetCertificatesStatusResponse* ns8__GetCertificatesStatusResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetCertificatesStatus_ document
//gsoap ns8  service method-encoding:	GetCertificatesStatus_ literal
//gsoap ns8  service method-action:	GetCertificatesStatus_ http://www.onvif.org/ver10/device/wsdl/GetCertificatesStatus
int __ns8__GetCertificatesStatus_(
    struct _ns8__GetCertificatesStatus* ns8__GetCertificatesStatus,	///< Request parameter
    struct _ns8__GetCertificatesStatusResponse* ns8__GetCertificatesStatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetCertificatesStatus_                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetCertificatesStatus_" of service binding "DeviceBinding"

/**

Operation details:

This operation is specific to TLS functionality. This operation sets the status
(enable/disable)
				of the device TLS server certificates. A device
that supports TLS shall support this command.
				Typically only one device server certificate is
allowed to be enabled at a time.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetCertificatesStatus"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetCertificatesStatus_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetCertificatesStatus* ns8__SetCertificatesStatus,
    // response parameters:
    struct _ns8__SetCertificatesStatusResponse* ns8__SetCertificatesStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetCertificatesStatus_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetCertificatesStatus* ns8__SetCertificatesStatus,
    // response parameters:
    struct _ns8__SetCertificatesStatusResponse* ns8__SetCertificatesStatusResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetCertificatesStatus_ document
//gsoap ns8  service method-encoding:	SetCertificatesStatus_ literal
//gsoap ns8  service method-action:	SetCertificatesStatus_ http://www.onvif.org/ver10/device/wsdl/SetCertificatesStatus
int __ns8__SetCertificatesStatus_(
    struct _ns8__SetCertificatesStatus* ns8__SetCertificatesStatus,	///< Request parameter
    struct _ns8__SetCertificatesStatusResponse* ns8__SetCertificatesStatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__DeleteCertificates_                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__DeleteCertificates_" of service binding "DeviceBinding"

/**

Operation details:

This operation deletes a certificate or multiple certificates. The device MAY also
delete a
				private/public key pair which is coupled with the
certificate to be deleted. The device that
				support either TLS or IEEE 802.1X shall support
the deletion of a certificate or multiple
				certificates through this command. Either all certificates
are deleted successfully or a fault
				message shall be returned without deleting any certificate.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/DeleteCertificates"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__DeleteCertificates_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__DeleteCertificates*    ns8__DeleteCertificates,
    // response parameters:
    struct _ns8__DeleteCertificatesResponse* ns8__DeleteCertificatesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__DeleteCertificates_(
    struct soap *soap,
    // request parameters:
    struct _ns8__DeleteCertificates*    ns8__DeleteCertificates,
    // response parameters:
    struct _ns8__DeleteCertificatesResponse* ns8__DeleteCertificatesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	DeleteCertificates_ document
//gsoap ns8  service method-encoding:	DeleteCertificates_ literal
//gsoap ns8  service method-action:	DeleteCertificates_ http://www.onvif.org/ver10/device/wsdl/DeleteCertificates
int __ns8__DeleteCertificates_(
    struct _ns8__DeleteCertificates*    ns8__DeleteCertificates,	///< Request parameter
    struct _ns8__DeleteCertificatesResponse* ns8__DeleteCertificatesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetPkcs10Request_                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetPkcs10Request_" of service binding "DeviceBinding"

/**

Operation details:

This operation requests a PKCS #10 certificate signature request from the device.
The
				returned information field shall be either formatted
exactly as specified in [PKCS#10] or PEM
				encoded [PKCS#10] format. In order for this command
to work, the device must already have
				a private/public key pair. This key pair should
be referred by CertificateID as specified in the
				input parameter description. This CertificateID
refers to the key pair generated using
				CreateCertificate command.<br/>
				A device that support onboard key pair generation
that supports either TLS or IEEE 802.1X
				using client certificate shall support this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetPkcs10Request"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetPkcs10Request_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetPkcs10Request*      ns8__GetPkcs10Request,
    // response parameters:
    struct _ns8__GetPkcs10RequestResponse* ns8__GetPkcs10RequestResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetPkcs10Request_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetPkcs10Request*      ns8__GetPkcs10Request,
    // response parameters:
    struct _ns8__GetPkcs10RequestResponse* ns8__GetPkcs10RequestResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetPkcs10Request_ document
//gsoap ns8  service method-encoding:	GetPkcs10Request_ literal
//gsoap ns8  service method-action:	GetPkcs10Request_ http://www.onvif.org/ver10/device/wsdl/GetPkcs10Request
int __ns8__GetPkcs10Request_(
    struct _ns8__GetPkcs10Request*      ns8__GetPkcs10Request,	///< Request parameter
    struct _ns8__GetPkcs10RequestResponse* ns8__GetPkcs10RequestResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__LoadCertificates_                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__LoadCertificates_" of service binding "DeviceBinding"

/**

Operation details:

TLS server certificate(s) or IEEE 802.1X client certificate(s) created using the
PKCS#10
				certificate request command can be loaded into the
device using this command (see Section
				8.4.13). The certificate ID in the request shall
be present. The device may sort the received
				certificate(s) based on the public key and subject
information in the certificate(s).
				The certificate ID in the request will be the ID
value the client wish to have. The device is
				supposed to scan the generated key pairs present
in the device to identify which is the
				correspondent key pair with the loaded certificate
and then make the link between the
				certificate and the key pair.<br/>
				A device that supports onboard key pair generation
that support either TLS or IEEE 802.1X
				shall support this command.<br/>
				The certificates shall be encoded using ASN.1 [X.681],
[X.682], [X.683] DER [X.690] encoding
				rules.<br/>
				This command is applicable to any device type, although
the parameter name is called for
				historical reasons NVTCertificate.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/LoadCertificates"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__LoadCertificates_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__LoadCertificates*      ns8__LoadCertificates,
    // response parameters:
    struct _ns8__LoadCertificatesResponse* ns8__LoadCertificatesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__LoadCertificates_(
    struct soap *soap,
    // request parameters:
    struct _ns8__LoadCertificates*      ns8__LoadCertificates,
    // response parameters:
    struct _ns8__LoadCertificatesResponse* ns8__LoadCertificatesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	LoadCertificates_ document
//gsoap ns8  service method-encoding:	LoadCertificates_ literal
//gsoap ns8  service method-action:	LoadCertificates_ http://www.onvif.org/ver10/device/wsdl/LoadCertificates
int __ns8__LoadCertificates_(
    struct _ns8__LoadCertificates*      ns8__LoadCertificates,	///< Request parameter
    struct _ns8__LoadCertificatesResponse* ns8__LoadCertificatesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetClientCertificateMode_                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetClientCertificateMode_" of service binding "DeviceBinding"

/**

Operation details:

This operation is specific to TLS functionality. This operation gets the status
				(enabled/disabled) of the device TLS client authentication.
A device that supports TLS shall
				support this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetClientCertificateMode"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetClientCertificateMode_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetClientCertificateMode* ns8__GetClientCertificateMode,
    // response parameters:
    struct _ns8__GetClientCertificateModeResponse* ns8__GetClientCertificateModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetClientCertificateMode_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetClientCertificateMode* ns8__GetClientCertificateMode,
    // response parameters:
    struct _ns8__GetClientCertificateModeResponse* ns8__GetClientCertificateModeResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetClientCertificateMode_ document
//gsoap ns8  service method-encoding:	GetClientCertificateMode_ literal
//gsoap ns8  service method-action:	GetClientCertificateMode_ http://www.onvif.org/ver10/device/wsdl/GetClientCertificateMode
int __ns8__GetClientCertificateMode_(
    struct _ns8__GetClientCertificateMode* ns8__GetClientCertificateMode,	///< Request parameter
    struct _ns8__GetClientCertificateModeResponse* ns8__GetClientCertificateModeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetClientCertificateMode_                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetClientCertificateMode_" of service binding "DeviceBinding"

/**

Operation details:

This operation is specific to TLS functionality. This operation sets the status
				(enabled/disabled) of the device TLS client authentication.
A device that supports TLS shall
				support this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetClientCertificateMode"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetClientCertificateMode_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetClientCertificateMode* ns8__SetClientCertificateMode,
    // response parameters:
    struct _ns8__SetClientCertificateModeResponse* ns8__SetClientCertificateModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetClientCertificateMode_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetClientCertificateMode* ns8__SetClientCertificateMode,
    // response parameters:
    struct _ns8__SetClientCertificateModeResponse* ns8__SetClientCertificateModeResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetClientCertificateMode_ document
//gsoap ns8  service method-encoding:	SetClientCertificateMode_ literal
//gsoap ns8  service method-action:	SetClientCertificateMode_ http://www.onvif.org/ver10/device/wsdl/SetClientCertificateMode
int __ns8__SetClientCertificateMode_(
    struct _ns8__SetClientCertificateMode* ns8__SetClientCertificateMode,	///< Request parameter
    struct _ns8__SetClientCertificateModeResponse* ns8__SetClientCertificateModeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetRelayOutputs_                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetRelayOutputs_" of service binding "DeviceBinding"

/**

Operation details:

This operation gets a list of all available relay outputs and their settings.<br/>
				This method has been depricated with version 2.0.
Refer to the DeviceIO service.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetRelayOutputs"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetRelayOutputs_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetRelayOutputs*       ns8__GetRelayOutputs,
    // response parameters:
    struct _ns8__GetRelayOutputsResponse* ns8__GetRelayOutputsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetRelayOutputs_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetRelayOutputs*       ns8__GetRelayOutputs,
    // response parameters:
    struct _ns8__GetRelayOutputsResponse* ns8__GetRelayOutputsResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetRelayOutputs_ document
//gsoap ns8  service method-encoding:	GetRelayOutputs_ literal
//gsoap ns8  service method-action:	GetRelayOutputs_ http://www.onvif.org/ver10/device/wsdl/GetRelayOutputs
int __ns8__GetRelayOutputs_(
    struct _ns8__GetRelayOutputs*       ns8__GetRelayOutputs,	///< Request parameter
    struct _ns8__GetRelayOutputsResponse* ns8__GetRelayOutputsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetRelayOutputSettings_                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetRelayOutputSettings_" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the settings of a relay output.
				<br/>This method has been depricated with version
2.0. Refer to the DeviceIO service.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetRelayOutputSettings"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetRelayOutputSettings_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetRelayOutputSettings* ns8__SetRelayOutputSettings,
    // response parameters:
    struct _ns8__SetRelayOutputSettingsResponse* ns8__SetRelayOutputSettingsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetRelayOutputSettings_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetRelayOutputSettings* ns8__SetRelayOutputSettings,
    // response parameters:
    struct _ns8__SetRelayOutputSettingsResponse* ns8__SetRelayOutputSettingsResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetRelayOutputSettings_ document
//gsoap ns8  service method-encoding:	SetRelayOutputSettings_ literal
//gsoap ns8  service method-action:	SetRelayOutputSettings_ http://www.onvif.org/ver10/device/wsdl/SetRelayOutputSettings
int __ns8__SetRelayOutputSettings_(
    struct _ns8__SetRelayOutputSettings* ns8__SetRelayOutputSettings,	///< Request parameter
    struct _ns8__SetRelayOutputSettingsResponse* ns8__SetRelayOutputSettingsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetRelayOutputState_                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetRelayOutputState_" of service binding "DeviceBinding"

/**

Operation details:

This operation sets the state of a relay output.
				<br/>This method has been depricated with version
2.0. Refer to the DeviceIO service.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetRelayOutputState"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetRelayOutputState_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetRelayOutputState*   ns8__SetRelayOutputState,
    // response parameters:
    struct _ns8__SetRelayOutputStateResponse* ns8__SetRelayOutputStateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetRelayOutputState_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetRelayOutputState*   ns8__SetRelayOutputState,
    // response parameters:
    struct _ns8__SetRelayOutputStateResponse* ns8__SetRelayOutputStateResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetRelayOutputState_ document
//gsoap ns8  service method-encoding:	SetRelayOutputState_ literal
//gsoap ns8  service method-action:	SetRelayOutputState_ http://www.onvif.org/ver10/device/wsdl/SetRelayOutputState
int __ns8__SetRelayOutputState_(
    struct _ns8__SetRelayOutputState*   ns8__SetRelayOutputState,	///< Request parameter
    struct _ns8__SetRelayOutputStateResponse* ns8__SetRelayOutputStateResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SendAuxiliaryCommand_                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SendAuxiliaryCommand_" of service binding "DeviceBinding"

/**

Operation details:

This section describes operations to manage auxiliary commands supported by a device,
such
				as controlling an Infrared (IR) lamp, a heater or
a wiper or a thermometer that is connected to
				the device.<br/>
				The supported commands can be retrieved by the AuxiliaryData
parameter which derives from
				GetCapabilities command response. The command transmitted
by using this command should
				1 There is no GetRelayState command; the current
logical state of the relay output is transmitted via notification
				and their properties.<br/>
				match one of the supported commands listed in the
AuxiliaryData response. If the capability
				command response lists only irlampon command, then
the SendAuxiliaryCommand argument
				will be irlampon, which may indicate turning the
connected IR lamp on.
				A device that indicates auxiliary service capability
shall support this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SendAuxiliaryCommand"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SendAuxiliaryCommand_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SendAuxiliaryCommand*  ns8__SendAuxiliaryCommand,
    // response parameters:
    struct _ns8__SendAuxiliaryCommandResponse* ns8__SendAuxiliaryCommandResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SendAuxiliaryCommand_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SendAuxiliaryCommand*  ns8__SendAuxiliaryCommand,
    // response parameters:
    struct _ns8__SendAuxiliaryCommandResponse* ns8__SendAuxiliaryCommandResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SendAuxiliaryCommand_ document
//gsoap ns8  service method-encoding:	SendAuxiliaryCommand_ literal
//gsoap ns8  service method-action:	SendAuxiliaryCommand_ http://www.onvif.org/ver10/device/wsdl/SendAuxiliaryCommand
int __ns8__SendAuxiliaryCommand_(
    struct _ns8__SendAuxiliaryCommand*  ns8__SendAuxiliaryCommand,	///< Request parameter
    struct _ns8__SendAuxiliaryCommandResponse* ns8__SendAuxiliaryCommandResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetCACertificates_                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetCACertificates_" of service binding "DeviceBinding"

/**

Operation details:

CA certificates will be loaded into a device and be used for the sake of following
two cases.
				The one is for the purpose of TLS client authentication
in TLS server function. The other one
				is for the purpose of Authentication Server authentication
in IEEE 802.1X function. This
				operation gets all CA certificates loaded into a
device. A device that supports either TLS client
				authentication or IEEE 802.1X shall support this
command and the returned certificates shall
				be encoded using ASN.1 [X.681], [X.682], [X.683]
DER [X.690] encoding rules.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetCACertificates"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetCACertificates_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetCACertificates*     ns8__GetCACertificates,
    // response parameters:
    struct _ns8__GetCACertificatesResponse* ns8__GetCACertificatesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetCACertificates_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetCACertificates*     ns8__GetCACertificates,
    // response parameters:
    struct _ns8__GetCACertificatesResponse* ns8__GetCACertificatesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetCACertificates_ document
//gsoap ns8  service method-encoding:	GetCACertificates_ literal
//gsoap ns8  service method-action:	GetCACertificates_ http://www.onvif.org/ver10/device/wsdl/GetCACertificates
int __ns8__GetCACertificates_(
    struct _ns8__GetCACertificates*     ns8__GetCACertificates,	///< Request parameter
    struct _ns8__GetCACertificatesResponse* ns8__GetCACertificatesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__LoadCertificateWithPrivateKey_                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__LoadCertificateWithPrivateKey_" of service binding "DeviceBinding"

/**

Operation details:

There might be some cases that a Certificate Authority or some other equivalent
creates a
				certificate without having PKCS#10 certificate signing
request. In such cases, the certificate
				will be bundled in conjunction with its private
key. This command will be used for such use
				case scenarios. The certificate ID in the request
is optionally set to the ID value the client
				wish to have. If the certificate ID is not specified
in the request, device can choose the ID
				accordingly.<br/>
				This operation imports a private/public key pair
into the device.
				The certificates shall be encoded using ASN.1 [X.681],
[X.682], [X.683] DER [X.690] encoding
				rules.<br/>
				A device that does not support onboard key pair
generation and support either TLS or IEEE
				802.1X using client certificate shall support this
command. A device that support onboard key
				pair generation MAY support this command. The security
policy of a device that supports this
				operation should make sure that the private key
is sufficiently protected.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/LoadCertificateWithPrivateKey"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__LoadCertificateWithPrivateKey_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__LoadCertificateWithPrivateKey* ns8__LoadCertificateWithPrivateKey,
    // response parameters:
    struct _ns8__LoadCertificateWithPrivateKeyResponse* ns8__LoadCertificateWithPrivateKeyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__LoadCertificateWithPrivateKey_(
    struct soap *soap,
    // request parameters:
    struct _ns8__LoadCertificateWithPrivateKey* ns8__LoadCertificateWithPrivateKey,
    // response parameters:
    struct _ns8__LoadCertificateWithPrivateKeyResponse* ns8__LoadCertificateWithPrivateKeyResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	LoadCertificateWithPrivateKey_ document
//gsoap ns8  service method-encoding:	LoadCertificateWithPrivateKey_ literal
//gsoap ns8  service method-action:	LoadCertificateWithPrivateKey_ http://www.onvif.org/ver10/device/wsdl/LoadCertificateWithPrivateKey
int __ns8__LoadCertificateWithPrivateKey_(
    struct _ns8__LoadCertificateWithPrivateKey* ns8__LoadCertificateWithPrivateKey,	///< Request parameter
    struct _ns8__LoadCertificateWithPrivateKeyResponse* ns8__LoadCertificateWithPrivateKeyResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetCertificateInformation_                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetCertificateInformation_" of service binding "DeviceBinding"

/**

Operation details:

This operation requests the information of a certificate specified by certificate
ID. The device
				should respond with its Issuer DN, Subject
DN, Key usage, "Extended key usage, Key
				Length, Version, Serial Number, Signature
Algorithm and Validity data as the
				information of the certificate, as long as the device
can retrieve such information from the
				specified certificate.<br/>
				A device that supports either TLS or IEEE 802.1X
should support this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetCertificateInformation"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetCertificateInformation_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetCertificateInformation* ns8__GetCertificateInformation,
    // response parameters:
    struct _ns8__GetCertificateInformationResponse* ns8__GetCertificateInformationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetCertificateInformation_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetCertificateInformation* ns8__GetCertificateInformation,
    // response parameters:
    struct _ns8__GetCertificateInformationResponse* ns8__GetCertificateInformationResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetCertificateInformation_ document
//gsoap ns8  service method-encoding:	GetCertificateInformation_ literal
//gsoap ns8  service method-action:	GetCertificateInformation_ http://www.onvif.org/ver10/device/wsdl/GetCertificateInformation
int __ns8__GetCertificateInformation_(
    struct _ns8__GetCertificateInformation* ns8__GetCertificateInformation,	///< Request parameter
    struct _ns8__GetCertificateInformationResponse* ns8__GetCertificateInformationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__LoadCACertificates_                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__LoadCACertificates_" of service binding "DeviceBinding"

/**

Operation details:

This command is used when it is necessary to load trusted CA certificates or trusted
root
				certificates for the purpose of verification for
its counterpart i.e. client certificate verification in
				TLS function or server certificate verification
in IEEE 802.1X function.<br/>
				A device that support either TLS or IEEE 802.1X
shall support this command. As for the
				supported certificate format, either DER format
or PEM format is possible to be used. But a
				device that support this command shall support at
least DER format as supported format type.
				The device may sort the received certificate(s)
based on the public key and subject
				information in the certificate(s). Either all CA
certificates are loaded successfully or a fault
				message shall be returned without loading any CA
certificate.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/LoadCACertificates"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__LoadCACertificates_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__LoadCACertificates*    ns8__LoadCACertificates,
    // response parameters:
    struct _ns8__LoadCACertificatesResponse* ns8__LoadCACertificatesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__LoadCACertificates_(
    struct soap *soap,
    // request parameters:
    struct _ns8__LoadCACertificates*    ns8__LoadCACertificates,
    // response parameters:
    struct _ns8__LoadCACertificatesResponse* ns8__LoadCACertificatesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	LoadCACertificates_ document
//gsoap ns8  service method-encoding:	LoadCACertificates_ literal
//gsoap ns8  service method-action:	LoadCACertificates_ http://www.onvif.org/ver10/device/wsdl/LoadCACertificates
int __ns8__LoadCACertificates_(
    struct _ns8__LoadCACertificates*    ns8__LoadCACertificates,	///< Request parameter
    struct _ns8__LoadCACertificatesResponse* ns8__LoadCACertificatesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__CreateDot1XConfiguration_                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__CreateDot1XConfiguration_" of service binding "DeviceBinding"

/**

Operation details:

This operation newly creates IEEE 802.1X configuration parameter set of the device.
The
				device shall support this command if it supports
IEEE 802.1X. If the device receives this
				request with already existing configuration token
(Dot1XConfigurationToken) specification, the
				device should respond with 'ter:ReferenceToken '
error to indicate there is some configuration
				conflict.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/CreateDot1XConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__CreateDot1XConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__CreateDot1XConfiguration* ns8__CreateDot1XConfiguration,
    // response parameters:
    struct _ns8__CreateDot1XConfigurationResponse* ns8__CreateDot1XConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__CreateDot1XConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns8__CreateDot1XConfiguration* ns8__CreateDot1XConfiguration,
    // response parameters:
    struct _ns8__CreateDot1XConfigurationResponse* ns8__CreateDot1XConfigurationResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	CreateDot1XConfiguration_ document
//gsoap ns8  service method-encoding:	CreateDot1XConfiguration_ literal
//gsoap ns8  service method-action:	CreateDot1XConfiguration_ http://www.onvif.org/ver10/device/wsdl/CreateDot1XConfiguration
int __ns8__CreateDot1XConfiguration_(
    struct _ns8__CreateDot1XConfiguration* ns8__CreateDot1XConfiguration,	///< Request parameter
    struct _ns8__CreateDot1XConfigurationResponse* ns8__CreateDot1XConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__SetDot1XConfiguration_                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__SetDot1XConfiguration_" of service binding "DeviceBinding"

/**

Operation details:

While the CreateDot1XConfiguration command is trying to create a new configuration
				parameter set, this operation modifies existing
IEEE 802.1X configuration parameter set of
				the device. A device that support IEEE 802.1X shall
support this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/SetDot1XConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__SetDot1XConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__SetDot1XConfiguration* ns8__SetDot1XConfiguration,
    // response parameters:
    struct _ns8__SetDot1XConfigurationResponse* ns8__SetDot1XConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__SetDot1XConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns8__SetDot1XConfiguration* ns8__SetDot1XConfiguration,
    // response parameters:
    struct _ns8__SetDot1XConfigurationResponse* ns8__SetDot1XConfigurationResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	SetDot1XConfiguration_ document
//gsoap ns8  service method-encoding:	SetDot1XConfiguration_ literal
//gsoap ns8  service method-action:	SetDot1XConfiguration_ http://www.onvif.org/ver10/device/wsdl/SetDot1XConfiguration
int __ns8__SetDot1XConfiguration_(
    struct _ns8__SetDot1XConfiguration* ns8__SetDot1XConfiguration,	///< Request parameter
    struct _ns8__SetDot1XConfigurationResponse* ns8__SetDot1XConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetDot1XConfiguration_                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetDot1XConfiguration_" of service binding "DeviceBinding"

/**

Operation details:

This operation gets one IEEE 802.1X configuration parameter set from the device
by
				specifying the configuration token (Dot1XConfigurationToken).<br/>
				A device that supports IEEE 802.1X shall support
this command.
				Regardless of whether the 802.1X method in the retrieved
configuration has a password or
				not, the device shall not include the Password element
in the response.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetDot1XConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetDot1XConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetDot1XConfiguration* ns8__GetDot1XConfiguration,
    // response parameters:
    struct _ns8__GetDot1XConfigurationResponse* ns8__GetDot1XConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetDot1XConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetDot1XConfiguration* ns8__GetDot1XConfiguration,
    // response parameters:
    struct _ns8__GetDot1XConfigurationResponse* ns8__GetDot1XConfigurationResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetDot1XConfiguration_ document
//gsoap ns8  service method-encoding:	GetDot1XConfiguration_ literal
//gsoap ns8  service method-action:	GetDot1XConfiguration_ http://www.onvif.org/ver10/device/wsdl/GetDot1XConfiguration
int __ns8__GetDot1XConfiguration_(
    struct _ns8__GetDot1XConfiguration* ns8__GetDot1XConfiguration,	///< Request parameter
    struct _ns8__GetDot1XConfigurationResponse* ns8__GetDot1XConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetDot1XConfigurations_                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetDot1XConfigurations_" of service binding "DeviceBinding"

/**

Operation details:

This operation gets all the existing IEEE 802.1X configuration parameter sets from
the device.
				The device shall respond with all the IEEE 802.1X
configurations so that the client can get to
				know how many IEEE 802.1X configurations are existing
and how they are configured.<br/>
				A device that support IEEE 802.1X shall support
this command.<br/>
				Regardless of whether the 802.1X method in the retrieved
configuration has a password or
				not, the device shall not include the Password element
in the response.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurations"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetDot1XConfigurations_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetDot1XConfigurations* ns8__GetDot1XConfigurations,
    // response parameters:
    struct _ns8__GetDot1XConfigurationsResponse* ns8__GetDot1XConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetDot1XConfigurations_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetDot1XConfigurations* ns8__GetDot1XConfigurations,
    // response parameters:
    struct _ns8__GetDot1XConfigurationsResponse* ns8__GetDot1XConfigurationsResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetDot1XConfigurations_ document
//gsoap ns8  service method-encoding:	GetDot1XConfigurations_ literal
//gsoap ns8  service method-action:	GetDot1XConfigurations_ http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurations
int __ns8__GetDot1XConfigurations_(
    struct _ns8__GetDot1XConfigurations* ns8__GetDot1XConfigurations,	///< Request parameter
    struct _ns8__GetDot1XConfigurationsResponse* ns8__GetDot1XConfigurationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__DeleteDot1XConfiguration_                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__DeleteDot1XConfiguration_" of service binding "DeviceBinding"

/**

Operation details:

This operation deletes an IEEE 802.1X configuration parameter set from the device.
Which
				configuration should be deleted is specified by
the 'Dot1XConfigurationToken' in the request.
				A device that support IEEE 802.1X shall support
this command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/DeleteDot1XConfiguration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__DeleteDot1XConfiguration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__DeleteDot1XConfiguration* ns8__DeleteDot1XConfiguration,
    // response parameters:
    struct _ns8__DeleteDot1XConfigurationResponse* ns8__DeleteDot1XConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__DeleteDot1XConfiguration_(
    struct soap *soap,
    // request parameters:
    struct _ns8__DeleteDot1XConfiguration* ns8__DeleteDot1XConfiguration,
    // response parameters:
    struct _ns8__DeleteDot1XConfigurationResponse* ns8__DeleteDot1XConfigurationResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	DeleteDot1XConfiguration_ document
//gsoap ns8  service method-encoding:	DeleteDot1XConfiguration_ literal
//gsoap ns8  service method-action:	DeleteDot1XConfiguration_ http://www.onvif.org/ver10/device/wsdl/DeleteDot1XConfiguration
int __ns8__DeleteDot1XConfiguration_(
    struct _ns8__DeleteDot1XConfiguration* ns8__DeleteDot1XConfiguration,	///< Request parameter
    struct _ns8__DeleteDot1XConfigurationResponse* ns8__DeleteDot1XConfigurationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetDot11Capabilities_                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetDot11Capabilities_" of service binding "DeviceBinding"

/**

Operation details:

This operation returns the IEEE802.11 capabilities. The device shall support
				this operation.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetDot11Capabilities"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetDot11Capabilities_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetDot11Capabilities*  ns8__GetDot11Capabilities,
    // response parameters:
    struct _ns8__GetDot11CapabilitiesResponse* ns8__GetDot11CapabilitiesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetDot11Capabilities_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetDot11Capabilities*  ns8__GetDot11Capabilities,
    // response parameters:
    struct _ns8__GetDot11CapabilitiesResponse* ns8__GetDot11CapabilitiesResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetDot11Capabilities_ document
//gsoap ns8  service method-encoding:	GetDot11Capabilities_ literal
//gsoap ns8  service method-action:	GetDot11Capabilities_ http://www.onvif.org/ver10/device/wsdl/GetDot11Capabilities
int __ns8__GetDot11Capabilities_(
    struct _ns8__GetDot11Capabilities*  ns8__GetDot11Capabilities,	///< Request parameter
    struct _ns8__GetDot11CapabilitiesResponse* ns8__GetDot11CapabilitiesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetDot11Status_                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetDot11Status_" of service binding "DeviceBinding"

/**

Operation details:

This operation returns the status of a wireless network interface. The device shall
support this
				command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetDot11Status"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetDot11Status_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetDot11Status*        ns8__GetDot11Status,
    // response parameters:
    struct _ns8__GetDot11StatusResponse* ns8__GetDot11StatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetDot11Status_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetDot11Status*        ns8__GetDot11Status,
    // response parameters:
    struct _ns8__GetDot11StatusResponse* ns8__GetDot11StatusResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetDot11Status_ document
//gsoap ns8  service method-encoding:	GetDot11Status_ literal
//gsoap ns8  service method-action:	GetDot11Status_ http://www.onvif.org/ver10/device/wsdl/GetDot11Status
int __ns8__GetDot11Status_(
    struct _ns8__GetDot11Status*        ns8__GetDot11Status,	///< Request parameter
    struct _ns8__GetDot11StatusResponse* ns8__GetDot11StatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__ScanAvailableDot11Networks_                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__ScanAvailableDot11Networks_" of service binding "DeviceBinding"

/**

Operation details:

This operation returns a lists of the wireless networks in range of the device.
A device should
				support this operation.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/ScanAvailableDot11Networks"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__ScanAvailableDot11Networks_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__ScanAvailableDot11Networks* ns8__ScanAvailableDot11Networks,
    // response parameters:
    struct _ns8__ScanAvailableDot11NetworksResponse* ns8__ScanAvailableDot11NetworksResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__ScanAvailableDot11Networks_(
    struct soap *soap,
    // request parameters:
    struct _ns8__ScanAvailableDot11Networks* ns8__ScanAvailableDot11Networks,
    // response parameters:
    struct _ns8__ScanAvailableDot11NetworksResponse* ns8__ScanAvailableDot11NetworksResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	ScanAvailableDot11Networks_ document
//gsoap ns8  service method-encoding:	ScanAvailableDot11Networks_ literal
//gsoap ns8  service method-action:	ScanAvailableDot11Networks_ http://www.onvif.org/ver10/device/wsdl/ScanAvailableDot11Networks
int __ns8__ScanAvailableDot11Networks_(
    struct _ns8__ScanAvailableDot11Networks* ns8__ScanAvailableDot11Networks,	///< Request parameter
    struct _ns8__ScanAvailableDot11NetworksResponse* ns8__ScanAvailableDot11NetworksResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__GetSystemUris_                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__GetSystemUris_" of service binding "DeviceBinding"

/**

Operation details:

This operation is used to retrieve URIs from which system information may be downloaded
				using HTTP. URIs may be returned for the following
system information:<br/>
				System Logs. Multiple system logs may be returned,
of different types. The exact format of
				the system logs is outside the scope of this specification.<br/>
				Support Information. This consists of arbitrary
device diagnostics information from a device.
				The exact format of the diagnostic information is
outside the scope of this specification.<br/>
				System Backup. The received file is a backup file
that can be used to restore the current
				device configuration at a later date. The exact
format of the backup configuration file is
				outside the scope of this specification.<br/>
				If the device allows retrieval of system logs, support
information or system backup data, it
				should make them available via HTTP GET. If it does,
it shall support the GetSystemUris
				command.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/GetSystemUris"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__GetSystemUris_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__GetSystemUris*         ns8__GetSystemUris,
    // response parameters:
    struct _ns8__GetSystemUrisResponse* ns8__GetSystemUrisResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__GetSystemUris_(
    struct soap *soap,
    // request parameters:
    struct _ns8__GetSystemUris*         ns8__GetSystemUris,
    // response parameters:
    struct _ns8__GetSystemUrisResponse* ns8__GetSystemUrisResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	GetSystemUris_ document
//gsoap ns8  service method-encoding:	GetSystemUris_ literal
//gsoap ns8  service method-action:	GetSystemUris_ http://www.onvif.org/ver10/device/wsdl/GetSystemUris
int __ns8__GetSystemUris_(
    struct _ns8__GetSystemUris*         ns8__GetSystemUris,	///< Request parameter
    struct _ns8__GetSystemUrisResponse* ns8__GetSystemUrisResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__StartFirmwareUpgrade_                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__StartFirmwareUpgrade_" of service binding "DeviceBinding"

/**

Operation details:

This operation initiates a firmware upgrade using the HTTP POST mechanism. The response
				to the command includes an HTTP URL to which the
upgrade file may be uploaded. The
				actual upgrade takes place as soon as the HTTP POST
operation has completed. The device
				should support firmware upgrade through the StartFirmwareUpgrade
command. The exact
				format of the firmware data is outside the scope
of this specification.
				Firmware upgrade over HTTP may be achieved using
the following steps:<ol>
	<li>Client calls StartFirmwareUpgrade.</li>
	<li>Server responds with upload URI and optional delay value.</li>
	<li>Client waits for delay duration if specified by server.</li>
	<li>Client transmits the firmware image to the upload URI using HTTP POST.</li>
	<li>Server reprograms itself using the uploaded image, then reboots.</li>
</ol>
				If the firmware upgrade fails because the upgrade
file was invalid, the HTTP POST response
				shall be 415 Unsupported Media Type. If the
firmware upgrade fails due to an error at the
				device, the HTTP POST response shall be 500 Internal
Server Error.<br/>
				The value of the Content-Type header in the HTTP
POST request shall be application/octetstream.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/StartFirmwareUpgrade"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__StartFirmwareUpgrade_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__StartFirmwareUpgrade*  ns8__StartFirmwareUpgrade,
    // response parameters:
    struct _ns8__StartFirmwareUpgradeResponse* ns8__StartFirmwareUpgradeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__StartFirmwareUpgrade_(
    struct soap *soap,
    // request parameters:
    struct _ns8__StartFirmwareUpgrade*  ns8__StartFirmwareUpgrade,
    // response parameters:
    struct _ns8__StartFirmwareUpgradeResponse* ns8__StartFirmwareUpgradeResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	StartFirmwareUpgrade_ document
//gsoap ns8  service method-encoding:	StartFirmwareUpgrade_ literal
//gsoap ns8  service method-action:	StartFirmwareUpgrade_ http://www.onvif.org/ver10/device/wsdl/StartFirmwareUpgrade
int __ns8__StartFirmwareUpgrade_(
    struct _ns8__StartFirmwareUpgrade*  ns8__StartFirmwareUpgrade,	///< Request parameter
    struct _ns8__StartFirmwareUpgradeResponse* ns8__StartFirmwareUpgradeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__StartSystemRestore_                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns8__StartSystemRestore_" of service binding "DeviceBinding"

/**

Operation details:

This operation initiates a system restore from backed up configuration data using
the HTTP
				POST mechanism. The response to the command includes
an HTTP URL to which the backup
				file may be uploaded. The actual restore takes place
as soon as the HTTP POST operation
				has completed. Devices should support system restore
through the StartSystemRestore
				command. The exact format of the backup configuration
data is outside the scope of this
				specification.<br/>
				System restore over HTTP may be achieved using the
following steps:<ol>
	<li>Client calls StartSystemRestore.</li>
	<li>Server responds with upload URI.</li>
	<li>Client transmits the configuration data to the upload URI using HTTP
POST.</li>
	<li>Server applies the uploaded configuration, then reboots if necessary.</li>
</ol>
				If the system restore fails because the uploaded
file was invalid, the HTTP POST response
				shall be 415 Unsupported Media Type. If the
system restore fails due to an error at the
				device, the HTTP POST response shall be 500 Internal
Server Error.<br/>
				The value of the Content-Type header in the HTTP
POST request shall be application/octetstream.

  - SOAP document/literal style messaging

  - SOAP action="http://www.onvif.org/ver10/device/wsdl/StartSystemRestore"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__StartSystemRestore_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct _ns8__StartSystemRestore*    ns8__StartSystemRestore,
    // response parameters:
    struct _ns8__StartSystemRestoreResponse* ns8__StartSystemRestoreResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__StartSystemRestore_(
    struct soap *soap,
    // request parameters:
    struct _ns8__StartSystemRestore*    ns8__StartSystemRestore,
    // response parameters:
    struct _ns8__StartSystemRestoreResponse* ns8__StartSystemRestoreResponse
  );
@endcode

*/

//gsoap ns8  service method-style:	StartSystemRestore_ document
//gsoap ns8  service method-encoding:	StartSystemRestore_ literal
//gsoap ns8  service method-action:	StartSystemRestore_ http://www.onvif.org/ver10/device/wsdl/StartSystemRestore
int __ns8__StartSystemRestore_(
    struct _ns8__StartSystemRestore*    ns8__StartSystemRestore,	///< Request parameter
    struct _ns8__StartSystemRestoreResponse* ns8__StartSystemRestoreResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns1 Top-level root elements of schema "http://www.onvif.org/ver10/deviceIO/wsdl"

  - <ns1:GetServiceCapabilities> @ref _ns1__GetServiceCapabilities
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetServiceCapabilities(struct soap*, struct _ns1__GetServiceCapabilities*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetServiceCapabilities(struct soap*, struct _ns1__GetServiceCapabilities*);
    @endcode

  - <ns1:GetServiceCapabilitiesResponse> @ref _ns1__GetServiceCapabilitiesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetServiceCapabilitiesResponse(struct soap*, struct _ns1__GetServiceCapabilitiesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetServiceCapabilitiesResponse(struct soap*, struct _ns1__GetServiceCapabilitiesResponse*);
    @endcode

  - <ns1:Capabilities> (use wsdl2h option -g to auto-generate)

  - <ns1:GetVideoOutputs> @ref _ns1__GetVideoOutputs
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetVideoOutputs(struct soap*, struct _ns1__GetVideoOutputs*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetVideoOutputs(struct soap*, struct _ns1__GetVideoOutputs*);
    @endcode

  - <ns1:GetVideoOutputsResponse> @ref _ns1__GetVideoOutputsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetVideoOutputsResponse(struct soap*, struct _ns1__GetVideoOutputsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetVideoOutputsResponse(struct soap*, struct _ns1__GetVideoOutputsResponse*);
    @endcode

  - <ns1:GetAudioSourceConfiguration> @ref _ns1__GetAudioSourceConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAudioSourceConfiguration(struct soap*, struct _ns1__GetAudioSourceConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAudioSourceConfiguration(struct soap*, struct _ns1__GetAudioSourceConfiguration*);
    @endcode

  - <ns1:GetAudioSourceConfigurationResponse> @ref _ns1__GetAudioSourceConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAudioSourceConfigurationResponse(struct soap*, struct _ns1__GetAudioSourceConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAudioSourceConfigurationResponse(struct soap*, struct _ns1__GetAudioSourceConfigurationResponse*);
    @endcode

  - <ns1:GetAudioOutputConfiguration> @ref _ns1__GetAudioOutputConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAudioOutputConfiguration(struct soap*, struct _ns1__GetAudioOutputConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAudioOutputConfiguration(struct soap*, struct _ns1__GetAudioOutputConfiguration*);
    @endcode

  - <ns1:GetAudioOutputConfigurationResponse> @ref _ns1__GetAudioOutputConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAudioOutputConfigurationResponse(struct soap*, struct _ns1__GetAudioOutputConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAudioOutputConfigurationResponse(struct soap*, struct _ns1__GetAudioOutputConfigurationResponse*);
    @endcode

  - <ns1:GetVideoSourceConfiguration> @ref _ns1__GetVideoSourceConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetVideoSourceConfiguration(struct soap*, struct _ns1__GetVideoSourceConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetVideoSourceConfiguration(struct soap*, struct _ns1__GetVideoSourceConfiguration*);
    @endcode

  - <ns1:GetVideoSourceConfigurationResponse> @ref _ns1__GetVideoSourceConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetVideoSourceConfigurationResponse(struct soap*, struct _ns1__GetVideoSourceConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetVideoSourceConfigurationResponse(struct soap*, struct _ns1__GetVideoSourceConfigurationResponse*);
    @endcode

  - <ns1:GetVideoOutputConfiguration> @ref _ns1__GetVideoOutputConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetVideoOutputConfiguration(struct soap*, struct _ns1__GetVideoOutputConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetVideoOutputConfiguration(struct soap*, struct _ns1__GetVideoOutputConfiguration*);
    @endcode

  - <ns1:GetVideoOutputConfigurationResponse> @ref _ns1__GetVideoOutputConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetVideoOutputConfigurationResponse(struct soap*, struct _ns1__GetVideoOutputConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetVideoOutputConfigurationResponse(struct soap*, struct _ns1__GetVideoOutputConfigurationResponse*);
    @endcode

  - <ns1:SetAudioSourceConfiguration> @ref _ns1__SetAudioSourceConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetAudioSourceConfiguration(struct soap*, struct _ns1__SetAudioSourceConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetAudioSourceConfiguration(struct soap*, struct _ns1__SetAudioSourceConfiguration*);
    @endcode

  - <ns1:SetAudioSourceConfigurationResponse> @ref _ns1__SetAudioSourceConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetAudioSourceConfigurationResponse(struct soap*, struct _ns1__SetAudioSourceConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetAudioSourceConfigurationResponse(struct soap*, struct _ns1__SetAudioSourceConfigurationResponse*);
    @endcode

  - <ns1:SetAudioOutputConfiguration> @ref _ns1__SetAudioOutputConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetAudioOutputConfiguration(struct soap*, struct _ns1__SetAudioOutputConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetAudioOutputConfiguration(struct soap*, struct _ns1__SetAudioOutputConfiguration*);
    @endcode

  - <ns1:SetAudioOutputConfigurationResponse> @ref _ns1__SetAudioOutputConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetAudioOutputConfigurationResponse(struct soap*, struct _ns1__SetAudioOutputConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetAudioOutputConfigurationResponse(struct soap*, struct _ns1__SetAudioOutputConfigurationResponse*);
    @endcode

  - <ns1:SetVideoSourceConfiguration> @ref _ns1__SetVideoSourceConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetVideoSourceConfiguration(struct soap*, struct _ns1__SetVideoSourceConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetVideoSourceConfiguration(struct soap*, struct _ns1__SetVideoSourceConfiguration*);
    @endcode

  - <ns1:SetVideoSourceConfigurationResponse> @ref _ns1__SetVideoSourceConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetVideoSourceConfigurationResponse(struct soap*, struct _ns1__SetVideoSourceConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetVideoSourceConfigurationResponse(struct soap*, struct _ns1__SetVideoSourceConfigurationResponse*);
    @endcode

  - <ns1:SetVideoOutputConfiguration> @ref _ns1__SetVideoOutputConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetVideoOutputConfiguration(struct soap*, struct _ns1__SetVideoOutputConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetVideoOutputConfiguration(struct soap*, struct _ns1__SetVideoOutputConfiguration*);
    @endcode

  - <ns1:SetVideoOutputConfigurationResponse> @ref _ns1__SetVideoOutputConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetVideoOutputConfigurationResponse(struct soap*, struct _ns1__SetVideoOutputConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetVideoOutputConfigurationResponse(struct soap*, struct _ns1__SetVideoOutputConfigurationResponse*);
    @endcode

  - <ns1:GetVideoSourceConfigurationOptions> @ref _ns1__GetVideoSourceConfigurationOptions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetVideoSourceConfigurationOptions(struct soap*, struct _ns1__GetVideoSourceConfigurationOptions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetVideoSourceConfigurationOptions(struct soap*, struct _ns1__GetVideoSourceConfigurationOptions*);
    @endcode

  - <ns1:GetVideoSourceConfigurationOptionsResponse> @ref _ns1__GetVideoSourceConfigurationOptionsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetVideoSourceConfigurationOptionsResponse(struct soap*, struct _ns1__GetVideoSourceConfigurationOptionsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetVideoSourceConfigurationOptionsResponse(struct soap*, struct _ns1__GetVideoSourceConfigurationOptionsResponse*);
    @endcode

  - <ns1:GetVideoOutputConfigurationOptions> @ref _ns1__GetVideoOutputConfigurationOptions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetVideoOutputConfigurationOptions(struct soap*, struct _ns1__GetVideoOutputConfigurationOptions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetVideoOutputConfigurationOptions(struct soap*, struct _ns1__GetVideoOutputConfigurationOptions*);
    @endcode

  - <ns1:GetVideoOutputConfigurationOptionsResponse> @ref _ns1__GetVideoOutputConfigurationOptionsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetVideoOutputConfigurationOptionsResponse(struct soap*, struct _ns1__GetVideoOutputConfigurationOptionsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetVideoOutputConfigurationOptionsResponse(struct soap*, struct _ns1__GetVideoOutputConfigurationOptionsResponse*);
    @endcode

  - <ns1:GetAudioSourceConfigurationOptions> @ref _ns1__GetAudioSourceConfigurationOptions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAudioSourceConfigurationOptions(struct soap*, struct _ns1__GetAudioSourceConfigurationOptions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAudioSourceConfigurationOptions(struct soap*, struct _ns1__GetAudioSourceConfigurationOptions*);
    @endcode

  - <ns1:GetAudioSourceConfigurationOptionsResponse> @ref _ns1__GetAudioSourceConfigurationOptionsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAudioSourceConfigurationOptionsResponse(struct soap*, struct _ns1__GetAudioSourceConfigurationOptionsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAudioSourceConfigurationOptionsResponse(struct soap*, struct _ns1__GetAudioSourceConfigurationOptionsResponse*);
    @endcode

  - <ns1:GetAudioOutputConfigurationOptions> @ref _ns1__GetAudioOutputConfigurationOptions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAudioOutputConfigurationOptions(struct soap*, struct _ns1__GetAudioOutputConfigurationOptions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAudioOutputConfigurationOptions(struct soap*, struct _ns1__GetAudioOutputConfigurationOptions*);
    @endcode

  - <ns1:GetAudioOutputConfigurationOptionsResponse> @ref _ns1__GetAudioOutputConfigurationOptionsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAudioOutputConfigurationOptionsResponse(struct soap*, struct _ns1__GetAudioOutputConfigurationOptionsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAudioOutputConfigurationOptionsResponse(struct soap*, struct _ns1__GetAudioOutputConfigurationOptionsResponse*);
    @endcode

  - <ns1:SetRelayOutputSettings> @ref _ns1__SetRelayOutputSettings
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetRelayOutputSettings(struct soap*, struct _ns1__SetRelayOutputSettings*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetRelayOutputSettings(struct soap*, struct _ns1__SetRelayOutputSettings*);
    @endcode

  - <ns1:SetRelayOutputSettingsResponse> @ref _ns1__SetRelayOutputSettingsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetRelayOutputSettingsResponse(struct soap*, struct _ns1__SetRelayOutputSettingsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetRelayOutputSettingsResponse(struct soap*, struct _ns1__SetRelayOutputSettingsResponse*);
    @endcode

@section ns2 Top-level root elements of schema "http://www.onvif.org/ver10/media/wsdl"

  - <ns2:GetServiceCapabilities> @ref _ns2__GetServiceCapabilities
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetServiceCapabilities(struct soap*, struct _ns2__GetServiceCapabilities*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetServiceCapabilities(struct soap*, struct _ns2__GetServiceCapabilities*);
    @endcode

  - <ns2:GetServiceCapabilitiesResponse> @ref _ns2__GetServiceCapabilitiesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetServiceCapabilitiesResponse(struct soap*, struct _ns2__GetServiceCapabilitiesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetServiceCapabilitiesResponse(struct soap*, struct _ns2__GetServiceCapabilitiesResponse*);
    @endcode

  - <ns2:Capabilities> (use wsdl2h option -g to auto-generate)

  - <ns2:GetVideoSources> @ref _ns2__GetVideoSources
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetVideoSources(struct soap*, struct _ns2__GetVideoSources*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetVideoSources(struct soap*, struct _ns2__GetVideoSources*);
    @endcode

  - <ns2:GetVideoSourcesResponse> @ref _ns2__GetVideoSourcesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetVideoSourcesResponse(struct soap*, struct _ns2__GetVideoSourcesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetVideoSourcesResponse(struct soap*, struct _ns2__GetVideoSourcesResponse*);
    @endcode

  - <ns2:GetAudioSources> @ref _ns2__GetAudioSources
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioSources(struct soap*, struct _ns2__GetAudioSources*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioSources(struct soap*, struct _ns2__GetAudioSources*);
    @endcode

  - <ns2:GetAudioSourcesResponse> @ref _ns2__GetAudioSourcesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioSourcesResponse(struct soap*, struct _ns2__GetAudioSourcesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioSourcesResponse(struct soap*, struct _ns2__GetAudioSourcesResponse*);
    @endcode

  - <ns2:GetAudioOutputs> @ref _ns2__GetAudioOutputs
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioOutputs(struct soap*, struct _ns2__GetAudioOutputs*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioOutputs(struct soap*, struct _ns2__GetAudioOutputs*);
    @endcode

  - <ns2:GetAudioOutputsResponse> @ref _ns2__GetAudioOutputsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioOutputsResponse(struct soap*, struct _ns2__GetAudioOutputsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioOutputsResponse(struct soap*, struct _ns2__GetAudioOutputsResponse*);
    @endcode

  - <ns2:CreateProfile> @ref _ns2__CreateProfile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__CreateProfile(struct soap*, struct _ns2__CreateProfile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__CreateProfile(struct soap*, struct _ns2__CreateProfile*);
    @endcode

  - <ns2:CreateProfileResponse> @ref _ns2__CreateProfileResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__CreateProfileResponse(struct soap*, struct _ns2__CreateProfileResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__CreateProfileResponse(struct soap*, struct _ns2__CreateProfileResponse*);
    @endcode

  - <ns2:GetProfile> @ref _ns2__GetProfile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetProfile(struct soap*, struct _ns2__GetProfile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetProfile(struct soap*, struct _ns2__GetProfile*);
    @endcode

  - <ns2:GetProfileResponse> @ref _ns2__GetProfileResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetProfileResponse(struct soap*, struct _ns2__GetProfileResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetProfileResponse(struct soap*, struct _ns2__GetProfileResponse*);
    @endcode

  - <ns2:GetProfiles> @ref _ns2__GetProfiles
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetProfiles(struct soap*, struct _ns2__GetProfiles*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetProfiles(struct soap*, struct _ns2__GetProfiles*);
    @endcode

  - <ns2:GetProfilesResponse> @ref _ns2__GetProfilesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetProfilesResponse(struct soap*, struct _ns2__GetProfilesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetProfilesResponse(struct soap*, struct _ns2__GetProfilesResponse*);
    @endcode

  - <ns2:AddVideoEncoderConfiguration> @ref _ns2__AddVideoEncoderConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__AddVideoEncoderConfiguration(struct soap*, struct _ns2__AddVideoEncoderConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__AddVideoEncoderConfiguration(struct soap*, struct _ns2__AddVideoEncoderConfiguration*);
    @endcode

  - <ns2:AddVideoEncoderConfigurationResponse> @ref _ns2__AddVideoEncoderConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__AddVideoEncoderConfigurationResponse(struct soap*, struct _ns2__AddVideoEncoderConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__AddVideoEncoderConfigurationResponse(struct soap*, struct _ns2__AddVideoEncoderConfigurationResponse*);
    @endcode

  - <ns2:RemoveVideoEncoderConfiguration> @ref _ns2__RemoveVideoEncoderConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__RemoveVideoEncoderConfiguration(struct soap*, struct _ns2__RemoveVideoEncoderConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__RemoveVideoEncoderConfiguration(struct soap*, struct _ns2__RemoveVideoEncoderConfiguration*);
    @endcode

  - <ns2:RemoveVideoEncoderConfigurationResponse> @ref _ns2__RemoveVideoEncoderConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__RemoveVideoEncoderConfigurationResponse(struct soap*, struct _ns2__RemoveVideoEncoderConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__RemoveVideoEncoderConfigurationResponse(struct soap*, struct _ns2__RemoveVideoEncoderConfigurationResponse*);
    @endcode

  - <ns2:AddVideoSourceConfiguration> @ref _ns2__AddVideoSourceConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__AddVideoSourceConfiguration(struct soap*, struct _ns2__AddVideoSourceConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__AddVideoSourceConfiguration(struct soap*, struct _ns2__AddVideoSourceConfiguration*);
    @endcode

  - <ns2:AddVideoSourceConfigurationResponse> @ref _ns2__AddVideoSourceConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__AddVideoSourceConfigurationResponse(struct soap*, struct _ns2__AddVideoSourceConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__AddVideoSourceConfigurationResponse(struct soap*, struct _ns2__AddVideoSourceConfigurationResponse*);
    @endcode

  - <ns2:RemoveVideoSourceConfiguration> @ref _ns2__RemoveVideoSourceConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__RemoveVideoSourceConfiguration(struct soap*, struct _ns2__RemoveVideoSourceConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__RemoveVideoSourceConfiguration(struct soap*, struct _ns2__RemoveVideoSourceConfiguration*);
    @endcode

  - <ns2:RemoveVideoSourceConfigurationResponse> @ref _ns2__RemoveVideoSourceConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__RemoveVideoSourceConfigurationResponse(struct soap*, struct _ns2__RemoveVideoSourceConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__RemoveVideoSourceConfigurationResponse(struct soap*, struct _ns2__RemoveVideoSourceConfigurationResponse*);
    @endcode

  - <ns2:AddAudioEncoderConfiguration> @ref _ns2__AddAudioEncoderConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__AddAudioEncoderConfiguration(struct soap*, struct _ns2__AddAudioEncoderConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__AddAudioEncoderConfiguration(struct soap*, struct _ns2__AddAudioEncoderConfiguration*);
    @endcode

  - <ns2:AddAudioEncoderConfigurationResponse> @ref _ns2__AddAudioEncoderConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__AddAudioEncoderConfigurationResponse(struct soap*, struct _ns2__AddAudioEncoderConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__AddAudioEncoderConfigurationResponse(struct soap*, struct _ns2__AddAudioEncoderConfigurationResponse*);
    @endcode

  - <ns2:RemoveAudioEncoderConfiguration> @ref _ns2__RemoveAudioEncoderConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__RemoveAudioEncoderConfiguration(struct soap*, struct _ns2__RemoveAudioEncoderConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__RemoveAudioEncoderConfiguration(struct soap*, struct _ns2__RemoveAudioEncoderConfiguration*);
    @endcode

  - <ns2:RemoveAudioEncoderConfigurationResponse> @ref _ns2__RemoveAudioEncoderConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__RemoveAudioEncoderConfigurationResponse(struct soap*, struct _ns2__RemoveAudioEncoderConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__RemoveAudioEncoderConfigurationResponse(struct soap*, struct _ns2__RemoveAudioEncoderConfigurationResponse*);
    @endcode

  - <ns2:AddAudioSourceConfiguration> @ref _ns2__AddAudioSourceConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__AddAudioSourceConfiguration(struct soap*, struct _ns2__AddAudioSourceConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__AddAudioSourceConfiguration(struct soap*, struct _ns2__AddAudioSourceConfiguration*);
    @endcode

  - <ns2:AddAudioSourceConfigurationResponse> @ref _ns2__AddAudioSourceConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__AddAudioSourceConfigurationResponse(struct soap*, struct _ns2__AddAudioSourceConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__AddAudioSourceConfigurationResponse(struct soap*, struct _ns2__AddAudioSourceConfigurationResponse*);
    @endcode

  - <ns2:RemoveAudioSourceConfiguration> @ref _ns2__RemoveAudioSourceConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__RemoveAudioSourceConfiguration(struct soap*, struct _ns2__RemoveAudioSourceConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__RemoveAudioSourceConfiguration(struct soap*, struct _ns2__RemoveAudioSourceConfiguration*);
    @endcode

  - <ns2:RemoveAudioSourceConfigurationResponse> @ref _ns2__RemoveAudioSourceConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__RemoveAudioSourceConfigurationResponse(struct soap*, struct _ns2__RemoveAudioSourceConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__RemoveAudioSourceConfigurationResponse(struct soap*, struct _ns2__RemoveAudioSourceConfigurationResponse*);
    @endcode

  - <ns2:AddPTZConfiguration> @ref _ns2__AddPTZConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__AddPTZConfiguration(struct soap*, struct _ns2__AddPTZConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__AddPTZConfiguration(struct soap*, struct _ns2__AddPTZConfiguration*);
    @endcode

  - <ns2:AddPTZConfigurationResponse> @ref _ns2__AddPTZConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__AddPTZConfigurationResponse(struct soap*, struct _ns2__AddPTZConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__AddPTZConfigurationResponse(struct soap*, struct _ns2__AddPTZConfigurationResponse*);
    @endcode

  - <ns2:RemovePTZConfiguration> @ref _ns2__RemovePTZConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__RemovePTZConfiguration(struct soap*, struct _ns2__RemovePTZConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__RemovePTZConfiguration(struct soap*, struct _ns2__RemovePTZConfiguration*);
    @endcode

  - <ns2:RemovePTZConfigurationResponse> @ref _ns2__RemovePTZConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__RemovePTZConfigurationResponse(struct soap*, struct _ns2__RemovePTZConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__RemovePTZConfigurationResponse(struct soap*, struct _ns2__RemovePTZConfigurationResponse*);
    @endcode

  - <ns2:AddVideoAnalyticsConfiguration> @ref _ns2__AddVideoAnalyticsConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__AddVideoAnalyticsConfiguration(struct soap*, struct _ns2__AddVideoAnalyticsConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__AddVideoAnalyticsConfiguration(struct soap*, struct _ns2__AddVideoAnalyticsConfiguration*);
    @endcode

  - <ns2:AddVideoAnalyticsConfigurationResponse> @ref _ns2__AddVideoAnalyticsConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__AddVideoAnalyticsConfigurationResponse(struct soap*, struct _ns2__AddVideoAnalyticsConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__AddVideoAnalyticsConfigurationResponse(struct soap*, struct _ns2__AddVideoAnalyticsConfigurationResponse*);
    @endcode

  - <ns2:RemoveVideoAnalyticsConfiguration> @ref _ns2__RemoveVideoAnalyticsConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__RemoveVideoAnalyticsConfiguration(struct soap*, struct _ns2__RemoveVideoAnalyticsConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__RemoveVideoAnalyticsConfiguration(struct soap*, struct _ns2__RemoveVideoAnalyticsConfiguration*);
    @endcode

  - <ns2:RemoveVideoAnalyticsConfigurationResponse> @ref _ns2__RemoveVideoAnalyticsConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__RemoveVideoAnalyticsConfigurationResponse(struct soap*, struct _ns2__RemoveVideoAnalyticsConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__RemoveVideoAnalyticsConfigurationResponse(struct soap*, struct _ns2__RemoveVideoAnalyticsConfigurationResponse*);
    @endcode

  - <ns2:AddMetadataConfiguration> @ref _ns2__AddMetadataConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__AddMetadataConfiguration(struct soap*, struct _ns2__AddMetadataConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__AddMetadataConfiguration(struct soap*, struct _ns2__AddMetadataConfiguration*);
    @endcode

  - <ns2:AddMetadataConfigurationResponse> @ref _ns2__AddMetadataConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__AddMetadataConfigurationResponse(struct soap*, struct _ns2__AddMetadataConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__AddMetadataConfigurationResponse(struct soap*, struct _ns2__AddMetadataConfigurationResponse*);
    @endcode

  - <ns2:RemoveMetadataConfiguration> @ref _ns2__RemoveMetadataConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__RemoveMetadataConfiguration(struct soap*, struct _ns2__RemoveMetadataConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__RemoveMetadataConfiguration(struct soap*, struct _ns2__RemoveMetadataConfiguration*);
    @endcode

  - <ns2:RemoveMetadataConfigurationResponse> @ref _ns2__RemoveMetadataConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__RemoveMetadataConfigurationResponse(struct soap*, struct _ns2__RemoveMetadataConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__RemoveMetadataConfigurationResponse(struct soap*, struct _ns2__RemoveMetadataConfigurationResponse*);
    @endcode

  - <ns2:AddAudioOutputConfiguration> @ref _ns2__AddAudioOutputConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__AddAudioOutputConfiguration(struct soap*, struct _ns2__AddAudioOutputConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__AddAudioOutputConfiguration(struct soap*, struct _ns2__AddAudioOutputConfiguration*);
    @endcode

  - <ns2:AddAudioOutputConfigurationResponse> @ref _ns2__AddAudioOutputConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__AddAudioOutputConfigurationResponse(struct soap*, struct _ns2__AddAudioOutputConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__AddAudioOutputConfigurationResponse(struct soap*, struct _ns2__AddAudioOutputConfigurationResponse*);
    @endcode

  - <ns2:RemoveAudioOutputConfiguration> @ref _ns2__RemoveAudioOutputConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__RemoveAudioOutputConfiguration(struct soap*, struct _ns2__RemoveAudioOutputConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__RemoveAudioOutputConfiguration(struct soap*, struct _ns2__RemoveAudioOutputConfiguration*);
    @endcode

  - <ns2:RemoveAudioOutputConfigurationResponse> @ref _ns2__RemoveAudioOutputConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__RemoveAudioOutputConfigurationResponse(struct soap*, struct _ns2__RemoveAudioOutputConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__RemoveAudioOutputConfigurationResponse(struct soap*, struct _ns2__RemoveAudioOutputConfigurationResponse*);
    @endcode

  - <ns2:AddAudioDecoderConfiguration> @ref _ns2__AddAudioDecoderConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__AddAudioDecoderConfiguration(struct soap*, struct _ns2__AddAudioDecoderConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__AddAudioDecoderConfiguration(struct soap*, struct _ns2__AddAudioDecoderConfiguration*);
    @endcode

  - <ns2:AddAudioDecoderConfigurationResponse> @ref _ns2__AddAudioDecoderConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__AddAudioDecoderConfigurationResponse(struct soap*, struct _ns2__AddAudioDecoderConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__AddAudioDecoderConfigurationResponse(struct soap*, struct _ns2__AddAudioDecoderConfigurationResponse*);
    @endcode

  - <ns2:RemoveAudioDecoderConfiguration> @ref _ns2__RemoveAudioDecoderConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__RemoveAudioDecoderConfiguration(struct soap*, struct _ns2__RemoveAudioDecoderConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__RemoveAudioDecoderConfiguration(struct soap*, struct _ns2__RemoveAudioDecoderConfiguration*);
    @endcode

  - <ns2:RemoveAudioDecoderConfigurationResponse> @ref _ns2__RemoveAudioDecoderConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__RemoveAudioDecoderConfigurationResponse(struct soap*, struct _ns2__RemoveAudioDecoderConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__RemoveAudioDecoderConfigurationResponse(struct soap*, struct _ns2__RemoveAudioDecoderConfigurationResponse*);
    @endcode

  - <ns2:DeleteProfile> @ref _ns2__DeleteProfile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__DeleteProfile(struct soap*, struct _ns2__DeleteProfile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__DeleteProfile(struct soap*, struct _ns2__DeleteProfile*);
    @endcode

  - <ns2:DeleteProfileResponse> @ref _ns2__DeleteProfileResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__DeleteProfileResponse(struct soap*, struct _ns2__DeleteProfileResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__DeleteProfileResponse(struct soap*, struct _ns2__DeleteProfileResponse*);
    @endcode

  - <ns2:GetVideoEncoderConfigurations> @ref _ns2__GetVideoEncoderConfigurations
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetVideoEncoderConfigurations(struct soap*, struct _ns2__GetVideoEncoderConfigurations*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetVideoEncoderConfigurations(struct soap*, struct _ns2__GetVideoEncoderConfigurations*);
    @endcode

  - <ns2:GetVideoEncoderConfigurationsResponse> @ref _ns2__GetVideoEncoderConfigurationsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetVideoEncoderConfigurationsResponse(struct soap*, struct _ns2__GetVideoEncoderConfigurationsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetVideoEncoderConfigurationsResponse(struct soap*, struct _ns2__GetVideoEncoderConfigurationsResponse*);
    @endcode

  - <ns2:GetVideoSourceConfigurations> @ref _ns2__GetVideoSourceConfigurations
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetVideoSourceConfigurations(struct soap*, struct _ns2__GetVideoSourceConfigurations*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetVideoSourceConfigurations(struct soap*, struct _ns2__GetVideoSourceConfigurations*);
    @endcode

  - <ns2:GetVideoSourceConfigurationsResponse> @ref _ns2__GetVideoSourceConfigurationsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetVideoSourceConfigurationsResponse(struct soap*, struct _ns2__GetVideoSourceConfigurationsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetVideoSourceConfigurationsResponse(struct soap*, struct _ns2__GetVideoSourceConfigurationsResponse*);
    @endcode

  - <ns2:GetAudioEncoderConfigurations> @ref _ns2__GetAudioEncoderConfigurations
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioEncoderConfigurations(struct soap*, struct _ns2__GetAudioEncoderConfigurations*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioEncoderConfigurations(struct soap*, struct _ns2__GetAudioEncoderConfigurations*);
    @endcode

  - <ns2:GetAudioEncoderConfigurationsResponse> @ref _ns2__GetAudioEncoderConfigurationsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioEncoderConfigurationsResponse(struct soap*, struct _ns2__GetAudioEncoderConfigurationsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioEncoderConfigurationsResponse(struct soap*, struct _ns2__GetAudioEncoderConfigurationsResponse*);
    @endcode

  - <ns2:GetAudioSourceConfigurations> @ref _ns2__GetAudioSourceConfigurations
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioSourceConfigurations(struct soap*, struct _ns2__GetAudioSourceConfigurations*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioSourceConfigurations(struct soap*, struct _ns2__GetAudioSourceConfigurations*);
    @endcode

  - <ns2:GetAudioSourceConfigurationsResponse> @ref _ns2__GetAudioSourceConfigurationsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioSourceConfigurationsResponse(struct soap*, struct _ns2__GetAudioSourceConfigurationsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioSourceConfigurationsResponse(struct soap*, struct _ns2__GetAudioSourceConfigurationsResponse*);
    @endcode

  - <ns2:GetVideoAnalyticsConfigurations> @ref _ns2__GetVideoAnalyticsConfigurations
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetVideoAnalyticsConfigurations(struct soap*, struct _ns2__GetVideoAnalyticsConfigurations*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetVideoAnalyticsConfigurations(struct soap*, struct _ns2__GetVideoAnalyticsConfigurations*);
    @endcode

  - <ns2:GetVideoAnalyticsConfigurationsResponse> @ref _ns2__GetVideoAnalyticsConfigurationsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetVideoAnalyticsConfigurationsResponse(struct soap*, struct _ns2__GetVideoAnalyticsConfigurationsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetVideoAnalyticsConfigurationsResponse(struct soap*, struct _ns2__GetVideoAnalyticsConfigurationsResponse*);
    @endcode

  - <ns2:GetMetadataConfigurations> @ref _ns2__GetMetadataConfigurations
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetMetadataConfigurations(struct soap*, struct _ns2__GetMetadataConfigurations*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetMetadataConfigurations(struct soap*, struct _ns2__GetMetadataConfigurations*);
    @endcode

  - <ns2:GetMetadataConfigurationsResponse> @ref _ns2__GetMetadataConfigurationsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetMetadataConfigurationsResponse(struct soap*, struct _ns2__GetMetadataConfigurationsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetMetadataConfigurationsResponse(struct soap*, struct _ns2__GetMetadataConfigurationsResponse*);
    @endcode

  - <ns2:GetAudioOutputConfigurations> @ref _ns2__GetAudioOutputConfigurations
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioOutputConfigurations(struct soap*, struct _ns2__GetAudioOutputConfigurations*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioOutputConfigurations(struct soap*, struct _ns2__GetAudioOutputConfigurations*);
    @endcode

  - <ns2:GetAudioOutputConfigurationsResponse> @ref _ns2__GetAudioOutputConfigurationsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioOutputConfigurationsResponse(struct soap*, struct _ns2__GetAudioOutputConfigurationsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioOutputConfigurationsResponse(struct soap*, struct _ns2__GetAudioOutputConfigurationsResponse*);
    @endcode

  - <ns2:GetAudioDecoderConfigurations> @ref _ns2__GetAudioDecoderConfigurations
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioDecoderConfigurations(struct soap*, struct _ns2__GetAudioDecoderConfigurations*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioDecoderConfigurations(struct soap*, struct _ns2__GetAudioDecoderConfigurations*);
    @endcode

  - <ns2:GetAudioDecoderConfigurationsResponse> @ref _ns2__GetAudioDecoderConfigurationsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioDecoderConfigurationsResponse(struct soap*, struct _ns2__GetAudioDecoderConfigurationsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioDecoderConfigurationsResponse(struct soap*, struct _ns2__GetAudioDecoderConfigurationsResponse*);
    @endcode

  - <ns2:GetVideoSourceConfiguration> @ref _ns2__GetVideoSourceConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetVideoSourceConfiguration(struct soap*, struct _ns2__GetVideoSourceConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetVideoSourceConfiguration(struct soap*, struct _ns2__GetVideoSourceConfiguration*);
    @endcode

  - <ns2:GetVideoSourceConfigurationResponse> @ref _ns2__GetVideoSourceConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetVideoSourceConfigurationResponse(struct soap*, struct _ns2__GetVideoSourceConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetVideoSourceConfigurationResponse(struct soap*, struct _ns2__GetVideoSourceConfigurationResponse*);
    @endcode

  - <ns2:GetVideoEncoderConfiguration> @ref _ns2__GetVideoEncoderConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetVideoEncoderConfiguration(struct soap*, struct _ns2__GetVideoEncoderConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetVideoEncoderConfiguration(struct soap*, struct _ns2__GetVideoEncoderConfiguration*);
    @endcode

  - <ns2:GetVideoEncoderConfigurationResponse> @ref _ns2__GetVideoEncoderConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetVideoEncoderConfigurationResponse(struct soap*, struct _ns2__GetVideoEncoderConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetVideoEncoderConfigurationResponse(struct soap*, struct _ns2__GetVideoEncoderConfigurationResponse*);
    @endcode

  - <ns2:GetAudioSourceConfiguration> @ref _ns2__GetAudioSourceConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioSourceConfiguration(struct soap*, struct _ns2__GetAudioSourceConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioSourceConfiguration(struct soap*, struct _ns2__GetAudioSourceConfiguration*);
    @endcode

  - <ns2:GetAudioSourceConfigurationResponse> @ref _ns2__GetAudioSourceConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioSourceConfigurationResponse(struct soap*, struct _ns2__GetAudioSourceConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioSourceConfigurationResponse(struct soap*, struct _ns2__GetAudioSourceConfigurationResponse*);
    @endcode

  - <ns2:GetAudioEncoderConfiguration> @ref _ns2__GetAudioEncoderConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioEncoderConfiguration(struct soap*, struct _ns2__GetAudioEncoderConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioEncoderConfiguration(struct soap*, struct _ns2__GetAudioEncoderConfiguration*);
    @endcode

  - <ns2:GetAudioEncoderConfigurationResponse> @ref _ns2__GetAudioEncoderConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioEncoderConfigurationResponse(struct soap*, struct _ns2__GetAudioEncoderConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioEncoderConfigurationResponse(struct soap*, struct _ns2__GetAudioEncoderConfigurationResponse*);
    @endcode

  - <ns2:GetVideoAnalyticsConfiguration> @ref _ns2__GetVideoAnalyticsConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetVideoAnalyticsConfiguration(struct soap*, struct _ns2__GetVideoAnalyticsConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetVideoAnalyticsConfiguration(struct soap*, struct _ns2__GetVideoAnalyticsConfiguration*);
    @endcode

  - <ns2:GetVideoAnalyticsConfigurationResponse> @ref _ns2__GetVideoAnalyticsConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetVideoAnalyticsConfigurationResponse(struct soap*, struct _ns2__GetVideoAnalyticsConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetVideoAnalyticsConfigurationResponse(struct soap*, struct _ns2__GetVideoAnalyticsConfigurationResponse*);
    @endcode

  - <ns2:GetMetadataConfiguration> @ref _ns2__GetMetadataConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetMetadataConfiguration(struct soap*, struct _ns2__GetMetadataConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetMetadataConfiguration(struct soap*, struct _ns2__GetMetadataConfiguration*);
    @endcode

  - <ns2:GetMetadataConfigurationResponse> @ref _ns2__GetMetadataConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetMetadataConfigurationResponse(struct soap*, struct _ns2__GetMetadataConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetMetadataConfigurationResponse(struct soap*, struct _ns2__GetMetadataConfigurationResponse*);
    @endcode

  - <ns2:GetAudioOutputConfiguration> @ref _ns2__GetAudioOutputConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioOutputConfiguration(struct soap*, struct _ns2__GetAudioOutputConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioOutputConfiguration(struct soap*, struct _ns2__GetAudioOutputConfiguration*);
    @endcode

  - <ns2:GetAudioOutputConfigurationResponse> @ref _ns2__GetAudioOutputConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioOutputConfigurationResponse(struct soap*, struct _ns2__GetAudioOutputConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioOutputConfigurationResponse(struct soap*, struct _ns2__GetAudioOutputConfigurationResponse*);
    @endcode

  - <ns2:GetAudioDecoderConfiguration> @ref _ns2__GetAudioDecoderConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioDecoderConfiguration(struct soap*, struct _ns2__GetAudioDecoderConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioDecoderConfiguration(struct soap*, struct _ns2__GetAudioDecoderConfiguration*);
    @endcode

  - <ns2:GetAudioDecoderConfigurationResponse> @ref _ns2__GetAudioDecoderConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioDecoderConfigurationResponse(struct soap*, struct _ns2__GetAudioDecoderConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioDecoderConfigurationResponse(struct soap*, struct _ns2__GetAudioDecoderConfigurationResponse*);
    @endcode

  - <ns2:GetCompatibleVideoEncoderConfigurations> @ref _ns2__GetCompatibleVideoEncoderConfigurations
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetCompatibleVideoEncoderConfigurations(struct soap*, struct _ns2__GetCompatibleVideoEncoderConfigurations*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetCompatibleVideoEncoderConfigurations(struct soap*, struct _ns2__GetCompatibleVideoEncoderConfigurations*);
    @endcode

  - <ns2:GetCompatibleVideoEncoderConfigurationsResponse> @ref _ns2__GetCompatibleVideoEncoderConfigurationsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetCompatibleVideoEncoderConfigurationsResponse(struct soap*, struct _ns2__GetCompatibleVideoEncoderConfigurationsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetCompatibleVideoEncoderConfigurationsResponse(struct soap*, struct _ns2__GetCompatibleVideoEncoderConfigurationsResponse*);
    @endcode

  - <ns2:GetCompatibleVideoSourceConfigurations> @ref _ns2__GetCompatibleVideoSourceConfigurations
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetCompatibleVideoSourceConfigurations(struct soap*, struct _ns2__GetCompatibleVideoSourceConfigurations*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetCompatibleVideoSourceConfigurations(struct soap*, struct _ns2__GetCompatibleVideoSourceConfigurations*);
    @endcode

  - <ns2:GetCompatibleVideoSourceConfigurationsResponse> @ref _ns2__GetCompatibleVideoSourceConfigurationsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetCompatibleVideoSourceConfigurationsResponse(struct soap*, struct _ns2__GetCompatibleVideoSourceConfigurationsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetCompatibleVideoSourceConfigurationsResponse(struct soap*, struct _ns2__GetCompatibleVideoSourceConfigurationsResponse*);
    @endcode

  - <ns2:GetCompatibleAudioEncoderConfigurations> @ref _ns2__GetCompatibleAudioEncoderConfigurations
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetCompatibleAudioEncoderConfigurations(struct soap*, struct _ns2__GetCompatibleAudioEncoderConfigurations*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetCompatibleAudioEncoderConfigurations(struct soap*, struct _ns2__GetCompatibleAudioEncoderConfigurations*);
    @endcode

  - <ns2:GetCompatibleAudioEncoderConfigurationsResponse> @ref _ns2__GetCompatibleAudioEncoderConfigurationsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetCompatibleAudioEncoderConfigurationsResponse(struct soap*, struct _ns2__GetCompatibleAudioEncoderConfigurationsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetCompatibleAudioEncoderConfigurationsResponse(struct soap*, struct _ns2__GetCompatibleAudioEncoderConfigurationsResponse*);
    @endcode

  - <ns2:GetCompatibleAudioSourceConfigurations> @ref _ns2__GetCompatibleAudioSourceConfigurations
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetCompatibleAudioSourceConfigurations(struct soap*, struct _ns2__GetCompatibleAudioSourceConfigurations*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetCompatibleAudioSourceConfigurations(struct soap*, struct _ns2__GetCompatibleAudioSourceConfigurations*);
    @endcode

  - <ns2:GetCompatibleAudioSourceConfigurationsResponse> @ref _ns2__GetCompatibleAudioSourceConfigurationsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetCompatibleAudioSourceConfigurationsResponse(struct soap*, struct _ns2__GetCompatibleAudioSourceConfigurationsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetCompatibleAudioSourceConfigurationsResponse(struct soap*, struct _ns2__GetCompatibleAudioSourceConfigurationsResponse*);
    @endcode

  - <ns2:GetCompatibleVideoAnalyticsConfigurations> @ref _ns2__GetCompatibleVideoAnalyticsConfigurations
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetCompatibleVideoAnalyticsConfigurations(struct soap*, struct _ns2__GetCompatibleVideoAnalyticsConfigurations*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetCompatibleVideoAnalyticsConfigurations(struct soap*, struct _ns2__GetCompatibleVideoAnalyticsConfigurations*);
    @endcode

  - <ns2:GetCompatibleVideoAnalyticsConfigurationsResponse> @ref _ns2__GetCompatibleVideoAnalyticsConfigurationsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap*, struct _ns2__GetCompatibleVideoAnalyticsConfigurationsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap*, struct _ns2__GetCompatibleVideoAnalyticsConfigurationsResponse*);
    @endcode

  - <ns2:GetCompatibleMetadataConfigurations> @ref _ns2__GetCompatibleMetadataConfigurations
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetCompatibleMetadataConfigurations(struct soap*, struct _ns2__GetCompatibleMetadataConfigurations*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetCompatibleMetadataConfigurations(struct soap*, struct _ns2__GetCompatibleMetadataConfigurations*);
    @endcode

  - <ns2:GetCompatibleMetadataConfigurationsResponse> @ref _ns2__GetCompatibleMetadataConfigurationsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetCompatibleMetadataConfigurationsResponse(struct soap*, struct _ns2__GetCompatibleMetadataConfigurationsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetCompatibleMetadataConfigurationsResponse(struct soap*, struct _ns2__GetCompatibleMetadataConfigurationsResponse*);
    @endcode

  - <ns2:GetCompatibleAudioOutputConfigurations> @ref _ns2__GetCompatibleAudioOutputConfigurations
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetCompatibleAudioOutputConfigurations(struct soap*, struct _ns2__GetCompatibleAudioOutputConfigurations*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetCompatibleAudioOutputConfigurations(struct soap*, struct _ns2__GetCompatibleAudioOutputConfigurations*);
    @endcode

  - <ns2:GetCompatibleAudioOutputConfigurationsResponse> @ref _ns2__GetCompatibleAudioOutputConfigurationsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetCompatibleAudioOutputConfigurationsResponse(struct soap*, struct _ns2__GetCompatibleAudioOutputConfigurationsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetCompatibleAudioOutputConfigurationsResponse(struct soap*, struct _ns2__GetCompatibleAudioOutputConfigurationsResponse*);
    @endcode

  - <ns2:GetCompatibleAudioDecoderConfigurations> @ref _ns2__GetCompatibleAudioDecoderConfigurations
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetCompatibleAudioDecoderConfigurations(struct soap*, struct _ns2__GetCompatibleAudioDecoderConfigurations*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetCompatibleAudioDecoderConfigurations(struct soap*, struct _ns2__GetCompatibleAudioDecoderConfigurations*);
    @endcode

  - <ns2:GetCompatibleAudioDecoderConfigurationsResponse> @ref _ns2__GetCompatibleAudioDecoderConfigurationsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetCompatibleAudioDecoderConfigurationsResponse(struct soap*, struct _ns2__GetCompatibleAudioDecoderConfigurationsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetCompatibleAudioDecoderConfigurationsResponse(struct soap*, struct _ns2__GetCompatibleAudioDecoderConfigurationsResponse*);
    @endcode

  - <ns2:SetVideoEncoderConfiguration> @ref _ns2__SetVideoEncoderConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__SetVideoEncoderConfiguration(struct soap*, struct _ns2__SetVideoEncoderConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__SetVideoEncoderConfiguration(struct soap*, struct _ns2__SetVideoEncoderConfiguration*);
    @endcode

  - <ns2:SetVideoEncoderConfigurationResponse> @ref _ns2__SetVideoEncoderConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__SetVideoEncoderConfigurationResponse(struct soap*, struct _ns2__SetVideoEncoderConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__SetVideoEncoderConfigurationResponse(struct soap*, struct _ns2__SetVideoEncoderConfigurationResponse*);
    @endcode

  - <ns2:SetVideoSourceConfiguration> @ref _ns2__SetVideoSourceConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__SetVideoSourceConfiguration(struct soap*, struct _ns2__SetVideoSourceConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__SetVideoSourceConfiguration(struct soap*, struct _ns2__SetVideoSourceConfiguration*);
    @endcode

  - <ns2:SetVideoSourceConfigurationResponse> @ref _ns2__SetVideoSourceConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__SetVideoSourceConfigurationResponse(struct soap*, struct _ns2__SetVideoSourceConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__SetVideoSourceConfigurationResponse(struct soap*, struct _ns2__SetVideoSourceConfigurationResponse*);
    @endcode

  - <ns2:SetAudioEncoderConfiguration> @ref _ns2__SetAudioEncoderConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__SetAudioEncoderConfiguration(struct soap*, struct _ns2__SetAudioEncoderConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__SetAudioEncoderConfiguration(struct soap*, struct _ns2__SetAudioEncoderConfiguration*);
    @endcode

  - <ns2:SetAudioEncoderConfigurationResponse> @ref _ns2__SetAudioEncoderConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__SetAudioEncoderConfigurationResponse(struct soap*, struct _ns2__SetAudioEncoderConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__SetAudioEncoderConfigurationResponse(struct soap*, struct _ns2__SetAudioEncoderConfigurationResponse*);
    @endcode

  - <ns2:SetAudioSourceConfiguration> @ref _ns2__SetAudioSourceConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__SetAudioSourceConfiguration(struct soap*, struct _ns2__SetAudioSourceConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__SetAudioSourceConfiguration(struct soap*, struct _ns2__SetAudioSourceConfiguration*);
    @endcode

  - <ns2:SetAudioSourceConfigurationResponse> @ref _ns2__SetAudioSourceConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__SetAudioSourceConfigurationResponse(struct soap*, struct _ns2__SetAudioSourceConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__SetAudioSourceConfigurationResponse(struct soap*, struct _ns2__SetAudioSourceConfigurationResponse*);
    @endcode

  - <ns2:SetVideoAnalyticsConfiguration> @ref _ns2__SetVideoAnalyticsConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__SetVideoAnalyticsConfiguration(struct soap*, struct _ns2__SetVideoAnalyticsConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__SetVideoAnalyticsConfiguration(struct soap*, struct _ns2__SetVideoAnalyticsConfiguration*);
    @endcode

  - <ns2:SetVideoAnalyticsConfigurationResponse> @ref _ns2__SetVideoAnalyticsConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__SetVideoAnalyticsConfigurationResponse(struct soap*, struct _ns2__SetVideoAnalyticsConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__SetVideoAnalyticsConfigurationResponse(struct soap*, struct _ns2__SetVideoAnalyticsConfigurationResponse*);
    @endcode

  - <ns2:SetMetadataConfiguration> @ref _ns2__SetMetadataConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__SetMetadataConfiguration(struct soap*, struct _ns2__SetMetadataConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__SetMetadataConfiguration(struct soap*, struct _ns2__SetMetadataConfiguration*);
    @endcode

  - <ns2:SetMetadataConfigurationResponse> @ref _ns2__SetMetadataConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__SetMetadataConfigurationResponse(struct soap*, struct _ns2__SetMetadataConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__SetMetadataConfigurationResponse(struct soap*, struct _ns2__SetMetadataConfigurationResponse*);
    @endcode

  - <ns2:SetAudioOutputConfiguration> @ref _ns2__SetAudioOutputConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__SetAudioOutputConfiguration(struct soap*, struct _ns2__SetAudioOutputConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__SetAudioOutputConfiguration(struct soap*, struct _ns2__SetAudioOutputConfiguration*);
    @endcode

  - <ns2:SetAudioOutputConfigurationResponse> @ref _ns2__SetAudioOutputConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__SetAudioOutputConfigurationResponse(struct soap*, struct _ns2__SetAudioOutputConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__SetAudioOutputConfigurationResponse(struct soap*, struct _ns2__SetAudioOutputConfigurationResponse*);
    @endcode

  - <ns2:SetAudioDecoderConfiguration> @ref _ns2__SetAudioDecoderConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__SetAudioDecoderConfiguration(struct soap*, struct _ns2__SetAudioDecoderConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__SetAudioDecoderConfiguration(struct soap*, struct _ns2__SetAudioDecoderConfiguration*);
    @endcode

  - <ns2:SetAudioDecoderConfigurationResponse> @ref _ns2__SetAudioDecoderConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__SetAudioDecoderConfigurationResponse(struct soap*, struct _ns2__SetAudioDecoderConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__SetAudioDecoderConfigurationResponse(struct soap*, struct _ns2__SetAudioDecoderConfigurationResponse*);
    @endcode

  - <ns2:GetVideoSourceConfigurationOptions> @ref _ns2__GetVideoSourceConfigurationOptions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetVideoSourceConfigurationOptions(struct soap*, struct _ns2__GetVideoSourceConfigurationOptions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetVideoSourceConfigurationOptions(struct soap*, struct _ns2__GetVideoSourceConfigurationOptions*);
    @endcode

  - <ns2:GetVideoSourceConfigurationOptionsResponse> @ref _ns2__GetVideoSourceConfigurationOptionsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetVideoSourceConfigurationOptionsResponse(struct soap*, struct _ns2__GetVideoSourceConfigurationOptionsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetVideoSourceConfigurationOptionsResponse(struct soap*, struct _ns2__GetVideoSourceConfigurationOptionsResponse*);
    @endcode

  - <ns2:GetVideoEncoderConfigurationOptions> @ref _ns2__GetVideoEncoderConfigurationOptions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetVideoEncoderConfigurationOptions(struct soap*, struct _ns2__GetVideoEncoderConfigurationOptions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetVideoEncoderConfigurationOptions(struct soap*, struct _ns2__GetVideoEncoderConfigurationOptions*);
    @endcode

  - <ns2:GetVideoEncoderConfigurationOptionsResponse> @ref _ns2__GetVideoEncoderConfigurationOptionsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetVideoEncoderConfigurationOptionsResponse(struct soap*, struct _ns2__GetVideoEncoderConfigurationOptionsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetVideoEncoderConfigurationOptionsResponse(struct soap*, struct _ns2__GetVideoEncoderConfigurationOptionsResponse*);
    @endcode

  - <ns2:GetAudioSourceConfigurationOptions> @ref _ns2__GetAudioSourceConfigurationOptions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioSourceConfigurationOptions(struct soap*, struct _ns2__GetAudioSourceConfigurationOptions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioSourceConfigurationOptions(struct soap*, struct _ns2__GetAudioSourceConfigurationOptions*);
    @endcode

  - <ns2:GetAudioSourceConfigurationOptionsResponse> @ref _ns2__GetAudioSourceConfigurationOptionsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioSourceConfigurationOptionsResponse(struct soap*, struct _ns2__GetAudioSourceConfigurationOptionsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioSourceConfigurationOptionsResponse(struct soap*, struct _ns2__GetAudioSourceConfigurationOptionsResponse*);
    @endcode

  - <ns2:GetAudioEncoderConfigurationOptions> @ref _ns2__GetAudioEncoderConfigurationOptions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioEncoderConfigurationOptions(struct soap*, struct _ns2__GetAudioEncoderConfigurationOptions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioEncoderConfigurationOptions(struct soap*, struct _ns2__GetAudioEncoderConfigurationOptions*);
    @endcode

  - <ns2:GetAudioEncoderConfigurationOptionsResponse> @ref _ns2__GetAudioEncoderConfigurationOptionsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioEncoderConfigurationOptionsResponse(struct soap*, struct _ns2__GetAudioEncoderConfigurationOptionsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioEncoderConfigurationOptionsResponse(struct soap*, struct _ns2__GetAudioEncoderConfigurationOptionsResponse*);
    @endcode

  - <ns2:GetMetadataConfigurationOptions> @ref _ns2__GetMetadataConfigurationOptions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetMetadataConfigurationOptions(struct soap*, struct _ns2__GetMetadataConfigurationOptions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetMetadataConfigurationOptions(struct soap*, struct _ns2__GetMetadataConfigurationOptions*);
    @endcode

  - <ns2:GetMetadataConfigurationOptionsResponse> @ref _ns2__GetMetadataConfigurationOptionsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetMetadataConfigurationOptionsResponse(struct soap*, struct _ns2__GetMetadataConfigurationOptionsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetMetadataConfigurationOptionsResponse(struct soap*, struct _ns2__GetMetadataConfigurationOptionsResponse*);
    @endcode

  - <ns2:GetAudioOutputConfigurationOptions> @ref _ns2__GetAudioOutputConfigurationOptions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioOutputConfigurationOptions(struct soap*, struct _ns2__GetAudioOutputConfigurationOptions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioOutputConfigurationOptions(struct soap*, struct _ns2__GetAudioOutputConfigurationOptions*);
    @endcode

  - <ns2:GetAudioOutputConfigurationOptionsResponse> @ref _ns2__GetAudioOutputConfigurationOptionsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioOutputConfigurationOptionsResponse(struct soap*, struct _ns2__GetAudioOutputConfigurationOptionsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioOutputConfigurationOptionsResponse(struct soap*, struct _ns2__GetAudioOutputConfigurationOptionsResponse*);
    @endcode

  - <ns2:GetAudioDecoderConfigurationOptions> @ref _ns2__GetAudioDecoderConfigurationOptions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioDecoderConfigurationOptions(struct soap*, struct _ns2__GetAudioDecoderConfigurationOptions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioDecoderConfigurationOptions(struct soap*, struct _ns2__GetAudioDecoderConfigurationOptions*);
    @endcode

  - <ns2:GetAudioDecoderConfigurationOptionsResponse> @ref _ns2__GetAudioDecoderConfigurationOptionsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetAudioDecoderConfigurationOptionsResponse(struct soap*, struct _ns2__GetAudioDecoderConfigurationOptionsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetAudioDecoderConfigurationOptionsResponse(struct soap*, struct _ns2__GetAudioDecoderConfigurationOptionsResponse*);
    @endcode

  - <ns2:GetGuaranteedNumberOfVideoEncoderInstances> @ref _ns2__GetGuaranteedNumberOfVideoEncoderInstances
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, struct _ns2__GetGuaranteedNumberOfVideoEncoderInstances*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, struct _ns2__GetGuaranteedNumberOfVideoEncoderInstances*);
    @endcode

  - <ns2:GetGuaranteedNumberOfVideoEncoderInstancesResponse> @ref _ns2__GetGuaranteedNumberOfVideoEncoderInstancesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap*, struct _ns2__GetGuaranteedNumberOfVideoEncoderInstancesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap*, struct _ns2__GetGuaranteedNumberOfVideoEncoderInstancesResponse*);
    @endcode

  - <ns2:GetStreamUri> @ref _ns2__GetStreamUri
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetStreamUri(struct soap*, struct _ns2__GetStreamUri*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetStreamUri(struct soap*, struct _ns2__GetStreamUri*);
    @endcode

  - <ns2:GetStreamUriResponse> @ref _ns2__GetStreamUriResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetStreamUriResponse(struct soap*, struct _ns2__GetStreamUriResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetStreamUriResponse(struct soap*, struct _ns2__GetStreamUriResponse*);
    @endcode

  - <ns2:StartMulticastStreaming> @ref _ns2__StartMulticastStreaming
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__StartMulticastStreaming(struct soap*, struct _ns2__StartMulticastStreaming*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__StartMulticastStreaming(struct soap*, struct _ns2__StartMulticastStreaming*);
    @endcode

  - <ns2:StartMulticastStreamingResponse> @ref _ns2__StartMulticastStreamingResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__StartMulticastStreamingResponse(struct soap*, struct _ns2__StartMulticastStreamingResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__StartMulticastStreamingResponse(struct soap*, struct _ns2__StartMulticastStreamingResponse*);
    @endcode

  - <ns2:StopMulticastStreaming> @ref _ns2__StopMulticastStreaming
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__StopMulticastStreaming(struct soap*, struct _ns2__StopMulticastStreaming*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__StopMulticastStreaming(struct soap*, struct _ns2__StopMulticastStreaming*);
    @endcode

  - <ns2:StopMulticastStreamingResponse> @ref _ns2__StopMulticastStreamingResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__StopMulticastStreamingResponse(struct soap*, struct _ns2__StopMulticastStreamingResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__StopMulticastStreamingResponse(struct soap*, struct _ns2__StopMulticastStreamingResponse*);
    @endcode

  - <ns2:SetSynchronizationPoint> @ref _ns2__SetSynchronizationPoint
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__SetSynchronizationPoint(struct soap*, struct _ns2__SetSynchronizationPoint*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__SetSynchronizationPoint(struct soap*, struct _ns2__SetSynchronizationPoint*);
    @endcode

  - <ns2:SetSynchronizationPointResponse> @ref _ns2__SetSynchronizationPointResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__SetSynchronizationPointResponse(struct soap*, struct _ns2__SetSynchronizationPointResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__SetSynchronizationPointResponse(struct soap*, struct _ns2__SetSynchronizationPointResponse*);
    @endcode

  - <ns2:GetSnapshotUri> @ref _ns2__GetSnapshotUri
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetSnapshotUri(struct soap*, struct _ns2__GetSnapshotUri*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetSnapshotUri(struct soap*, struct _ns2__GetSnapshotUri*);
    @endcode

  - <ns2:GetSnapshotUriResponse> @ref _ns2__GetSnapshotUriResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetSnapshotUriResponse(struct soap*, struct _ns2__GetSnapshotUriResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetSnapshotUriResponse(struct soap*, struct _ns2__GetSnapshotUriResponse*);
    @endcode

@section ns3 Top-level root elements of schema "http://www.onvif.org/ver10/schema"

  - <ns3:VideoSourceConfiguration> (use wsdl2h option -g to auto-generate)

  - <ns3:AudioSourceConfiguration> (use wsdl2h option -g to auto-generate)

  - <ns3:VideoEncoderConfiguration> (use wsdl2h option -g to auto-generate)

  - <ns3:AudioEncoderConfiguration> (use wsdl2h option -g to auto-generate)

  - <ns3:VideoAnalyticsConfiguration> (use wsdl2h option -g to auto-generate)

  - <ns3:PTZConfiguration> (use wsdl2h option -g to auto-generate)

  - <ns3:MetadataConfiguration> (use wsdl2h option -g to auto-generate)

  - <ns3:AudioOutputConfiguration> (use wsdl2h option -g to auto-generate)

  - <ns3:AudioDecoderConfiguration> (use wsdl2h option -g to auto-generate)

  - <ns3:Message> @ref _ns3__Message
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__Message(struct soap*, struct _ns3__Message*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__Message(struct soap*, struct _ns3__Message*);
    @endcode

  - <ns3:Polygon> (use wsdl2h option -g to auto-generate)

  - <ns3:Polyline> (use wsdl2h option -g to auto-generate)

  - <ns3:MetadataStream> (use wsdl2h option -g to auto-generate)

@section ns4 Top-level root elements of schema "http://docs.oasis-open.org/wsn/b-2"

  - <ns4:TopicExpression> (use wsdl2h option -g to auto-generate)

  - <ns4:FixedTopicSet> (use wsdl2h option -g to auto-generate)

  - <ns4:TopicExpressionDialect> (use wsdl2h option -g to auto-generate)

  - <ns4:NotificationProducerRP> @ref _ns4__NotificationProducerRP
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__NotificationProducerRP(struct soap*, struct _ns4__NotificationProducerRP*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__NotificationProducerRP(struct soap*, struct _ns4__NotificationProducerRP*);
    @endcode

  - <ns4:ConsumerReference> (use wsdl2h option -g to auto-generate)

  - <ns4:Filter> (use wsdl2h option -g to auto-generate)

  - <ns4:SubscriptionPolicy> (use wsdl2h option -g to auto-generate)

  - <ns4:CreationTime> (use wsdl2h option -g to auto-generate)

  - <ns4:SubscriptionManagerRP> @ref _ns4__SubscriptionManagerRP
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__SubscriptionManagerRP(struct soap*, struct _ns4__SubscriptionManagerRP*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__SubscriptionManagerRP(struct soap*, struct _ns4__SubscriptionManagerRP*);
    @endcode

  - <ns4:SubscriptionReference> (use wsdl2h option -g to auto-generate)

  - <ns4:Topic> (use wsdl2h option -g to auto-generate)

  - <ns4:ProducerReference> (use wsdl2h option -g to auto-generate)

  - <ns4:NotificationMessage> (use wsdl2h option -g to auto-generate)

  - <ns4:Notify> @ref _ns4__Notify
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__Notify(struct soap*, struct _ns4__Notify*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__Notify(struct soap*, struct _ns4__Notify*);
    @endcode

  - <ns4:CurrentTime> (use wsdl2h option -g to auto-generate)

  - <ns4:TerminationTime> (use wsdl2h option -g to auto-generate)

  - <ns4:ProducerProperties> (use wsdl2h option -g to auto-generate)

  - <ns4:MessageContent> (use wsdl2h option -g to auto-generate)

  - <ns4:UseRaw> @ref _ns4__UseRaw
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__UseRaw(struct soap*, struct _ns4__UseRaw*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__UseRaw(struct soap*, struct _ns4__UseRaw*);
    @endcode

  - <ns4:Subscribe> @ref _ns4__Subscribe
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__Subscribe(struct soap*, struct _ns4__Subscribe*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__Subscribe(struct soap*, struct _ns4__Subscribe*);
    @endcode

  - <ns4:SubscribeResponse> @ref _ns4__SubscribeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__SubscribeResponse(struct soap*, struct _ns4__SubscribeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__SubscribeResponse(struct soap*, struct _ns4__SubscribeResponse*);
    @endcode

  - <ns4:GetCurrentMessage> @ref _ns4__GetCurrentMessage
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__GetCurrentMessage(struct soap*, struct _ns4__GetCurrentMessage*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__GetCurrentMessage(struct soap*, struct _ns4__GetCurrentMessage*);
    @endcode

  - <ns4:GetCurrentMessageResponse> @ref _ns4__GetCurrentMessageResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__GetCurrentMessageResponse(struct soap*, struct _ns4__GetCurrentMessageResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__GetCurrentMessageResponse(struct soap*, struct _ns4__GetCurrentMessageResponse*);
    @endcode

  - <ns4:SubscribeCreationFailedFault> (use wsdl2h option -g to auto-generate)

  - <ns4:InvalidFilterFault> (use wsdl2h option -g to auto-generate)

  - <ns4:TopicExpressionDialectUnknownFault> (use wsdl2h option -g to auto-generate)

  - <ns4:InvalidTopicExpressionFault> (use wsdl2h option -g to auto-generate)

  - <ns4:TopicNotSupportedFault> (use wsdl2h option -g to auto-generate)

  - <ns4:MultipleTopicsSpecifiedFault> (use wsdl2h option -g to auto-generate)

  - <ns4:InvalidProducerPropertiesExpressionFault> (use wsdl2h option -g to auto-generate)

  - <ns4:InvalidMessageContentExpressionFault> (use wsdl2h option -g to auto-generate)

  - <ns4:UnrecognizedPolicyRequestFault> (use wsdl2h option -g to auto-generate)

  - <ns4:UnsupportedPolicyRequestFault> (use wsdl2h option -g to auto-generate)

  - <ns4:NotifyMessageNotSupportedFault> (use wsdl2h option -g to auto-generate)

  - <ns4:UnacceptableInitialTerminationTimeFault> (use wsdl2h option -g to auto-generate)

  - <ns4:NoCurrentMessageOnTopicFault> (use wsdl2h option -g to auto-generate)

  - <ns4:GetMessages> @ref _ns4__GetMessages
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__GetMessages(struct soap*, struct _ns4__GetMessages*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__GetMessages(struct soap*, struct _ns4__GetMessages*);
    @endcode

  - <ns4:GetMessagesResponse> @ref _ns4__GetMessagesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__GetMessagesResponse(struct soap*, struct _ns4__GetMessagesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__GetMessagesResponse(struct soap*, struct _ns4__GetMessagesResponse*);
    @endcode

  - <ns4:DestroyPullPoint> @ref _ns4__DestroyPullPoint
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__DestroyPullPoint(struct soap*, struct _ns4__DestroyPullPoint*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__DestroyPullPoint(struct soap*, struct _ns4__DestroyPullPoint*);
    @endcode

  - <ns4:DestroyPullPointResponse> @ref _ns4__DestroyPullPointResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__DestroyPullPointResponse(struct soap*, struct _ns4__DestroyPullPointResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__DestroyPullPointResponse(struct soap*, struct _ns4__DestroyPullPointResponse*);
    @endcode

  - <ns4:UnableToGetMessagesFault> (use wsdl2h option -g to auto-generate)

  - <ns4:UnableToDestroyPullPointFault> (use wsdl2h option -g to auto-generate)

  - <ns4:CreatePullPoint> @ref _ns4__CreatePullPoint
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__CreatePullPoint(struct soap*, struct _ns4__CreatePullPoint*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__CreatePullPoint(struct soap*, struct _ns4__CreatePullPoint*);
    @endcode

  - <ns4:CreatePullPointResponse> @ref _ns4__CreatePullPointResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__CreatePullPointResponse(struct soap*, struct _ns4__CreatePullPointResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__CreatePullPointResponse(struct soap*, struct _ns4__CreatePullPointResponse*);
    @endcode

  - <ns4:UnableToCreatePullPointFault> (use wsdl2h option -g to auto-generate)

  - <ns4:Renew> @ref _ns4__Renew
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__Renew(struct soap*, struct _ns4__Renew*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__Renew(struct soap*, struct _ns4__Renew*);
    @endcode

  - <ns4:RenewResponse> @ref _ns4__RenewResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__RenewResponse(struct soap*, struct _ns4__RenewResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__RenewResponse(struct soap*, struct _ns4__RenewResponse*);
    @endcode

  - <ns4:UnacceptableTerminationTimeFault> (use wsdl2h option -g to auto-generate)

  - <ns4:Unsubscribe> @ref _ns4__Unsubscribe
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__Unsubscribe(struct soap*, struct _ns4__Unsubscribe*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__Unsubscribe(struct soap*, struct _ns4__Unsubscribe*);
    @endcode

  - <ns4:UnsubscribeResponse> @ref _ns4__UnsubscribeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__UnsubscribeResponse(struct soap*, struct _ns4__UnsubscribeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__UnsubscribeResponse(struct soap*, struct _ns4__UnsubscribeResponse*);
    @endcode

  - <ns4:UnableToDestroySubscriptionFault> (use wsdl2h option -g to auto-generate)

  - <ns4:PauseSubscription> @ref _ns4__PauseSubscription
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__PauseSubscription(struct soap*, struct _ns4__PauseSubscription*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__PauseSubscription(struct soap*, struct _ns4__PauseSubscription*);
    @endcode

  - <ns4:PauseSubscriptionResponse> @ref _ns4__PauseSubscriptionResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__PauseSubscriptionResponse(struct soap*, struct _ns4__PauseSubscriptionResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__PauseSubscriptionResponse(struct soap*, struct _ns4__PauseSubscriptionResponse*);
    @endcode

  - <ns4:ResumeSubscription> @ref _ns4__ResumeSubscription
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__ResumeSubscription(struct soap*, struct _ns4__ResumeSubscription*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__ResumeSubscription(struct soap*, struct _ns4__ResumeSubscription*);
    @endcode

  - <ns4:ResumeSubscriptionResponse> @ref _ns4__ResumeSubscriptionResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__ResumeSubscriptionResponse(struct soap*, struct _ns4__ResumeSubscriptionResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__ResumeSubscriptionResponse(struct soap*, struct _ns4__ResumeSubscriptionResponse*);
    @endcode

  - <ns4:PauseFailedFault> (use wsdl2h option -g to auto-generate)

  - <ns4:ResumeFailedFault> (use wsdl2h option -g to auto-generate)

@section ns5 Top-level root elements of schema "http://www.w3.org/2004/08/xop/include"

  - <ns5:Include> (use wsdl2h option -g to auto-generate)

@section ns6 Top-level root elements of schema "http://docs.oasis-open.org/wsrf/bf-2"

  - <ns6:BaseFault> (use wsdl2h option -g to auto-generate)

@section ns7 Top-level root elements of schema "http://docs.oasis-open.org/wsn/t-1"

  - <ns7:TopicNamespace> (use wsdl2h option -g to auto-generate)

  - <ns7:TopicSet> (use wsdl2h option -g to auto-generate)

@section ns8 Top-level root elements of schema "http://www.onvif.org/ver10/device/wsdl"

  - <ns8:GetServices> @ref _ns8__GetServices
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetServices(struct soap*, struct _ns8__GetServices*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetServices(struct soap*, struct _ns8__GetServices*);
    @endcode

  - <ns8:GetServicesResponse> @ref _ns8__GetServicesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetServicesResponse(struct soap*, struct _ns8__GetServicesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetServicesResponse(struct soap*, struct _ns8__GetServicesResponse*);
    @endcode

  - <ns8:GetServiceCapabilities> @ref _ns8__GetServiceCapabilities
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetServiceCapabilities(struct soap*, struct _ns8__GetServiceCapabilities*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetServiceCapabilities(struct soap*, struct _ns8__GetServiceCapabilities*);
    @endcode

  - <ns8:GetServiceCapabilitiesResponse> @ref _ns8__GetServiceCapabilitiesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetServiceCapabilitiesResponse(struct soap*, struct _ns8__GetServiceCapabilitiesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetServiceCapabilitiesResponse(struct soap*, struct _ns8__GetServiceCapabilitiesResponse*);
    @endcode

  - <ns8:Capabilities> (use wsdl2h option -g to auto-generate)

  - <ns8:GetDeviceInformation> @ref _ns8__GetDeviceInformation
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetDeviceInformation(struct soap*, struct _ns8__GetDeviceInformation*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetDeviceInformation(struct soap*, struct _ns8__GetDeviceInformation*);
    @endcode

  - <ns8:GetDeviceInformationResponse> @ref _ns8__GetDeviceInformationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetDeviceInformationResponse(struct soap*, struct _ns8__GetDeviceInformationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetDeviceInformationResponse(struct soap*, struct _ns8__GetDeviceInformationResponse*);
    @endcode

  - <ns8:SetSystemDateAndTime> @ref _ns8__SetSystemDateAndTime
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetSystemDateAndTime(struct soap*, struct _ns8__SetSystemDateAndTime*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetSystemDateAndTime(struct soap*, struct _ns8__SetSystemDateAndTime*);
    @endcode

  - <ns8:SetSystemDateAndTimeResponse> @ref _ns8__SetSystemDateAndTimeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetSystemDateAndTimeResponse(struct soap*, struct _ns8__SetSystemDateAndTimeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetSystemDateAndTimeResponse(struct soap*, struct _ns8__SetSystemDateAndTimeResponse*);
    @endcode

  - <ns8:GetSystemDateAndTime> @ref _ns8__GetSystemDateAndTime
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetSystemDateAndTime(struct soap*, struct _ns8__GetSystemDateAndTime*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetSystemDateAndTime(struct soap*, struct _ns8__GetSystemDateAndTime*);
    @endcode

  - <ns8:GetSystemDateAndTimeResponse> @ref _ns8__GetSystemDateAndTimeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetSystemDateAndTimeResponse(struct soap*, struct _ns8__GetSystemDateAndTimeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetSystemDateAndTimeResponse(struct soap*, struct _ns8__GetSystemDateAndTimeResponse*);
    @endcode

  - <ns8:SetSystemFactoryDefault> @ref _ns8__SetSystemFactoryDefault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetSystemFactoryDefault(struct soap*, struct _ns8__SetSystemFactoryDefault*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetSystemFactoryDefault(struct soap*, struct _ns8__SetSystemFactoryDefault*);
    @endcode

  - <ns8:SetSystemFactoryDefaultResponse> @ref _ns8__SetSystemFactoryDefaultResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetSystemFactoryDefaultResponse(struct soap*, struct _ns8__SetSystemFactoryDefaultResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetSystemFactoryDefaultResponse(struct soap*, struct _ns8__SetSystemFactoryDefaultResponse*);
    @endcode

  - <ns8:UpgradeSystemFirmware> @ref _ns8__UpgradeSystemFirmware
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__UpgradeSystemFirmware(struct soap*, struct _ns8__UpgradeSystemFirmware*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__UpgradeSystemFirmware(struct soap*, struct _ns8__UpgradeSystemFirmware*);
    @endcode

  - <ns8:UpgradeSystemFirmwareResponse> @ref _ns8__UpgradeSystemFirmwareResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__UpgradeSystemFirmwareResponse(struct soap*, struct _ns8__UpgradeSystemFirmwareResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__UpgradeSystemFirmwareResponse(struct soap*, struct _ns8__UpgradeSystemFirmwareResponse*);
    @endcode

  - <ns8:SystemReboot> @ref _ns8__SystemReboot
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SystemReboot(struct soap*, struct _ns8__SystemReboot*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SystemReboot(struct soap*, struct _ns8__SystemReboot*);
    @endcode

  - <ns8:SystemRebootResponse> @ref _ns8__SystemRebootResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SystemRebootResponse(struct soap*, struct _ns8__SystemRebootResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SystemRebootResponse(struct soap*, struct _ns8__SystemRebootResponse*);
    @endcode

  - <ns8:RestoreSystem> @ref _ns8__RestoreSystem
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__RestoreSystem(struct soap*, struct _ns8__RestoreSystem*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__RestoreSystem(struct soap*, struct _ns8__RestoreSystem*);
    @endcode

  - <ns8:RestoreSystemResponse> @ref _ns8__RestoreSystemResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__RestoreSystemResponse(struct soap*, struct _ns8__RestoreSystemResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__RestoreSystemResponse(struct soap*, struct _ns8__RestoreSystemResponse*);
    @endcode

  - <ns8:GetSystemBackup> @ref _ns8__GetSystemBackup
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetSystemBackup(struct soap*, struct _ns8__GetSystemBackup*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetSystemBackup(struct soap*, struct _ns8__GetSystemBackup*);
    @endcode

  - <ns8:GetSystemBackupResponse> @ref _ns8__GetSystemBackupResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetSystemBackupResponse(struct soap*, struct _ns8__GetSystemBackupResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetSystemBackupResponse(struct soap*, struct _ns8__GetSystemBackupResponse*);
    @endcode

  - <ns8:GetSystemSupportInformation> @ref _ns8__GetSystemSupportInformation
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetSystemSupportInformation(struct soap*, struct _ns8__GetSystemSupportInformation*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetSystemSupportInformation(struct soap*, struct _ns8__GetSystemSupportInformation*);
    @endcode

  - <ns8:GetSystemSupportInformationResponse> @ref _ns8__GetSystemSupportInformationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetSystemSupportInformationResponse(struct soap*, struct _ns8__GetSystemSupportInformationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetSystemSupportInformationResponse(struct soap*, struct _ns8__GetSystemSupportInformationResponse*);
    @endcode

  - <ns8:GetSystemLog> @ref _ns8__GetSystemLog
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetSystemLog(struct soap*, struct _ns8__GetSystemLog*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetSystemLog(struct soap*, struct _ns8__GetSystemLog*);
    @endcode

  - <ns8:GetSystemLogResponse> @ref _ns8__GetSystemLogResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetSystemLogResponse(struct soap*, struct _ns8__GetSystemLogResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetSystemLogResponse(struct soap*, struct _ns8__GetSystemLogResponse*);
    @endcode

  - <ns8:GetScopes> @ref _ns8__GetScopes
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetScopes(struct soap*, struct _ns8__GetScopes*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetScopes(struct soap*, struct _ns8__GetScopes*);
    @endcode

  - <ns8:GetScopesResponse> @ref _ns8__GetScopesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetScopesResponse(struct soap*, struct _ns8__GetScopesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetScopesResponse(struct soap*, struct _ns8__GetScopesResponse*);
    @endcode

  - <ns8:SetScopes> @ref _ns8__SetScopes
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetScopes(struct soap*, struct _ns8__SetScopes*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetScopes(struct soap*, struct _ns8__SetScopes*);
    @endcode

  - <ns8:SetScopesResponse> @ref _ns8__SetScopesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetScopesResponse(struct soap*, struct _ns8__SetScopesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetScopesResponse(struct soap*, struct _ns8__SetScopesResponse*);
    @endcode

  - <ns8:AddScopes> @ref _ns8__AddScopes
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__AddScopes(struct soap*, struct _ns8__AddScopes*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__AddScopes(struct soap*, struct _ns8__AddScopes*);
    @endcode

  - <ns8:AddScopesResponse> @ref _ns8__AddScopesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__AddScopesResponse(struct soap*, struct _ns8__AddScopesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__AddScopesResponse(struct soap*, struct _ns8__AddScopesResponse*);
    @endcode

  - <ns8:RemoveScopes> @ref _ns8__RemoveScopes
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__RemoveScopes(struct soap*, struct _ns8__RemoveScopes*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__RemoveScopes(struct soap*, struct _ns8__RemoveScopes*);
    @endcode

  - <ns8:RemoveScopesResponse> @ref _ns8__RemoveScopesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__RemoveScopesResponse(struct soap*, struct _ns8__RemoveScopesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__RemoveScopesResponse(struct soap*, struct _ns8__RemoveScopesResponse*);
    @endcode

  - <ns8:GetDiscoveryMode> @ref _ns8__GetDiscoveryMode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetDiscoveryMode(struct soap*, struct _ns8__GetDiscoveryMode*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetDiscoveryMode(struct soap*, struct _ns8__GetDiscoveryMode*);
    @endcode

  - <ns8:GetDiscoveryModeResponse> @ref _ns8__GetDiscoveryModeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetDiscoveryModeResponse(struct soap*, struct _ns8__GetDiscoveryModeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetDiscoveryModeResponse(struct soap*, struct _ns8__GetDiscoveryModeResponse*);
    @endcode

  - <ns8:SetDiscoveryMode> @ref _ns8__SetDiscoveryMode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetDiscoveryMode(struct soap*, struct _ns8__SetDiscoveryMode*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetDiscoveryMode(struct soap*, struct _ns8__SetDiscoveryMode*);
    @endcode

  - <ns8:SetDiscoveryModeResponse> @ref _ns8__SetDiscoveryModeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetDiscoveryModeResponse(struct soap*, struct _ns8__SetDiscoveryModeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetDiscoveryModeResponse(struct soap*, struct _ns8__SetDiscoveryModeResponse*);
    @endcode

  - <ns8:GetRemoteDiscoveryMode> @ref _ns8__GetRemoteDiscoveryMode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetRemoteDiscoveryMode(struct soap*, struct _ns8__GetRemoteDiscoveryMode*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetRemoteDiscoveryMode(struct soap*, struct _ns8__GetRemoteDiscoveryMode*);
    @endcode

  - <ns8:GetRemoteDiscoveryModeResponse> @ref _ns8__GetRemoteDiscoveryModeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetRemoteDiscoveryModeResponse(struct soap*, struct _ns8__GetRemoteDiscoveryModeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetRemoteDiscoveryModeResponse(struct soap*, struct _ns8__GetRemoteDiscoveryModeResponse*);
    @endcode

  - <ns8:SetRemoteDiscoveryMode> @ref _ns8__SetRemoteDiscoveryMode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetRemoteDiscoveryMode(struct soap*, struct _ns8__SetRemoteDiscoveryMode*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetRemoteDiscoveryMode(struct soap*, struct _ns8__SetRemoteDiscoveryMode*);
    @endcode

  - <ns8:SetRemoteDiscoveryModeResponse> @ref _ns8__SetRemoteDiscoveryModeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetRemoteDiscoveryModeResponse(struct soap*, struct _ns8__SetRemoteDiscoveryModeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetRemoteDiscoveryModeResponse(struct soap*, struct _ns8__SetRemoteDiscoveryModeResponse*);
    @endcode

  - <ns8:GetDPAddresses> @ref _ns8__GetDPAddresses
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetDPAddresses(struct soap*, struct _ns8__GetDPAddresses*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetDPAddresses(struct soap*, struct _ns8__GetDPAddresses*);
    @endcode

  - <ns8:GetDPAddressesResponse> @ref _ns8__GetDPAddressesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetDPAddressesResponse(struct soap*, struct _ns8__GetDPAddressesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetDPAddressesResponse(struct soap*, struct _ns8__GetDPAddressesResponse*);
    @endcode

  - <ns8:SetDPAddresses> @ref _ns8__SetDPAddresses
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetDPAddresses(struct soap*, struct _ns8__SetDPAddresses*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetDPAddresses(struct soap*, struct _ns8__SetDPAddresses*);
    @endcode

  - <ns8:SetDPAddressesResponse> @ref _ns8__SetDPAddressesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetDPAddressesResponse(struct soap*, struct _ns8__SetDPAddressesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetDPAddressesResponse(struct soap*, struct _ns8__SetDPAddressesResponse*);
    @endcode

  - <ns8:GetEndpointReference> @ref _ns8__GetEndpointReference
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetEndpointReference(struct soap*, struct _ns8__GetEndpointReference*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetEndpointReference(struct soap*, struct _ns8__GetEndpointReference*);
    @endcode

  - <ns8:GetEndpointReferenceResponse> @ref _ns8__GetEndpointReferenceResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetEndpointReferenceResponse(struct soap*, struct _ns8__GetEndpointReferenceResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetEndpointReferenceResponse(struct soap*, struct _ns8__GetEndpointReferenceResponse*);
    @endcode

  - <ns8:GetRemoteUser> @ref _ns8__GetRemoteUser
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetRemoteUser(struct soap*, struct _ns8__GetRemoteUser*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetRemoteUser(struct soap*, struct _ns8__GetRemoteUser*);
    @endcode

  - <ns8:GetRemoteUserResponse> @ref _ns8__GetRemoteUserResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetRemoteUserResponse(struct soap*, struct _ns8__GetRemoteUserResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetRemoteUserResponse(struct soap*, struct _ns8__GetRemoteUserResponse*);
    @endcode

  - <ns8:SetRemoteUser> @ref _ns8__SetRemoteUser
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetRemoteUser(struct soap*, struct _ns8__SetRemoteUser*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetRemoteUser(struct soap*, struct _ns8__SetRemoteUser*);
    @endcode

  - <ns8:SetRemoteUserResponse> @ref _ns8__SetRemoteUserResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetRemoteUserResponse(struct soap*, struct _ns8__SetRemoteUserResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetRemoteUserResponse(struct soap*, struct _ns8__SetRemoteUserResponse*);
    @endcode

  - <ns8:GetUsers> @ref _ns8__GetUsers
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetUsers(struct soap*, struct _ns8__GetUsers*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetUsers(struct soap*, struct _ns8__GetUsers*);
    @endcode

  - <ns8:GetUsersResponse> @ref _ns8__GetUsersResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetUsersResponse(struct soap*, struct _ns8__GetUsersResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetUsersResponse(struct soap*, struct _ns8__GetUsersResponse*);
    @endcode

  - <ns8:CreateUsers> @ref _ns8__CreateUsers
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__CreateUsers(struct soap*, struct _ns8__CreateUsers*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__CreateUsers(struct soap*, struct _ns8__CreateUsers*);
    @endcode

  - <ns8:CreateUsersResponse> @ref _ns8__CreateUsersResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__CreateUsersResponse(struct soap*, struct _ns8__CreateUsersResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__CreateUsersResponse(struct soap*, struct _ns8__CreateUsersResponse*);
    @endcode

  - <ns8:DeleteUsers> @ref _ns8__DeleteUsers
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__DeleteUsers(struct soap*, struct _ns8__DeleteUsers*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__DeleteUsers(struct soap*, struct _ns8__DeleteUsers*);
    @endcode

  - <ns8:DeleteUsersResponse> @ref _ns8__DeleteUsersResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__DeleteUsersResponse(struct soap*, struct _ns8__DeleteUsersResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__DeleteUsersResponse(struct soap*, struct _ns8__DeleteUsersResponse*);
    @endcode

  - <ns8:SetUser> @ref _ns8__SetUser
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetUser(struct soap*, struct _ns8__SetUser*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetUser(struct soap*, struct _ns8__SetUser*);
    @endcode

  - <ns8:SetUserResponse> @ref _ns8__SetUserResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetUserResponse(struct soap*, struct _ns8__SetUserResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetUserResponse(struct soap*, struct _ns8__SetUserResponse*);
    @endcode

  - <ns8:GetWsdlUrl> @ref _ns8__GetWsdlUrl
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetWsdlUrl(struct soap*, struct _ns8__GetWsdlUrl*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetWsdlUrl(struct soap*, struct _ns8__GetWsdlUrl*);
    @endcode

  - <ns8:GetWsdlUrlResponse> @ref _ns8__GetWsdlUrlResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetWsdlUrlResponse(struct soap*, struct _ns8__GetWsdlUrlResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetWsdlUrlResponse(struct soap*, struct _ns8__GetWsdlUrlResponse*);
    @endcode

  - <ns8:GetCapabilities> @ref _ns8__GetCapabilities
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetCapabilities(struct soap*, struct _ns8__GetCapabilities*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetCapabilities(struct soap*, struct _ns8__GetCapabilities*);
    @endcode

  - <ns8:GetCapabilitiesResponse> @ref _ns8__GetCapabilitiesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetCapabilitiesResponse(struct soap*, struct _ns8__GetCapabilitiesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetCapabilitiesResponse(struct soap*, struct _ns8__GetCapabilitiesResponse*);
    @endcode

  - <ns8:GetHostname> @ref _ns8__GetHostname
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetHostname(struct soap*, struct _ns8__GetHostname*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetHostname(struct soap*, struct _ns8__GetHostname*);
    @endcode

  - <ns8:GetHostnameResponse> @ref _ns8__GetHostnameResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetHostnameResponse(struct soap*, struct _ns8__GetHostnameResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetHostnameResponse(struct soap*, struct _ns8__GetHostnameResponse*);
    @endcode

  - <ns8:SetHostname> @ref _ns8__SetHostname
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetHostname(struct soap*, struct _ns8__SetHostname*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetHostname(struct soap*, struct _ns8__SetHostname*);
    @endcode

  - <ns8:SetHostnameResponse> @ref _ns8__SetHostnameResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetHostnameResponse(struct soap*, struct _ns8__SetHostnameResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetHostnameResponse(struct soap*, struct _ns8__SetHostnameResponse*);
    @endcode

  - <ns8:SetHostnameFromDHCP> @ref _ns8__SetHostnameFromDHCP
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetHostnameFromDHCP(struct soap*, struct _ns8__SetHostnameFromDHCP*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetHostnameFromDHCP(struct soap*, struct _ns8__SetHostnameFromDHCP*);
    @endcode

  - <ns8:SetHostnameFromDHCPResponse> @ref _ns8__SetHostnameFromDHCPResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetHostnameFromDHCPResponse(struct soap*, struct _ns8__SetHostnameFromDHCPResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetHostnameFromDHCPResponse(struct soap*, struct _ns8__SetHostnameFromDHCPResponse*);
    @endcode

  - <ns8:GetDNS> @ref _ns8__GetDNS
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetDNS(struct soap*, struct _ns8__GetDNS*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetDNS(struct soap*, struct _ns8__GetDNS*);
    @endcode

  - <ns8:GetDNSResponse> @ref _ns8__GetDNSResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetDNSResponse(struct soap*, struct _ns8__GetDNSResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetDNSResponse(struct soap*, struct _ns8__GetDNSResponse*);
    @endcode

  - <ns8:SetDNS> @ref _ns8__SetDNS
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetDNS(struct soap*, struct _ns8__SetDNS*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetDNS(struct soap*, struct _ns8__SetDNS*);
    @endcode

  - <ns8:SetDNSResponse> @ref _ns8__SetDNSResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetDNSResponse(struct soap*, struct _ns8__SetDNSResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetDNSResponse(struct soap*, struct _ns8__SetDNSResponse*);
    @endcode

  - <ns8:GetNTP> @ref _ns8__GetNTP
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetNTP(struct soap*, struct _ns8__GetNTP*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetNTP(struct soap*, struct _ns8__GetNTP*);
    @endcode

  - <ns8:GetNTPResponse> @ref _ns8__GetNTPResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetNTPResponse(struct soap*, struct _ns8__GetNTPResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetNTPResponse(struct soap*, struct _ns8__GetNTPResponse*);
    @endcode

  - <ns8:SetNTP> @ref _ns8__SetNTP
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetNTP(struct soap*, struct _ns8__SetNTP*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetNTP(struct soap*, struct _ns8__SetNTP*);
    @endcode

  - <ns8:SetNTPResponse> @ref _ns8__SetNTPResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetNTPResponse(struct soap*, struct _ns8__SetNTPResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetNTPResponse(struct soap*, struct _ns8__SetNTPResponse*);
    @endcode

  - <ns8:GetDynamicDNS> @ref _ns8__GetDynamicDNS
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetDynamicDNS(struct soap*, struct _ns8__GetDynamicDNS*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetDynamicDNS(struct soap*, struct _ns8__GetDynamicDNS*);
    @endcode

  - <ns8:GetDynamicDNSResponse> @ref _ns8__GetDynamicDNSResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetDynamicDNSResponse(struct soap*, struct _ns8__GetDynamicDNSResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetDynamicDNSResponse(struct soap*, struct _ns8__GetDynamicDNSResponse*);
    @endcode

  - <ns8:SetDynamicDNS> @ref _ns8__SetDynamicDNS
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetDynamicDNS(struct soap*, struct _ns8__SetDynamicDNS*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetDynamicDNS(struct soap*, struct _ns8__SetDynamicDNS*);
    @endcode

  - <ns8:SetDynamicDNSResponse> @ref _ns8__SetDynamicDNSResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetDynamicDNSResponse(struct soap*, struct _ns8__SetDynamicDNSResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetDynamicDNSResponse(struct soap*, struct _ns8__SetDynamicDNSResponse*);
    @endcode

  - <ns8:GetNetworkInterfaces> @ref _ns8__GetNetworkInterfaces
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetNetworkInterfaces(struct soap*, struct _ns8__GetNetworkInterfaces*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetNetworkInterfaces(struct soap*, struct _ns8__GetNetworkInterfaces*);
    @endcode

  - <ns8:GetNetworkInterfacesResponse> @ref _ns8__GetNetworkInterfacesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetNetworkInterfacesResponse(struct soap*, struct _ns8__GetNetworkInterfacesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetNetworkInterfacesResponse(struct soap*, struct _ns8__GetNetworkInterfacesResponse*);
    @endcode

  - <ns8:SetNetworkInterfaces> @ref _ns8__SetNetworkInterfaces
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetNetworkInterfaces(struct soap*, struct _ns8__SetNetworkInterfaces*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetNetworkInterfaces(struct soap*, struct _ns8__SetNetworkInterfaces*);
    @endcode

  - <ns8:SetNetworkInterfacesResponse> @ref _ns8__SetNetworkInterfacesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetNetworkInterfacesResponse(struct soap*, struct _ns8__SetNetworkInterfacesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetNetworkInterfacesResponse(struct soap*, struct _ns8__SetNetworkInterfacesResponse*);
    @endcode

  - <ns8:GetNetworkProtocols> @ref _ns8__GetNetworkProtocols
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetNetworkProtocols(struct soap*, struct _ns8__GetNetworkProtocols*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetNetworkProtocols(struct soap*, struct _ns8__GetNetworkProtocols*);
    @endcode

  - <ns8:GetNetworkProtocolsResponse> @ref _ns8__GetNetworkProtocolsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetNetworkProtocolsResponse(struct soap*, struct _ns8__GetNetworkProtocolsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetNetworkProtocolsResponse(struct soap*, struct _ns8__GetNetworkProtocolsResponse*);
    @endcode

  - <ns8:SetNetworkProtocols> @ref _ns8__SetNetworkProtocols
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetNetworkProtocols(struct soap*, struct _ns8__SetNetworkProtocols*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetNetworkProtocols(struct soap*, struct _ns8__SetNetworkProtocols*);
    @endcode

  - <ns8:SetNetworkProtocolsResponse> @ref _ns8__SetNetworkProtocolsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetNetworkProtocolsResponse(struct soap*, struct _ns8__SetNetworkProtocolsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetNetworkProtocolsResponse(struct soap*, struct _ns8__SetNetworkProtocolsResponse*);
    @endcode

  - <ns8:GetNetworkDefaultGateway> @ref _ns8__GetNetworkDefaultGateway
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetNetworkDefaultGateway(struct soap*, struct _ns8__GetNetworkDefaultGateway*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetNetworkDefaultGateway(struct soap*, struct _ns8__GetNetworkDefaultGateway*);
    @endcode

  - <ns8:GetNetworkDefaultGatewayResponse> @ref _ns8__GetNetworkDefaultGatewayResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetNetworkDefaultGatewayResponse(struct soap*, struct _ns8__GetNetworkDefaultGatewayResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetNetworkDefaultGatewayResponse(struct soap*, struct _ns8__GetNetworkDefaultGatewayResponse*);
    @endcode

  - <ns8:SetNetworkDefaultGateway> @ref _ns8__SetNetworkDefaultGateway
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetNetworkDefaultGateway(struct soap*, struct _ns8__SetNetworkDefaultGateway*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetNetworkDefaultGateway(struct soap*, struct _ns8__SetNetworkDefaultGateway*);
    @endcode

  - <ns8:SetNetworkDefaultGatewayResponse> @ref _ns8__SetNetworkDefaultGatewayResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetNetworkDefaultGatewayResponse(struct soap*, struct _ns8__SetNetworkDefaultGatewayResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetNetworkDefaultGatewayResponse(struct soap*, struct _ns8__SetNetworkDefaultGatewayResponse*);
    @endcode

  - <ns8:GetZeroConfiguration> @ref _ns8__GetZeroConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetZeroConfiguration(struct soap*, struct _ns8__GetZeroConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetZeroConfiguration(struct soap*, struct _ns8__GetZeroConfiguration*);
    @endcode

  - <ns8:GetZeroConfigurationResponse> @ref _ns8__GetZeroConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetZeroConfigurationResponse(struct soap*, struct _ns8__GetZeroConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetZeroConfigurationResponse(struct soap*, struct _ns8__GetZeroConfigurationResponse*);
    @endcode

  - <ns8:SetZeroConfiguration> @ref _ns8__SetZeroConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetZeroConfiguration(struct soap*, struct _ns8__SetZeroConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetZeroConfiguration(struct soap*, struct _ns8__SetZeroConfiguration*);
    @endcode

  - <ns8:SetZeroConfigurationResponse> @ref _ns8__SetZeroConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetZeroConfigurationResponse(struct soap*, struct _ns8__SetZeroConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetZeroConfigurationResponse(struct soap*, struct _ns8__SetZeroConfigurationResponse*);
    @endcode

  - <ns8:GetIPAddressFilter> @ref _ns8__GetIPAddressFilter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetIPAddressFilter(struct soap*, struct _ns8__GetIPAddressFilter*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetIPAddressFilter(struct soap*, struct _ns8__GetIPAddressFilter*);
    @endcode

  - <ns8:GetIPAddressFilterResponse> @ref _ns8__GetIPAddressFilterResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetIPAddressFilterResponse(struct soap*, struct _ns8__GetIPAddressFilterResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetIPAddressFilterResponse(struct soap*, struct _ns8__GetIPAddressFilterResponse*);
    @endcode

  - <ns8:SetIPAddressFilter> @ref _ns8__SetIPAddressFilter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetIPAddressFilter(struct soap*, struct _ns8__SetIPAddressFilter*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetIPAddressFilter(struct soap*, struct _ns8__SetIPAddressFilter*);
    @endcode

  - <ns8:SetIPAddressFilterResponse> @ref _ns8__SetIPAddressFilterResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetIPAddressFilterResponse(struct soap*, struct _ns8__SetIPAddressFilterResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetIPAddressFilterResponse(struct soap*, struct _ns8__SetIPAddressFilterResponse*);
    @endcode

  - <ns8:AddIPAddressFilter> @ref _ns8__AddIPAddressFilter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__AddIPAddressFilter(struct soap*, struct _ns8__AddIPAddressFilter*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__AddIPAddressFilter(struct soap*, struct _ns8__AddIPAddressFilter*);
    @endcode

  - <ns8:AddIPAddressFilterResponse> @ref _ns8__AddIPAddressFilterResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__AddIPAddressFilterResponse(struct soap*, struct _ns8__AddIPAddressFilterResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__AddIPAddressFilterResponse(struct soap*, struct _ns8__AddIPAddressFilterResponse*);
    @endcode

  - <ns8:RemoveIPAddressFilter> @ref _ns8__RemoveIPAddressFilter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__RemoveIPAddressFilter(struct soap*, struct _ns8__RemoveIPAddressFilter*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__RemoveIPAddressFilter(struct soap*, struct _ns8__RemoveIPAddressFilter*);
    @endcode

  - <ns8:RemoveIPAddressFilterResponse> @ref _ns8__RemoveIPAddressFilterResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__RemoveIPAddressFilterResponse(struct soap*, struct _ns8__RemoveIPAddressFilterResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__RemoveIPAddressFilterResponse(struct soap*, struct _ns8__RemoveIPAddressFilterResponse*);
    @endcode

  - <ns8:GetAccessPolicy> @ref _ns8__GetAccessPolicy
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetAccessPolicy(struct soap*, struct _ns8__GetAccessPolicy*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetAccessPolicy(struct soap*, struct _ns8__GetAccessPolicy*);
    @endcode

  - <ns8:GetAccessPolicyResponse> @ref _ns8__GetAccessPolicyResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetAccessPolicyResponse(struct soap*, struct _ns8__GetAccessPolicyResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetAccessPolicyResponse(struct soap*, struct _ns8__GetAccessPolicyResponse*);
    @endcode

  - <ns8:SetAccessPolicy> @ref _ns8__SetAccessPolicy
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetAccessPolicy(struct soap*, struct _ns8__SetAccessPolicy*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetAccessPolicy(struct soap*, struct _ns8__SetAccessPolicy*);
    @endcode

  - <ns8:SetAccessPolicyResponse> @ref _ns8__SetAccessPolicyResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetAccessPolicyResponse(struct soap*, struct _ns8__SetAccessPolicyResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetAccessPolicyResponse(struct soap*, struct _ns8__SetAccessPolicyResponse*);
    @endcode

  - <ns8:CreateCertificate> @ref _ns8__CreateCertificate
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__CreateCertificate(struct soap*, struct _ns8__CreateCertificate*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__CreateCertificate(struct soap*, struct _ns8__CreateCertificate*);
    @endcode

  - <ns8:CreateCertificateResponse> @ref _ns8__CreateCertificateResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__CreateCertificateResponse(struct soap*, struct _ns8__CreateCertificateResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__CreateCertificateResponse(struct soap*, struct _ns8__CreateCertificateResponse*);
    @endcode

  - <ns8:GetCertificates> @ref _ns8__GetCertificates
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetCertificates(struct soap*, struct _ns8__GetCertificates*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetCertificates(struct soap*, struct _ns8__GetCertificates*);
    @endcode

  - <ns8:GetCertificatesResponse> @ref _ns8__GetCertificatesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetCertificatesResponse(struct soap*, struct _ns8__GetCertificatesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetCertificatesResponse(struct soap*, struct _ns8__GetCertificatesResponse*);
    @endcode

  - <ns8:GetCertificatesStatus> @ref _ns8__GetCertificatesStatus
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetCertificatesStatus(struct soap*, struct _ns8__GetCertificatesStatus*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetCertificatesStatus(struct soap*, struct _ns8__GetCertificatesStatus*);
    @endcode

  - <ns8:GetCertificatesStatusResponse> @ref _ns8__GetCertificatesStatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetCertificatesStatusResponse(struct soap*, struct _ns8__GetCertificatesStatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetCertificatesStatusResponse(struct soap*, struct _ns8__GetCertificatesStatusResponse*);
    @endcode

  - <ns8:SetCertificatesStatus> @ref _ns8__SetCertificatesStatus
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetCertificatesStatus(struct soap*, struct _ns8__SetCertificatesStatus*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetCertificatesStatus(struct soap*, struct _ns8__SetCertificatesStatus*);
    @endcode

  - <ns8:SetCertificatesStatusResponse> @ref _ns8__SetCertificatesStatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetCertificatesStatusResponse(struct soap*, struct _ns8__SetCertificatesStatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetCertificatesStatusResponse(struct soap*, struct _ns8__SetCertificatesStatusResponse*);
    @endcode

  - <ns8:DeleteCertificates> @ref _ns8__DeleteCertificates
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__DeleteCertificates(struct soap*, struct _ns8__DeleteCertificates*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__DeleteCertificates(struct soap*, struct _ns8__DeleteCertificates*);
    @endcode

  - <ns8:DeleteCertificatesResponse> @ref _ns8__DeleteCertificatesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__DeleteCertificatesResponse(struct soap*, struct _ns8__DeleteCertificatesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__DeleteCertificatesResponse(struct soap*, struct _ns8__DeleteCertificatesResponse*);
    @endcode

  - <ns8:GetPkcs10Request> @ref _ns8__GetPkcs10Request
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetPkcs10Request(struct soap*, struct _ns8__GetPkcs10Request*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetPkcs10Request(struct soap*, struct _ns8__GetPkcs10Request*);
    @endcode

  - <ns8:GetPkcs10RequestResponse> @ref _ns8__GetPkcs10RequestResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetPkcs10RequestResponse(struct soap*, struct _ns8__GetPkcs10RequestResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetPkcs10RequestResponse(struct soap*, struct _ns8__GetPkcs10RequestResponse*);
    @endcode

  - <ns8:LoadCertificates> @ref _ns8__LoadCertificates
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__LoadCertificates(struct soap*, struct _ns8__LoadCertificates*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__LoadCertificates(struct soap*, struct _ns8__LoadCertificates*);
    @endcode

  - <ns8:LoadCertificatesResponse> @ref _ns8__LoadCertificatesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__LoadCertificatesResponse(struct soap*, struct _ns8__LoadCertificatesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__LoadCertificatesResponse(struct soap*, struct _ns8__LoadCertificatesResponse*);
    @endcode

  - <ns8:GetClientCertificateMode> @ref _ns8__GetClientCertificateMode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetClientCertificateMode(struct soap*, struct _ns8__GetClientCertificateMode*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetClientCertificateMode(struct soap*, struct _ns8__GetClientCertificateMode*);
    @endcode

  - <ns8:GetClientCertificateModeResponse> @ref _ns8__GetClientCertificateModeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetClientCertificateModeResponse(struct soap*, struct _ns8__GetClientCertificateModeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetClientCertificateModeResponse(struct soap*, struct _ns8__GetClientCertificateModeResponse*);
    @endcode

  - <ns8:SetClientCertificateMode> @ref _ns8__SetClientCertificateMode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetClientCertificateMode(struct soap*, struct _ns8__SetClientCertificateMode*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetClientCertificateMode(struct soap*, struct _ns8__SetClientCertificateMode*);
    @endcode

  - <ns8:SetClientCertificateModeResponse> @ref _ns8__SetClientCertificateModeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetClientCertificateModeResponse(struct soap*, struct _ns8__SetClientCertificateModeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetClientCertificateModeResponse(struct soap*, struct _ns8__SetClientCertificateModeResponse*);
    @endcode

  - <ns8:GetCACertificates> @ref _ns8__GetCACertificates
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetCACertificates(struct soap*, struct _ns8__GetCACertificates*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetCACertificates(struct soap*, struct _ns8__GetCACertificates*);
    @endcode

  - <ns8:GetCACertificatesResponse> @ref _ns8__GetCACertificatesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetCACertificatesResponse(struct soap*, struct _ns8__GetCACertificatesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetCACertificatesResponse(struct soap*, struct _ns8__GetCACertificatesResponse*);
    @endcode

  - <ns8:LoadCertificateWithPrivateKey> @ref _ns8__LoadCertificateWithPrivateKey
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__LoadCertificateWithPrivateKey(struct soap*, struct _ns8__LoadCertificateWithPrivateKey*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__LoadCertificateWithPrivateKey(struct soap*, struct _ns8__LoadCertificateWithPrivateKey*);
    @endcode

  - <ns8:LoadCertificateWithPrivateKeyResponse> @ref _ns8__LoadCertificateWithPrivateKeyResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__LoadCertificateWithPrivateKeyResponse(struct soap*, struct _ns8__LoadCertificateWithPrivateKeyResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__LoadCertificateWithPrivateKeyResponse(struct soap*, struct _ns8__LoadCertificateWithPrivateKeyResponse*);
    @endcode

  - <ns8:GetCertificateInformation> @ref _ns8__GetCertificateInformation
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetCertificateInformation(struct soap*, struct _ns8__GetCertificateInformation*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetCertificateInformation(struct soap*, struct _ns8__GetCertificateInformation*);
    @endcode

  - <ns8:GetCertificateInformationResponse> @ref _ns8__GetCertificateInformationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetCertificateInformationResponse(struct soap*, struct _ns8__GetCertificateInformationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetCertificateInformationResponse(struct soap*, struct _ns8__GetCertificateInformationResponse*);
    @endcode

  - <ns8:LoadCACertificates> @ref _ns8__LoadCACertificates
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__LoadCACertificates(struct soap*, struct _ns8__LoadCACertificates*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__LoadCACertificates(struct soap*, struct _ns8__LoadCACertificates*);
    @endcode

  - <ns8:LoadCACertificatesResponse> @ref _ns8__LoadCACertificatesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__LoadCACertificatesResponse(struct soap*, struct _ns8__LoadCACertificatesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__LoadCACertificatesResponse(struct soap*, struct _ns8__LoadCACertificatesResponse*);
    @endcode

  - <ns8:CreateDot1XConfiguration> @ref _ns8__CreateDot1XConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__CreateDot1XConfiguration(struct soap*, struct _ns8__CreateDot1XConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__CreateDot1XConfiguration(struct soap*, struct _ns8__CreateDot1XConfiguration*);
    @endcode

  - <ns8:CreateDot1XConfigurationResponse> @ref _ns8__CreateDot1XConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__CreateDot1XConfigurationResponse(struct soap*, struct _ns8__CreateDot1XConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__CreateDot1XConfigurationResponse(struct soap*, struct _ns8__CreateDot1XConfigurationResponse*);
    @endcode

  - <ns8:SetDot1XConfiguration> @ref _ns8__SetDot1XConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetDot1XConfiguration(struct soap*, struct _ns8__SetDot1XConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetDot1XConfiguration(struct soap*, struct _ns8__SetDot1XConfiguration*);
    @endcode

  - <ns8:SetDot1XConfigurationResponse> @ref _ns8__SetDot1XConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetDot1XConfigurationResponse(struct soap*, struct _ns8__SetDot1XConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetDot1XConfigurationResponse(struct soap*, struct _ns8__SetDot1XConfigurationResponse*);
    @endcode

  - <ns8:GetDot1XConfiguration> @ref _ns8__GetDot1XConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetDot1XConfiguration(struct soap*, struct _ns8__GetDot1XConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetDot1XConfiguration(struct soap*, struct _ns8__GetDot1XConfiguration*);
    @endcode

  - <ns8:GetDot1XConfigurationResponse> @ref _ns8__GetDot1XConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetDot1XConfigurationResponse(struct soap*, struct _ns8__GetDot1XConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetDot1XConfigurationResponse(struct soap*, struct _ns8__GetDot1XConfigurationResponse*);
    @endcode

  - <ns8:GetDot1XConfigurations> @ref _ns8__GetDot1XConfigurations
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetDot1XConfigurations(struct soap*, struct _ns8__GetDot1XConfigurations*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetDot1XConfigurations(struct soap*, struct _ns8__GetDot1XConfigurations*);
    @endcode

  - <ns8:GetDot1XConfigurationsResponse> @ref _ns8__GetDot1XConfigurationsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetDot1XConfigurationsResponse(struct soap*, struct _ns8__GetDot1XConfigurationsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetDot1XConfigurationsResponse(struct soap*, struct _ns8__GetDot1XConfigurationsResponse*);
    @endcode

  - <ns8:DeleteDot1XConfiguration> @ref _ns8__DeleteDot1XConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__DeleteDot1XConfiguration(struct soap*, struct _ns8__DeleteDot1XConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__DeleteDot1XConfiguration(struct soap*, struct _ns8__DeleteDot1XConfiguration*);
    @endcode

  - <ns8:DeleteDot1XConfigurationResponse> @ref _ns8__DeleteDot1XConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__DeleteDot1XConfigurationResponse(struct soap*, struct _ns8__DeleteDot1XConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__DeleteDot1XConfigurationResponse(struct soap*, struct _ns8__DeleteDot1XConfigurationResponse*);
    @endcode

  - <ns8:GetRelayOutputs> @ref _ns8__GetRelayOutputs
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetRelayOutputs(struct soap*, struct _ns8__GetRelayOutputs*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetRelayOutputs(struct soap*, struct _ns8__GetRelayOutputs*);
    @endcode

  - <ns8:GetRelayOutputsResponse> @ref _ns8__GetRelayOutputsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetRelayOutputsResponse(struct soap*, struct _ns8__GetRelayOutputsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetRelayOutputsResponse(struct soap*, struct _ns8__GetRelayOutputsResponse*);
    @endcode

  - <ns8:SetRelayOutputSettings> @ref _ns8__SetRelayOutputSettings
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetRelayOutputSettings(struct soap*, struct _ns8__SetRelayOutputSettings*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetRelayOutputSettings(struct soap*, struct _ns8__SetRelayOutputSettings*);
    @endcode

  - <ns8:SetRelayOutputSettingsResponse> @ref _ns8__SetRelayOutputSettingsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetRelayOutputSettingsResponse(struct soap*, struct _ns8__SetRelayOutputSettingsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetRelayOutputSettingsResponse(struct soap*, struct _ns8__SetRelayOutputSettingsResponse*);
    @endcode

  - <ns8:SetRelayOutputState> @ref _ns8__SetRelayOutputState
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetRelayOutputState(struct soap*, struct _ns8__SetRelayOutputState*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetRelayOutputState(struct soap*, struct _ns8__SetRelayOutputState*);
    @endcode

  - <ns8:SetRelayOutputStateResponse> @ref _ns8__SetRelayOutputStateResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SetRelayOutputStateResponse(struct soap*, struct _ns8__SetRelayOutputStateResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SetRelayOutputStateResponse(struct soap*, struct _ns8__SetRelayOutputStateResponse*);
    @endcode

  - <ns8:SendAuxiliaryCommand> @ref _ns8__SendAuxiliaryCommand
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SendAuxiliaryCommand(struct soap*, struct _ns8__SendAuxiliaryCommand*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SendAuxiliaryCommand(struct soap*, struct _ns8__SendAuxiliaryCommand*);
    @endcode

  - <ns8:SendAuxiliaryCommandResponse> @ref _ns8__SendAuxiliaryCommandResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__SendAuxiliaryCommandResponse(struct soap*, struct _ns8__SendAuxiliaryCommandResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__SendAuxiliaryCommandResponse(struct soap*, struct _ns8__SendAuxiliaryCommandResponse*);
    @endcode

  - <ns8:GetDot11Capabilities> @ref _ns8__GetDot11Capabilities
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetDot11Capabilities(struct soap*, struct _ns8__GetDot11Capabilities*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetDot11Capabilities(struct soap*, struct _ns8__GetDot11Capabilities*);
    @endcode

  - <ns8:GetDot11CapabilitiesResponse> @ref _ns8__GetDot11CapabilitiesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetDot11CapabilitiesResponse(struct soap*, struct _ns8__GetDot11CapabilitiesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetDot11CapabilitiesResponse(struct soap*, struct _ns8__GetDot11CapabilitiesResponse*);
    @endcode

  - <ns8:GetDot11Status> @ref _ns8__GetDot11Status
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetDot11Status(struct soap*, struct _ns8__GetDot11Status*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetDot11Status(struct soap*, struct _ns8__GetDot11Status*);
    @endcode

  - <ns8:GetDot11StatusResponse> @ref _ns8__GetDot11StatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetDot11StatusResponse(struct soap*, struct _ns8__GetDot11StatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetDot11StatusResponse(struct soap*, struct _ns8__GetDot11StatusResponse*);
    @endcode

  - <ns8:ScanAvailableDot11Networks> @ref _ns8__ScanAvailableDot11Networks
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__ScanAvailableDot11Networks(struct soap*, struct _ns8__ScanAvailableDot11Networks*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__ScanAvailableDot11Networks(struct soap*, struct _ns8__ScanAvailableDot11Networks*);
    @endcode

  - <ns8:ScanAvailableDot11NetworksResponse> @ref _ns8__ScanAvailableDot11NetworksResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__ScanAvailableDot11NetworksResponse(struct soap*, struct _ns8__ScanAvailableDot11NetworksResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__ScanAvailableDot11NetworksResponse(struct soap*, struct _ns8__ScanAvailableDot11NetworksResponse*);
    @endcode

  - <ns8:GetSystemUris> @ref _ns8__GetSystemUris
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetSystemUris(struct soap*, struct _ns8__GetSystemUris*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetSystemUris(struct soap*, struct _ns8__GetSystemUris*);
    @endcode

  - <ns8:GetSystemUrisResponse> @ref _ns8__GetSystemUrisResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__GetSystemUrisResponse(struct soap*, struct _ns8__GetSystemUrisResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__GetSystemUrisResponse(struct soap*, struct _ns8__GetSystemUrisResponse*);
    @endcode

  - <ns8:StartFirmwareUpgrade> @ref _ns8__StartFirmwareUpgrade
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__StartFirmwareUpgrade(struct soap*, struct _ns8__StartFirmwareUpgrade*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__StartFirmwareUpgrade(struct soap*, struct _ns8__StartFirmwareUpgrade*);
    @endcode

  - <ns8:StartFirmwareUpgradeResponse> @ref _ns8__StartFirmwareUpgradeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__StartFirmwareUpgradeResponse(struct soap*, struct _ns8__StartFirmwareUpgradeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__StartFirmwareUpgradeResponse(struct soap*, struct _ns8__StartFirmwareUpgradeResponse*);
    @endcode

  - <ns8:StartSystemRestore> @ref _ns8__StartSystemRestore
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__StartSystemRestore(struct soap*, struct _ns8__StartSystemRestore*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__StartSystemRestore(struct soap*, struct _ns8__StartSystemRestore*);
    @endcode

  - <ns8:StartSystemRestoreResponse> @ref _ns8__StartSystemRestoreResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns8__StartSystemRestoreResponse(struct soap*, struct _ns8__StartSystemRestoreResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns8__StartSystemRestoreResponse(struct soap*, struct _ns8__StartSystemRestoreResponse*);
    @endcode

@section ns9 Top-level root elements of schema "http://www.onvif.org/ver10/events/wsdl"

  - <ns9:GetServiceCapabilities> @ref _ns9__GetServiceCapabilities
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns9__GetServiceCapabilities(struct soap*, struct _ns9__GetServiceCapabilities*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns9__GetServiceCapabilities(struct soap*, struct _ns9__GetServiceCapabilities*);
    @endcode

  - <ns9:GetServiceCapabilitiesResponse> @ref _ns9__GetServiceCapabilitiesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns9__GetServiceCapabilitiesResponse(struct soap*, struct _ns9__GetServiceCapabilitiesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns9__GetServiceCapabilitiesResponse(struct soap*, struct _ns9__GetServiceCapabilitiesResponse*);
    @endcode

  - <ns9:Capabilities> (use wsdl2h option -g to auto-generate)

  - <ns9:CreatePullPointSubscription> @ref _ns9__CreatePullPointSubscription
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns9__CreatePullPointSubscription(struct soap*, struct _ns9__CreatePullPointSubscription*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns9__CreatePullPointSubscription(struct soap*, struct _ns9__CreatePullPointSubscription*);
    @endcode

  - <ns9:CreatePullPointSubscriptionResponse> @ref _ns9__CreatePullPointSubscriptionResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns9__CreatePullPointSubscriptionResponse(struct soap*, struct _ns9__CreatePullPointSubscriptionResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns9__CreatePullPointSubscriptionResponse(struct soap*, struct _ns9__CreatePullPointSubscriptionResponse*);
    @endcode

  - <ns9:PullMessages> @ref _ns9__PullMessages
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns9__PullMessages(struct soap*, struct _ns9__PullMessages*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns9__PullMessages(struct soap*, struct _ns9__PullMessages*);
    @endcode

  - <ns9:PullMessagesResponse> @ref _ns9__PullMessagesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns9__PullMessagesResponse(struct soap*, struct _ns9__PullMessagesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns9__PullMessagesResponse(struct soap*, struct _ns9__PullMessagesResponse*);
    @endcode

  - <ns9:PullMessagesFaultResponse> @ref _ns9__PullMessagesFaultResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns9__PullMessagesFaultResponse(struct soap*, struct _ns9__PullMessagesFaultResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns9__PullMessagesFaultResponse(struct soap*, struct _ns9__PullMessagesFaultResponse*);
    @endcode

  - <ns9:SetSynchronizationPoint> @ref _ns9__SetSynchronizationPoint
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns9__SetSynchronizationPoint(struct soap*, struct _ns9__SetSynchronizationPoint*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns9__SetSynchronizationPoint(struct soap*, struct _ns9__SetSynchronizationPoint*);
    @endcode

  - <ns9:SetSynchronizationPointResponse> @ref _ns9__SetSynchronizationPointResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns9__SetSynchronizationPointResponse(struct soap*, struct _ns9__SetSynchronizationPointResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns9__SetSynchronizationPointResponse(struct soap*, struct _ns9__SetSynchronizationPointResponse*);
    @endcode

  - <ns9:GetEventProperties> @ref _ns9__GetEventProperties
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns9__GetEventProperties(struct soap*, struct _ns9__GetEventProperties*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns9__GetEventProperties(struct soap*, struct _ns9__GetEventProperties*);
    @endcode

  - <ns9:GetEventPropertiesResponse> @ref _ns9__GetEventPropertiesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns9__GetEventPropertiesResponse(struct soap*, struct _ns9__GetEventPropertiesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns9__GetEventPropertiesResponse(struct soap*, struct _ns9__GetEventPropertiesResponse*);
    @endcode

@section ns15 Top-level root elements of schema ""

@section ns10 Top-level root elements of schema "http://docs.oasis-open.org/wsrf/rw-2"

@section ns11 Top-level root elements of schema "http://docs.oasis-open.org/wsrf/r-2"

  - <ns11:ResourceUnknownFault> (use wsdl2h option -g to auto-generate)

  - <ns11:ResourceUnavailableFault> (use wsdl2h option -g to auto-generate)

@section ns12 Top-level root elements of schema "http://www.onvif.org/ver20/imaging/wsdl"

  - <ns12:GetServiceCapabilities> @ref _ns12__GetServiceCapabilities
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns12__GetServiceCapabilities(struct soap*, struct _ns12__GetServiceCapabilities*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns12__GetServiceCapabilities(struct soap*, struct _ns12__GetServiceCapabilities*);
    @endcode

  - <ns12:GetServiceCapabilitiesResponse> @ref _ns12__GetServiceCapabilitiesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns12__GetServiceCapabilitiesResponse(struct soap*, struct _ns12__GetServiceCapabilitiesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns12__GetServiceCapabilitiesResponse(struct soap*, struct _ns12__GetServiceCapabilitiesResponse*);
    @endcode

  - <ns12:Capabilities> (use wsdl2h option -g to auto-generate)

  - <ns12:GetImagingSettings> @ref _ns12__GetImagingSettings
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns12__GetImagingSettings(struct soap*, struct _ns12__GetImagingSettings*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns12__GetImagingSettings(struct soap*, struct _ns12__GetImagingSettings*);
    @endcode

  - <ns12:GetImagingSettingsResponse> @ref _ns12__GetImagingSettingsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns12__GetImagingSettingsResponse(struct soap*, struct _ns12__GetImagingSettingsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns12__GetImagingSettingsResponse(struct soap*, struct _ns12__GetImagingSettingsResponse*);
    @endcode

  - <ns12:SetImagingSettings> @ref _ns12__SetImagingSettings
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns12__SetImagingSettings(struct soap*, struct _ns12__SetImagingSettings*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns12__SetImagingSettings(struct soap*, struct _ns12__SetImagingSettings*);
    @endcode

  - <ns12:SetImagingSettingsResponse> @ref _ns12__SetImagingSettingsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns12__SetImagingSettingsResponse(struct soap*, struct _ns12__SetImagingSettingsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns12__SetImagingSettingsResponse(struct soap*, struct _ns12__SetImagingSettingsResponse*);
    @endcode

  - <ns12:GetOptions> @ref _ns12__GetOptions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns12__GetOptions(struct soap*, struct _ns12__GetOptions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns12__GetOptions(struct soap*, struct _ns12__GetOptions*);
    @endcode

  - <ns12:GetOptionsResponse> @ref _ns12__GetOptionsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns12__GetOptionsResponse(struct soap*, struct _ns12__GetOptionsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns12__GetOptionsResponse(struct soap*, struct _ns12__GetOptionsResponse*);
    @endcode

  - <ns12:Move> @ref _ns12__Move
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns12__Move(struct soap*, struct _ns12__Move*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns12__Move(struct soap*, struct _ns12__Move*);
    @endcode

  - <ns12:MoveResponse> @ref _ns12__MoveResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns12__MoveResponse(struct soap*, struct _ns12__MoveResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns12__MoveResponse(struct soap*, struct _ns12__MoveResponse*);
    @endcode

  - <ns12:GetMoveOptions> @ref _ns12__GetMoveOptions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns12__GetMoveOptions(struct soap*, struct _ns12__GetMoveOptions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns12__GetMoveOptions(struct soap*, struct _ns12__GetMoveOptions*);
    @endcode

  - <ns12:GetMoveOptionsResponse> @ref _ns12__GetMoveOptionsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns12__GetMoveOptionsResponse(struct soap*, struct _ns12__GetMoveOptionsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns12__GetMoveOptionsResponse(struct soap*, struct _ns12__GetMoveOptionsResponse*);
    @endcode

  - <ns12:Stop> @ref _ns12__Stop
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns12__Stop(struct soap*, struct _ns12__Stop*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns12__Stop(struct soap*, struct _ns12__Stop*);
    @endcode

  - <ns12:StopResponse> @ref _ns12__StopResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns12__StopResponse(struct soap*, struct _ns12__StopResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns12__StopResponse(struct soap*, struct _ns12__StopResponse*);
    @endcode

  - <ns12:GetStatus> @ref _ns12__GetStatus
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns12__GetStatus(struct soap*, struct _ns12__GetStatus*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns12__GetStatus(struct soap*, struct _ns12__GetStatus*);
    @endcode

  - <ns12:GetStatusResponse> @ref _ns12__GetStatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns12__GetStatusResponse(struct soap*, struct _ns12__GetStatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns12__GetStatusResponse(struct soap*, struct _ns12__GetStatusResponse*);
    @endcode

@section ns13 Top-level root elements of schema "http://www.onvif.org/ver20/ptz/wsdl"

  - <ns13:GetServiceCapabilities> @ref _ns13__GetServiceCapabilities
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__GetServiceCapabilities(struct soap*, struct _ns13__GetServiceCapabilities*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__GetServiceCapabilities(struct soap*, struct _ns13__GetServiceCapabilities*);
    @endcode

  - <ns13:GetServiceCapabilitiesResponse> @ref _ns13__GetServiceCapabilitiesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__GetServiceCapabilitiesResponse(struct soap*, struct _ns13__GetServiceCapabilitiesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__GetServiceCapabilitiesResponse(struct soap*, struct _ns13__GetServiceCapabilitiesResponse*);
    @endcode

  - <ns13:Capabilities> (use wsdl2h option -g to auto-generate)

  - <ns13:GetNodes> @ref _ns13__GetNodes
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__GetNodes(struct soap*, struct _ns13__GetNodes*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__GetNodes(struct soap*, struct _ns13__GetNodes*);
    @endcode

  - <ns13:GetNodesResponse> @ref _ns13__GetNodesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__GetNodesResponse(struct soap*, struct _ns13__GetNodesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__GetNodesResponse(struct soap*, struct _ns13__GetNodesResponse*);
    @endcode

  - <ns13:GetNode> @ref _ns13__GetNode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__GetNode(struct soap*, struct _ns13__GetNode*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__GetNode(struct soap*, struct _ns13__GetNode*);
    @endcode

  - <ns13:GetNodeResponse> @ref _ns13__GetNodeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__GetNodeResponse(struct soap*, struct _ns13__GetNodeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__GetNodeResponse(struct soap*, struct _ns13__GetNodeResponse*);
    @endcode

  - <ns13:GetConfigurations> @ref _ns13__GetConfigurations
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__GetConfigurations(struct soap*, struct _ns13__GetConfigurations*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__GetConfigurations(struct soap*, struct _ns13__GetConfigurations*);
    @endcode

  - <ns13:GetConfigurationsResponse> @ref _ns13__GetConfigurationsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__GetConfigurationsResponse(struct soap*, struct _ns13__GetConfigurationsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__GetConfigurationsResponse(struct soap*, struct _ns13__GetConfigurationsResponse*);
    @endcode

  - <ns13:GetConfiguration> @ref _ns13__GetConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__GetConfiguration(struct soap*, struct _ns13__GetConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__GetConfiguration(struct soap*, struct _ns13__GetConfiguration*);
    @endcode

  - <ns13:GetConfigurationResponse> @ref _ns13__GetConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__GetConfigurationResponse(struct soap*, struct _ns13__GetConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__GetConfigurationResponse(struct soap*, struct _ns13__GetConfigurationResponse*);
    @endcode

  - <ns13:SetConfiguration> @ref _ns13__SetConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__SetConfiguration(struct soap*, struct _ns13__SetConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__SetConfiguration(struct soap*, struct _ns13__SetConfiguration*);
    @endcode

  - <ns13:SetConfigurationResponse> @ref _ns13__SetConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__SetConfigurationResponse(struct soap*, struct _ns13__SetConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__SetConfigurationResponse(struct soap*, struct _ns13__SetConfigurationResponse*);
    @endcode

  - <ns13:GetConfigurationOptions> @ref _ns13__GetConfigurationOptions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__GetConfigurationOptions(struct soap*, struct _ns13__GetConfigurationOptions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__GetConfigurationOptions(struct soap*, struct _ns13__GetConfigurationOptions*);
    @endcode

  - <ns13:GetConfigurationOptionsResponse> @ref _ns13__GetConfigurationOptionsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__GetConfigurationOptionsResponse(struct soap*, struct _ns13__GetConfigurationOptionsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__GetConfigurationOptionsResponse(struct soap*, struct _ns13__GetConfigurationOptionsResponse*);
    @endcode

  - <ns13:SendAuxiliaryCommand> @ref _ns13__SendAuxiliaryCommand
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__SendAuxiliaryCommand(struct soap*, struct _ns13__SendAuxiliaryCommand*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__SendAuxiliaryCommand(struct soap*, struct _ns13__SendAuxiliaryCommand*);
    @endcode

  - <ns13:SendAuxiliaryCommandResponse> @ref _ns13__SendAuxiliaryCommandResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__SendAuxiliaryCommandResponse(struct soap*, struct _ns13__SendAuxiliaryCommandResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__SendAuxiliaryCommandResponse(struct soap*, struct _ns13__SendAuxiliaryCommandResponse*);
    @endcode

  - <ns13:GetPresets> @ref _ns13__GetPresets
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__GetPresets(struct soap*, struct _ns13__GetPresets*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__GetPresets(struct soap*, struct _ns13__GetPresets*);
    @endcode

  - <ns13:GetPresetsResponse> @ref _ns13__GetPresetsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__GetPresetsResponse(struct soap*, struct _ns13__GetPresetsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__GetPresetsResponse(struct soap*, struct _ns13__GetPresetsResponse*);
    @endcode

  - <ns13:SetPreset> @ref _ns13__SetPreset
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__SetPreset(struct soap*, struct _ns13__SetPreset*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__SetPreset(struct soap*, struct _ns13__SetPreset*);
    @endcode

  - <ns13:SetPresetResponse> @ref _ns13__SetPresetResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__SetPresetResponse(struct soap*, struct _ns13__SetPresetResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__SetPresetResponse(struct soap*, struct _ns13__SetPresetResponse*);
    @endcode

  - <ns13:RemovePreset> @ref _ns13__RemovePreset
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__RemovePreset(struct soap*, struct _ns13__RemovePreset*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__RemovePreset(struct soap*, struct _ns13__RemovePreset*);
    @endcode

  - <ns13:RemovePresetResponse> @ref _ns13__RemovePresetResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__RemovePresetResponse(struct soap*, struct _ns13__RemovePresetResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__RemovePresetResponse(struct soap*, struct _ns13__RemovePresetResponse*);
    @endcode

  - <ns13:GotoPreset> @ref _ns13__GotoPreset
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__GotoPreset(struct soap*, struct _ns13__GotoPreset*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__GotoPreset(struct soap*, struct _ns13__GotoPreset*);
    @endcode

  - <ns13:GotoPresetResponse> @ref _ns13__GotoPresetResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__GotoPresetResponse(struct soap*, struct _ns13__GotoPresetResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__GotoPresetResponse(struct soap*, struct _ns13__GotoPresetResponse*);
    @endcode

  - <ns13:GetStatus> @ref _ns13__GetStatus
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__GetStatus(struct soap*, struct _ns13__GetStatus*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__GetStatus(struct soap*, struct _ns13__GetStatus*);
    @endcode

  - <ns13:GetStatusResponse> @ref _ns13__GetStatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__GetStatusResponse(struct soap*, struct _ns13__GetStatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__GetStatusResponse(struct soap*, struct _ns13__GetStatusResponse*);
    @endcode

  - <ns13:GotoHomePosition> @ref _ns13__GotoHomePosition
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__GotoHomePosition(struct soap*, struct _ns13__GotoHomePosition*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__GotoHomePosition(struct soap*, struct _ns13__GotoHomePosition*);
    @endcode

  - <ns13:GotoHomePositionResponse> @ref _ns13__GotoHomePositionResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__GotoHomePositionResponse(struct soap*, struct _ns13__GotoHomePositionResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__GotoHomePositionResponse(struct soap*, struct _ns13__GotoHomePositionResponse*);
    @endcode

  - <ns13:SetHomePosition> @ref _ns13__SetHomePosition
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__SetHomePosition(struct soap*, struct _ns13__SetHomePosition*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__SetHomePosition(struct soap*, struct _ns13__SetHomePosition*);
    @endcode

  - <ns13:SetHomePositionResponse> @ref _ns13__SetHomePositionResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__SetHomePositionResponse(struct soap*, struct _ns13__SetHomePositionResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__SetHomePositionResponse(struct soap*, struct _ns13__SetHomePositionResponse*);
    @endcode

  - <ns13:ContinuousMove> @ref _ns13__ContinuousMove
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__ContinuousMove(struct soap*, struct _ns13__ContinuousMove*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__ContinuousMove(struct soap*, struct _ns13__ContinuousMove*);
    @endcode

  - <ns13:ContinuousMoveResponse> @ref _ns13__ContinuousMoveResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__ContinuousMoveResponse(struct soap*, struct _ns13__ContinuousMoveResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__ContinuousMoveResponse(struct soap*, struct _ns13__ContinuousMoveResponse*);
    @endcode

  - <ns13:RelativeMove> @ref _ns13__RelativeMove
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__RelativeMove(struct soap*, struct _ns13__RelativeMove*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__RelativeMove(struct soap*, struct _ns13__RelativeMove*);
    @endcode

  - <ns13:RelativeMoveResponse> @ref _ns13__RelativeMoveResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__RelativeMoveResponse(struct soap*, struct _ns13__RelativeMoveResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__RelativeMoveResponse(struct soap*, struct _ns13__RelativeMoveResponse*);
    @endcode

  - <ns13:AbsoluteMove> @ref _ns13__AbsoluteMove
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__AbsoluteMove(struct soap*, struct _ns13__AbsoluteMove*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__AbsoluteMove(struct soap*, struct _ns13__AbsoluteMove*);
    @endcode

  - <ns13:AbsoluteMoveResponse> @ref _ns13__AbsoluteMoveResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__AbsoluteMoveResponse(struct soap*, struct _ns13__AbsoluteMoveResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__AbsoluteMoveResponse(struct soap*, struct _ns13__AbsoluteMoveResponse*);
    @endcode

  - <ns13:Stop> @ref _ns13__Stop
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__Stop(struct soap*, struct _ns13__Stop*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__Stop(struct soap*, struct _ns13__Stop*);
    @endcode

  - <ns13:StopResponse> @ref _ns13__StopResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns13__StopResponse(struct soap*, struct _ns13__StopResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns13__StopResponse(struct soap*, struct _ns13__StopResponse*);
    @endcode

@section ns14 Top-level root elements of schema "http://www.w3.org/2005/08/addressing"

  - <ns14:EndpointReference> (use wsdl2h option -g to auto-generate)

  - <ns14:ReferenceParameters> (use wsdl2h option -g to auto-generate)

  - <ns14:Metadata> (use wsdl2h option -g to auto-generate)

  - <ns14:MessageID> (use wsdl2h option -g to auto-generate)

  - <ns14:RelatesTo> (use wsdl2h option -g to auto-generate)

  - <ns14:ReplyTo> (use wsdl2h option -g to auto-generate)

  - <ns14:From> (use wsdl2h option -g to auto-generate)

  - <ns14:FaultTo> (use wsdl2h option -g to auto-generate)

  - <ns14:To> (use wsdl2h option -g to auto-generate)

  - <ns14:Action> (use wsdl2h option -g to auto-generate)

  - <ns14:RetryAfter> (use wsdl2h option -g to auto-generate)

  - <ns14:ProblemHeaderQName> (use wsdl2h option -g to auto-generate)

  - <ns14:ProblemIRI> (use wsdl2h option -g to auto-generate)

  - <ns14:ProblemAction> (use wsdl2h option -g to auto-generate)

*/

/* End of myonvif.h */
